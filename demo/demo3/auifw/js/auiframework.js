/* Packaged at 11:24 Nov 22, 2016. Version: None */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);

	__webpack_require__(59);

	__webpack_require__(92);
	__webpack_require__(96);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Preload
	// ----------------------------------------
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);

	// Components
	// ----------------------------------------

	__webpack_require__(7);

	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(13);
	__webpack_require__(14);
	__webpack_require__(15);
	__webpack_require__(16);
	__webpack_require__(17);
	__webpack_require__(18);
	__webpack_require__(19);
	__webpack_require__(20);
	__webpack_require__(21);
	__webpack_require__(22);
	__webpack_require__(23);
	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(26);
	__webpack_require__(27);
	__webpack_require__(28);
	__webpack_require__(29);
	__webpack_require__(30);
	__webpack_require__(31);
	__webpack_require__(32);
	__webpack_require__(33);
	__webpack_require__(34);
	__webpack_require__(35);
	__webpack_require__(36);
	__webpack_require__(37);
	__webpack_require__(38);
	__webpack_require__(39);
	__webpack_require__(40);
	__webpack_require__(41);
	__webpack_require__(42);
	__webpack_require__(43);
	__webpack_require__(44);
	__webpack_require__(45);
	__webpack_require__(46);
	//require('./svg.core.js');
	//require('./svg.barchart.js');
	//require('./svg.columnchart.js');
	//require('./svg.facechart.js');
	//require('./svg.halfpiechart.js');
	//require('./svg.linechart.js');
	//require('./svg.linefacechart.js');
	//require('./svg.mapchart.js');
	//require('./svg.piechart.js');
	//require('./switchbutton.js');
	__webpack_require__(47);
	__webpack_require__(48);
	__webpack_require__(49);
	__webpack_require__(50);
	__webpack_require__(51);
	__webpack_require__(52);

	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(56);
	__webpack_require__(57);
	__webpack_require__(58);

/***/ },
/* 2 */
/***/ function(module, exports) {

	(function ($) {

	    var _browser = {},
	        _device = {};
	    (function () {
	        var ua = navigator.userAgent.toLowerCase();
	        if (ua.indexOf(' edge') > 0) {
	            _browser.edge = ua.match(/edge\/([\d.]+)/)[1];
	        }
	        else if (ua.indexOf(' msie') > 0) {
	            _browser.msie = ua.match(/msie ([\d.]+)/)[1];
	        }
	        else if (window.MSStream) { // IE 10+
	            _browser.msie = ua.match(/rv\:([\d.]+)/)[1];
	        }
	        else if (ua.indexOf(' firefox') > 0) {
	            _browser.firefox = ua.match(/firefox\/([\d.]+)/)[1];
	        }
	        else if (ua.indexOf(' opr') > 0) {
	            _browser.opera = ua.match(/opr\/([\d.]+)/)[1];
	        }
	        else if (ua.indexOf(' chrome') > 0) {
	            _browser.chrome = ua.match(/chrome\/([\d.]+)/)[1];
	        }
	        else if (ua.indexOf(' safari') > 0) {
	            _browser.safari = ua.match(/version\/([\d.]+)/)[1];
	        }
	        else {
	            _browser.unknown = 'unknown';
	        }
	    })();

	    (function () {
	        var ua = navigator.userAgent.toLowerCase();
	        if (ua.indexOf('ipad') > -1) {
	            _device.ipad = ua.match(/os\s([\d_]+)/)[1];
	        }
	        if (ua.indexOf('iphone') > -1) {
	            _device.iphone = ua.match(/os\s([\d_]+)/)[1];
	        }
	    })();

	    window.af = window.af ? window.af : {};

	    window.af.Utils = {
	        KeyCode: {
	            BACKSPACE: 8,
	            TAB: 9,

	            ENTER: 13,

	            ESC: 27,

	            SPACE: 32,
	            PAGE_UP: 33,
	            PAGE_DOWN: 34,
	            END: 35,
	            HOME: 36,
	            LEFT: 37,
	            UP: 38,
	            RIGHT: 39,
	            DOWN: 40,

	            DELETE: 46,

	            NUM_0: 48,
	            NUM_1: 49,
	            NUM_2: 50,
	            NUM_3: 51,
	            NUM_4: 52,
	            NUM_5: 53,
	            NUM_6: 54,
	            NUM_7: 55,
	            NUM_8: 56,
	            NUM_9: 57,

	            KEY_A: 65,
	            KEY_B: 66,
	            KEY_C: 67,
	            KEY_D: 68,
	            KEY_E: 69,
	            KEY_F: 70,
	            KEY_G: 71,
	            KEY_H: 72,
	            KEY_I: 73,
	            KEY_J: 74,
	            KEY_K: 75,
	            KEY_L: 76,
	            KEY_M: 77,
	            KEY_N: 78,
	            KEY_O: 79,
	            KEY_P: 80,
	            KEY_Q: 81,
	            KEY_R: 82,
	            KEY_S: 83,
	            KEY_T: 84,
	            KEY_U: 85,
	            KEY_V: 86,
	            KEY_W: 87,
	            KEY_X: 88,
	            KEY_Y: 89,
	            KEY_Z: 90,

	            SMALL_KEY_BOARD_0: 96,
	            SMALL_KEY_BOARD_1: 97,
	            SMALL_KEY_BOARD_2: 98,
	            SMALL_KEY_BOARD_3: 99,
	            SMALL_KEY_BOARD_4: 100,
	            SMALL_KEY_BOARD_5: 101,
	            SMALL_KEY_BOARD_6: 102,
	            SMALL_KEY_BOARD_7: 103,
	            SMALL_KEY_BOARD_8: 104,
	            SMALL_KEY_BOARD_9: 105,
	            SMALL_KEY_BOARD_MUL: 106,
	            SMALL_KEY_BOARD_ADD: 107,

	            SMALL_KEY_BOARD_SUB: 109,
	            SMALL_KEY_BOARD_DOT: 110,
	            SMALL_KEY_BOARD_DEV: 111,

	            SEMICOLON: 186,
	            KEY_ADD: 187,
	            COMMA: 188,
	            KEY_SUB: 189,
	            DOT: 190,
	            BEVEL: 191,
	            KEY_DRIP: 192,

	            LEFT_BRACKETS: 219,
	            TURN_BEVEL: 220,
	            RIGHT_BRACKETS: 221,
	            UP_COMMA: 222
	        },
	        Browser: _browser,
	        Device: _device,
	        preventDefault: function (e) {
	            if (e.preventDefault) e.preventDefault();
	            else return false;
	        }
	    };

	    window.af.config = {
	        validations: {
	            iconClass: 'afui-icon-exclamatory',
	            alertStyle: 'left'
	        }
	    };

	    // Private array of chars to use
	    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');

	    Math.uuid = function (len, radix) {
	        var chars = CHARS, uuid = [], i;
	        radix = radix || chars.length;

	        if (len) {
	            // Compact form
	            for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];
	        } else {
	            // rfc4122, version 4 form
	            var r;

	            // rfc4122 requires these characters
	            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
	            uuid[14] = '4';

	            // Fill in random data.  At i==19 set the high bits of clock sequence as
	            // per rfc4122, sec. 4.1.5
	            for (i = 0; i < 36; i++) {
	                if (!uuid[i]) {
	                    r = 0 | Math.random() * 16;
	                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
	                }
	            }
	        }

	        return uuid.join('');
	    };

	    String.prototype.format = function () {
	        var args = arguments;
	        var bool = $.isArray(args[0]);
	        return this.replace(/\{(\d+)\}/g, function (m, n) {
	            return bool ? args[0][n] : args[n];
	        });
	    };

	    window.af.Date = {
	        I18N: {
	            Months: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	            FullMonths: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	        }
	    };

	    $.fn.setCursorPosition = function (option) {
	        var settings = $.extend({
	            index: 0
	        }, option)
	        return this.each(function () {
	            var elem = this
	            var val = elem.value
	            var len = val.length
	            var index = settings.index

	            // 非input和textarea直接返回
	            var $elem = $(elem)
	            if (!$elem.is('input,textarea')) return
	            // 超过文本长度直接返回
	            if (len < index) return

	            setTimeout(function () {
	                elem.focus()
	                if (elem.setSelectionRange) { // 标准浏览器
	                    elem.setSelectionRange(index, index)
	                } else { // IE9-
	                    var range = elem.createTextRange()
	                    range.moveStart("character", -len)
	                    range.moveEnd("character", -len)
	                    range.moveStart("character", index)
	                    range.moveEnd("character", 0)
	                    range.select()
	                }
	            }, 10)
	        })
	    };

	}(jQuery));

	(function (window, $) {
	    "use strict";
	    var
		//保存当前的window.AUI对应的值
		_AUI = window.AUI,
		//保存当前的window.$$对应的值
		_$$ = window.$$,
		//与对象相关的公共方法
		objectUtil = {},
		//与事件相关的公共方法
		eventUtil = {},
		//和数值计算相关的公共方法
		mathUtil = {},
		//不属于以上三类的公共方法
		commonUtil = {},
		//
		version = 0.1,
		//控件使用的常量
		constant = {},
		//
		Map = function () {
		},
		//
		namespaceFormatString = null,
		//
		I18N = null,
		//
		timezoneItemsSource = [],
		//
		getDefaultLanguage = null,
		//KnockOut中打破继承数据源
		ko = window.ko || {},
		//AUI对应的局部变量
		AUI,
	    //事件的命名空间
	    eventNameSpace = ".auicommonevent",
	    //close事件
	    close = [],
	    //
	    onCloseWidget = [],
	    //
	    $html = $('html'),
		//
		path = getPath();
	    /**
		 * <p>Prometheus控件的核心类。其中包括一些公共方法。</p>
		 * 在控件中使用AUI的方式：
		 * @class AUI
		 * @static
		 * @constructor
		 * @requires jQuery
		 * @requires jQuery UI
		 * @requires Knockout
		 */
	    AUI = function () {
	    };
	    $.widget("aui.datagrid", {});

	    /**
		 * 获取绝对路径
		 */
	    function getPath() {
	        var
			//
			script = document.getElementsByTagName('script'),
			//
			value = '',
			//
			i = 0,
			//
			target = [],
			//
			c = script.length,
			//target的长度
			tc = 0;

	        for (; i < c; i++) {
	            target = script[i].src.split('/');
	            tc = target.length;
	            if (target[tc - 1].indexOf("core.js") == 0 || target[tc - 1].indexOf("auiframework.js") == 0) {
	                value = target.slice(0, tc - 2).join('/');
	                break;
	            }
	        }

	        return value;
	    }

	    //对象工具类
	    objectUtil = {
	        getClass: function (object) {
	            return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
	        },
	        isDate: function (date) {
	            return $$.getClass(date) == "Date";
	        },
	        isObject: function (obj) {
	            return $$.getClass(obj) == "Object";
	        },
	        /**
			 * 深拷贝一个对象
			 * @method clone
			 * @param {Object} obj 需要深拷贝的对象
			 * @return {Object}
			 */
	        clone: function (obj) {
	            if (typeof (obj) != 'object') {
	                return obj;
	            }

	            var re = {};
	            if (obj.constructor == Array) {
	                re = [];
	            }

	            for (var i in obj) {
	                re[i] = this.clone(obj[i]);
	            }

	            return re;

	        }
	    };
	    $.extend(AUI, objectUtil);

	    //浏览器版本
	    AUI.browser = function (ua) {
	        ua = ua.toLowerCase();

	        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
	        if (!!window.ActiveXObject || "ActiveXObject" in window) {
	            match[1] = 'msie';
	        }
	        return {
	            browser: match[1] || "",
	            version: match[2] || "0"
	        };
	    }((navigator.userAgent));

	    if (AUI.browser.browser == "mozilla") {
	        //ff browser
	        $html[0].addEventListener("DOMMouseScroll", function () {
	            executeEvent(close);
	        });
	    }
	    $html.on("mousedown" + eventNameSpace, function () {
	        executeEvent(close, "mousedown");
	    }).on("mousewheel" + eventNameSpace, function () {
	        executeEvent(close, "mousewheel");
	    });
	    //实现close事件的控件：combobox
	    function executeEvent(events, type) {
	        var
	            i,
	            cur,
	            c = events.length;

	        for (i = 0; i < c; i++) {
	            cur = events[i];
	            if (cur && $.isFunction(cur.element[cur.widget])) {
	                if (cur.except !== true) {
	                    //只在popup打开的时候触发回调。
	                    if (cur.visibility === true && cur.lock !== true) {
	                        cur.element[cur.widget](cur.method);
	                    }
	                } else {
	                    cur.except = false;
	                }

	            }
	        }
	    }

	    ///事件工具类
	    eventUtil = {
	        //获取已经注册过close事件的控件的名称
	        onCloseWidget: function () {
	            return onCloseWidget.toLocaleString();
	        },
	        /**
	         * 注册close事件
	         * @param {JQuery} element 注册close事件的控件宿主
	         * @param {string} widget 控件名称
	         * @param {string} method close事件生效时调用的回调函数
	         */
	        close: function (element, widget, method) {
	            close[close.length] = {
	                element: element,
	                widget: widget,
	                method: method
	            }
	            element.data("auiCloseIndex", close.length - 1);
	            onCloseWidget[onCloseWidget.length] = widget;
	        },
	        //注销close事件
	        offClose: function (element) {
	            var index = element.data("auiCloseIndex");
	            if (index >= 0 || index < close.length) {
	                element.removeData("auiCloseIndex");
	                delete close[index];
	            } else {
	                $.error('Index ' + index + ' is out of range.when delete callback from "$$.close".');
	            }

	        },
	        //设置close事件的visibility属性，该属性为false时不会执行对应的回调函数
	        closeVisibility: function (element, value) {
	            var index = element.data("auiCloseIndex");
	            if (index >= 0 || index < close.length) {
	                close[index].visibility = value;
	            } else {
	                $.error('Index ' + index + ' is out of range.when set visibility to "$$.close".');
	            }
	        },
	        //例外一次
	        closeExcept: function (element, value) {
	            var index = element.data("auiCloseIndex");
	            if (index >= 0 || index < close.length) {
	                close[index].except = value;
	            } else {
	                $.error('Index ' + index + ' is out of range.when set except to "$$.close".');
	            }
	        },
	        //在锁定期间例外
	        closeLock: function (element, value) {
	            var index = element.data("auiCloseIndex");
	            if (index >= 0 || index < close.length) {
	                close[index].lock = value;
	            } else {
	                $.error('Index ' + index + ' is out of range.when set except to "$$.close".');
	            }
	        },
	        //创建事件回调的参数对象
	        Event: function (props) {
	            if (!(this instanceof $$.Event)) {
	                return new $$.Event(props);
	            }

	            //触发事件属性的原值
	            this.oldValue = null,
	            //触发事件属性的新值
	            this.newValue = null,
	            //控件的寄宿jQuery对象
	            this.element = null,
	            //开发自定义参数
	            this.parameters = {};
	            $.extend(this, props);
	        },
	        /**
	         * 取消事件传播
	         * @method stopPropagation
	         */
	        stopPropagation: function () {
	            if (event.stopPropagation != undefined) {
	                event.stopPropagation();
	            } else {
	                window.event.cancelBubble = true;
	            }
	        },
	        /**
	         * 取消事件的默认操作
	         * @method cancelHandler
	         * @param {Event} event Event对象
	         */
	        cancelHandler: function (event) {
	            if (event.preventDefault) {
	                event.preventDefault();
	            }
	            if (event.returnValue) {
	                //IE
	                event.returnValue = false;
	            }

	            return false;
	        },
	        /**
	         * 管理事件的添加和删除
	         * @method updateEventHandler
	         * @param {Object} delegate 委托对象
	         * @param {function} 待处理的方法
	         * @param {boolean} isAdd 是否添加
	         */
	        updateEventHandler: function (sender, type, value, isAdd, name) {
	            if ($.isFunction(sender.options[type])) {
	                if (isAdd) {
	                    sender.options[type] = value;
	                } else {
	                    sender.options[type] = $.noop;
	                }
	            } else {
	                var name = name || ((value.name == "") ? value.toString() : value.name);
	                if (isAdd) {
	                    sender.options[type][name] = value;
	                } else {
	                    delete sender.options[type][name];

	                }
	            }
	        },
	        /**
	         * 执行delegate
	         * @method executeEventHandler
	         *
	         * @param {sender}
	         *            sender 触发当前事件的控件
	         * @param {String}
	         *            type 事件名称
	         * @param {Object}
	         *            delegate 委托对象
	         * @param {jQuery.Event}
	         *            event 事件参数
	         * @param {Object}
	         *            delegate 委托对象
	         *
	         */
	        executeEventHandler: function (sender, type, delegate, event, data) {
	            event = $.Event(event);
	            if (data && data.parameters && $.isEmptyObject(data.parameters)) {
	                //如果没有设置parameters，尝试从控件的options中的对应参数列表获取。
	                data.parameters = (sender && sender.options && sender.options.parameters && sender.options.parameters[type]) || {};
	            }
	            event.type = type;
	            if ($.isFunction(delegate)) {
	                return delegate.apply(null, [event].concat(data));
	            } else {
	                for (var n in delegate) {
	                    delegate[n].apply(null, [event].concat(data));
	                }
	            }

	        },
	        /**
	         * 清空delegate
	         * @method clearEventHandler
	         *
	         * @param {Object}
	         *            delegate 委托对象
	         */
	        clearEventHandler: function (delegate) {
	            for (var n in delegate) {
	                delete delegate[n];
	            }
	        },
	        /**
	         * 清空delegate
	         * @method EventHandler
	         */
	        EventHandler: function () {
	            $.extend(this, {
	                eventHandler: [],
	                add: function (func) {
	                    if (this.eventHandler.length <= 0) {
	                        this.eventHandler = [];
	                    }
	                    for (var i = 0, length = arguments.length; i < length; i++) {
	                        if (typeof (func) == "function") {
	                            this.eventHandler.push(func);
	                        }
	                    }

	                    return this;
	                },
	                remove: function (func) {
	                    var i = 0, length = arguments.length, index = 0;
	                    if (!this.eventHandler) {
	                        return;
	                    }

	                    // 如果后面的func为undefined，则删除该name对应的所有事件
	                    if (length == 0) {
	                        this.eventHandler = [];
	                        return;
	                    }

	                    for (; i < length; i++) {
	                        index = this.eventHandler.indexOf(arguments[i]);
	                        this.eventHandler.splice(index, 1);
	                    }
	                },
	                execute: function (sender, event, data) {
	                    if (!this.eventHandler) {
	                        return;
	                    }
	                    event = $.Event(event);
	                    event.type = name;
	                    var result = true;

	                    for (var i = 0, length = this.eventHandler.length; i < length; i++) {
	                        result = (this.eventHandler[i].apply(sender, [event].concat(data)) === false ? false : true) && result;
	                    }

	                    return result;
	                }
	            });
	        }
	    };
	    $.extend(AUI, eventUtil);

	    //算数工具类
	    mathUtil = {
	        /**
			 * 获取滚动条中的元素，滚动的距离
			 * @method getViewPosition
			 * @param {jQuery} element 需要计算滚动距离的元素对应的jQuery对象
			 * @param {jQuery} scroll 开启滚动条的div对应的jQuery对象
			 */
	        getViewPosition: function (element, scroll) {
	            var et_offset = element.offset(), sl_offset = scroll.offset(), returnValue = {};

	            returnValue.left = et_offset.left - sl_offset.left + scroll.scrollLeft();
	            returnValue.top = et_offset.top - sl_offset.top + scroll.scrollTop();

	            return returnValue;
	        },
	        /**
			 * 去掉像素值最后的px
			 * @method removePx
			 * @param {String} 需要转换的值
			 * @return {Number}
			 */
	        removePx: function (value) {
	            return isNaN(parseInt(value)) ? 0 : parseInt(value);
	        }
	    };
	    $.extend(AUI, mathUtil);

	    //公共方法
	    commonUtil = {
	        path: path,
	        /**
			 * 获取或设置一个值，该值表示log是否允许输出
			 * @property isShowLog
			 * @default true
			 * @type Boolean
			 */
	        isShowLog: true,
	        /**
			 * log计数器
			 * @property logIndex
			 * @default 0
			 * @type Number
			 */
	        logIndex: 0,
	        /**
			 * 获取AUI的版本
			 * @method version
			 * @return {Number}
			 */
	        version: function () {
	            return version;
	        },

	        /**
	         * 输出log信息
	         * @method log
	         */
	        log: function () {
	            try {
	                if (this.isShowLog === true) {
	                    if (typeof console != "undefined" && typeof console.log != "undefined") {
	                        console.log.apply(console, ["[" + this.logIndex + "] "].concat(Array.prototype.slice.call(arguments)));
	                        this.logIndex++;
	                    }
	                }
	            } catch (e) {
	                // Ignore;
	            }
	        },

	        /*
	         * 输出debug log信息
	         * @method debug
	         */
	        debug: function () {
	            try {
	                if (this.isShowLog === true) {
	                    if (typeof console != "undefined" && typeof console.debug != "undefined") {
	                        console.debug.apply(console, ["[" + this.logIndex + "] "].concat(Array.prototype.slice.call(arguments)));
	                        this.logIndex++;
	                    }
	                }
	            } catch (e) {
	                // Ignore;
	            }
	        },

	        /**
	         * 输出info log信息
	         * @method info
	         */
	        info: function () {
	            try {
	                if (this.isShowLog === true) {
	                    if (typeof console != "undefined" && typeof console.info != "undefined") {
	                        console.info.apply(console, ["[" + this.logIndex + "] "].concat(Array.prototype.slice.call(arguments)));
	                        this.logIndex++;
	                    }
	                }
	            } catch (e) {
	                // Ignore;
	            }
	        },

	        /**
	         * 输出warning log信息
	         * @method warn
	         */
	        warn: function () {
	            try {
	                if (this.isShowLog === true) {
	                    if (typeof console != "undefined" && typeof console.warn != "undefined") {
	                        console.warn.apply(console, ["[" + this.logIndex + "] "].concat(Array.prototype.slice.call(arguments)));
	                        this.logIndex++;
	                    }
	                }
	            } catch (e) {
	                // Ignore;
	            }
	        },

	        /**
	         * 输出error log信息
	         * @method error
	         */
	        error: function () {
	            try {
	                if (this.isShowLog === true) {
	                    if (typeof console != "undefined" && typeof console.error != "undefined") {
	                        console.error.apply(console, ["[" + this.logIndex + "] "].concat(Array.prototype.slice.call(arguments)));
	                        this.logIndex++;
	                    }
	                }
	            } catch (e) {
	                // Ignore;
	            }
	        },

	        /**
			 * 由Prometheus类库提供的一些默认CSS样式。
			 * @property defaultCss
			 * @type Object
			 */
	        defaultCss: {
	            DISPLAY_BLOCK: "aui-display-block",
	            DISPLAY_NONE: "aui-display-none",
	            VISIBILITY_VISIBLE: "aui-visibility-visible",
	            VISIBILITY_HIDDEN: "aui-visibility-hidden",
	            BORDER: "aui-border",
	            BORDER_RADIUS: "aui-border-radius",
	            BORDER_MOUSEOVER: "aui-border-mouseover",
	            BORDER_FOCUS: "aui-border-focus",
	            BORDER_PRESSED: "aui-border-pressed",
	            BORDER_DISABLED: "aui-border-disabled"
	        },
	        /**
			 * 常用keyCode值。
			 * @property keyCode
			 * @type Object
			 */
	        keyCode: {
	            ENTER: 13,
	            SHIFT: 16,
	            SPACE_BAR: 32,
	            LEFT_ARROW: 37,
	            UP_ARROW: 38,
	            RIGHT_ARROW: 39,
	            DOWN_ARROW: 40,
	            COMMAND: 91	// MAC OS的Command按键
	        },
	        /**
			 * 根据控件名称，生成该控件实例的UUID。
			 * @method generateUUIDByControlName
			 * @param {String} controlName 控件名称，不区分大小写，最终都会转义为小写。
			 * @return {String} 生成后的UUID。
			 */
	        generateUUIDByControlName: function (name) {
	            if (name) {
	                return "aui-" + name.toLowerCase() + "-" + this.generateUUID();
	            }
	            return this.generateUUID();
	        },
	        /**
			 * 生成一个UUID。
			 * @method generateUUID
			 * @return {String} 生成后的UUID。
			 */
	        generateUUID: function () {
	            var guid = "", n;
	            for (var i = 1; i <= 32; i++) {
	                n = Math.floor(Math.random() * 16.0).toString(16);
	                guid += n;
	                if ((i == 8) || (i == 12) || (i == 16) || (i == 20))
	                    guid += "-";
	            }
	            return guid;
	        },
	        /**
			 * 去掉DOM结构中的空白子节点，并且仅仅是当前DOM元素的子节点，不包括子节点的子节点。
			 * @method cleanWhitespace
			 * @param {Node} domElement 需要清除空白子节点的DOM节点。
			 */
	        cleanWhitespace: function (domElement) {
	            var nodes = domElement.childNodes;
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                if (node.nodeType == 3// Node.TEXT_NODE
					&& /\s/.test(node.nodeValue)) {
	                    node.parentNode.removeChild(node);
	                }
	            }
	        },
	        /**
			 * 获取当前使用浏览器名称以及版本。
			 * @method checkBrowser
			 * @return {Object} 返回浏览器信息对象。name为当前浏览器名称，version为当前浏览器版本。
			 */
	        checkBrowser: function () {
	            var browsers = {
	                IE: "MSIE"
	            }, index = navigator.userAgent.indexOf(browsers.IE), obj = {};
	            if (index >= 0) {
	                obj.name = browsers.IE;
	                obj.version = navigator.userAgent.substr(index + 5, 3);
	                return obj;
	            }
	        },
	        /**
			 * 判断元素的滚动条是否已经显示
			 * @method isScroll
			 * @param {jQuery} 设置滚动条的jquery对象
			 */
	        isScroll: function (scroll) {
	            var
				//滚动条元素的视区高度
				scrollHeight,
				//滚动条子元素的高度和
				childrenHeight = 0,
				//返回值
				result = false,
				//循环
				i = 0,
				//子元素的个数
				childrenCount;
	            if (scroll !== undefined) {
	                scrollHeight = scroll.height();
	                childrenCount = scroll.children().length;
	                for (; i < childrenCount; i++) {
	                    childrenHeight += $(scroll.children()[i]).outerHeight();
	                }

	                if (scrollHeight < childrenHeight) {
	                    result = true;
	                }

	            }

	            return result;
	        },
	        /**
			 * @method timeZoneItemsSource
			 */
	        timeZoneItemsSource: function (value) {
	            if (arguments.length == 0) {
	                return timezoneItemsSource;
	            } else {
	                timezoneItemsSource = value;
	            }
	        },
	        /**
			 * @method xmlToJson
			 */
	        xmlToJson: function (xml) {
	            // Create the return object
	            var obj = {};
	            if (xml.nodeType == 1) {// element
	                // do attributes
	                if (xml.attributes.length > 0) {
	                    obj["@attributes"] = {};
	                    for (var j = 0; j < xml.attributes.length; j++) {
	                        var attribute = xml.attributes.item(j);
	                        obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
	                    }
	                } else {
	                    if (!xml.hasChildNodes()) {
	                        obj = xml.nodeValue || "";
	                    }
	                }
	            } else if (xml.nodeType == 3) {// text
	                obj = "";
	                obj = xml.nodeValue;
	            }

	            // do children
	            if (xml.hasChildNodes()) {
	                for (var i = 0; i < xml.childNodes.length; i++) {
	                    var item = xml.childNodes.item(i);
	                    var nodeName = item.nodeName;
	                    if (typeof (obj[nodeName]) == "undefined") {
	                        if (item.nodeType == 3) {
	                            obj = "";
	                            obj = this.xmlToJson(item);
	                        } else {
	                            obj[nodeName] = this.xmlToJson(item);
	                        }

	                    } else {
	                        if (typeof (obj[nodeName].length) == "undefined") {
	                            var old = obj[nodeName];
	                            obj[nodeName] = [];
	                            obj[nodeName].push(old);
	                        }
	                        obj[nodeName].push(this.xmlToJson(item));
	                    }
	                }
	            }
	            return obj;
	        },
	        /**
			 * @method getWebRoot
			 */
	        getWebRoot: function () {
	            var location = document.location;
	            var webroot = location.protocol + "//" + location.host + '/' + location.pathname.split('/')[1];
	            return webroot;
	        }
	    };
	    $.extend(AUI, commonUtil);

	    constant = {
	        /**
			 * 控件事件参数
			 */
	        _EventArgs: {
	            //触发事件属性的原值
	            oldValue: null,
	            //触发事件属性的新值
	            newValue: null,
	            //控件的寄宿jQuery对象
	            element: null,
	            //开发自定义参数
	            parameters: {}
	        },
	        /**
			 * 指定元素的显示状态。
			 */
	        _visibility: {
	            //visibility.visible 显示元素
	            visible: 0,
	            //visibility.collapsed 不显示元素，且不为其保留布局空间
	            collapsed: 1
	        }

	    };
	    $.extend(AUI, constant);

	    ko.bindingHandlers = ko.bindingHandlers || {};
	    /**
		 *
		 * 打破KO绑定的继承关系
		 * @method stopBindings
		 * @param
		 */
	    ko.bindingHandlers.stopBindings = {
	        init: function () {
	            return {
	                controlsDescendantBindings: true
	            };
	        }
	    };
	    /**
		 * @method getI18N
		 * @param namespace (string)
		 * @param key (string)
		 *
		 */
	    ko.bindingHandlers.getI18N = {
	        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
	            var
				//
				value = valueAccessor(),
				//
				valueUnwrapped = ko.utils.unwrapObservable(value),
				//
				allBindings = allBindingsAccessor(),
				//
				arg0 = allBindings.getI18N,
				//
				arg1 = allBindings.key,
				//
				arg2 = allBindings.arguments || [],
				//
				argn = namespaceFormatString(arg0),
				//
				val = __I18NMap__.get(argn + arg1);
	            if (val == undefined) {
	                val = __DefaultI18NMap__.get(argn + arg1);
	            }
	            $(element).html(val == undefined ? "" : val.format(Array.prototype.slice.call(arg2)));
	        }
	    };

	    window.ko = ko;

	    Map.prototype = {
	        _length: 0,
	        _DEF_PERFIX: '_MAP_KEY_',
	        size: function () {
	            return this._length;
	        },
	        get: function (key) {
	            return this[this._DEF_PERFIX + key];
	        },
	        put: function (key, value) {
	            if (!this[this._DEF_PERFIX + key]) {
	                this._length++;
	            }
	            this[this._DEF_PERFIX + key] = value;
	            return value;
	        },
	        remove: function (key) {
	            if (this._length > 0 && this[this._DEF_PERFIX + key]) {
	                delete this[this._DEF_PERFIX + key];
	                this._length--;
	                return true;
	            }
	            return false;
	        },
	        getKeySet: function () {
	            var retArr = [];
	            for (var key in this) {
	                if (key.length > this._DEF_PERFIX.length && key.indexOf(this._DEF_PERFIX) == 0) {
	                    retArr.push(key.substr(this._DEF_PERFIX.length));
	                }
	            }
	            return retArr;
	        }
	    };

	    String.prototype.format = function () {
	        var args = arguments;
	        var bool = $.isArray(args[0]);
	        return this.replace(/\{(\d+)\}/g, function (m, n) {
	            return bool ? args[0][n] : args[n];
	        });
	    };

	    Object.equals = function (x, y) {
	        // If both x and y are null or undefined and exactly the same
	        if (x === y) {
	            return true;
	        }
	        // If they are not strictly equal, they both need to be Objects
	        if (!(x instanceof Object) || !(y instanceof Object)) {
	            return false;
	        }
	        // They must have the exact same prototype chain, the closest we can do is
	        // test the constructor.
	        if (x.constructor !== y.constructor) {
	            return false;
	        }
	        for (var p in x) {
	            // Inherited properties were tested using x.constructor === y.constructor
	            if (x.hasOwnProperty(p)) {
	                // Allows comparing x[ p ] and y[ p ] when set to undefined
	                if (!y.hasOwnProperty(p)) {
	                    return false;
	                }
	                // If they have the same strict value or identity then they are equal
	                if (x[p] === y[p]) {
	                    continue;
	                }
	                // Numbers, Strings, Functions, Booleans must be strictly equal
	                if (typeof (x[p]) !== "object") {
	                    return false;
	                }
	                // Objects and Arrays must be tested recursively
	                if (!Object.equals(x[p], y[p])) {
	                    return false;
	                }
	            }
	        }
	        for (p in y) {
	            // allows x[ p ] to be set to undefined
	            if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) {
	                return false;
	            }
	        }
	        return true;
	    };

	    AUI.namespace = function () {
	        var arg = arguments, o = null, i, j, d;
	        for (i = 0; i < arg.length; i = i + 1) {
	            d = arg[i].split(".");
	            o = window.AUI;
	            for (j = (d[0] == "AUI") ? 1 : 0; j < d.length; j = j + 1) {
	                o[d[j]] = o[d[j]] || {};
	                o = o[d[j]];
	            }
	        }
	        return o;
	    };
	    namespaceFormatString = function (namespace) {
	        var nm;
	        if (namespace.split(".")[0] == "AUI") {
	            nm = namespace.replace(/\./g, "_");
	        } else {
	            nm = "AUI" + namespace.replace(/\./g, "_");
	        }
	        return nm;
	    };

	    //国际化
	    I18N = window.I18N || {
	        /**
			 *
			 * @method I18N.get(namespace, key, args)
			 * @param  namespace (string)
			 * @param key (string)
			 * @param args (string)
			 *
			 */
	        get: function () {
	            var
				//
				args = arguments,
				//
				val = __I18NMap__.get(namespaceFormatString(args[0]) + args[1]);
	            if (val == undefined) {
	                val = __DefaultI18NMap__.get(namespaceFormatString(args[0]) + args[1]);
	            }
	            return val == undefined ? "" : val.format(Array.prototype.slice.call(args, 2));
	        }
	    };

	    window.__DefaultI18NMap__ = window.__DefaultI18NMap__ || new Map();

	    window.__I18NMap__ = window.__I18NMap__ || new Map();
	    getDefaultLanguage = function (namespace, url) {
	        $.ajax({
	            url: $$.path + url + ".js",
	            success: function (requestText) {
	                var nm = namespaceFormatString(namespace);
	                if (typeof requestText == "object") {
	                    for (var key in requestText) {
	                        __DefaultI18NMap__.put(nm + key, requestText[key]);
	                    }
	                } else {
	                    if (typeof requestText == "string") {
	                        var o = $.parseJSON(requestText);
	                        for (var key in o) {
	                            __DefaultI18NMap__.put(nm + key, o[key]);
	                        }
	                    }
	                }
	            },
	            error: function (httpRequest, textStatus, errorThrown) {
	                $$.log('Can not loading language: ' + url);
	            },
	            async: false,
	            //contentType:'text/plain;charset=UTF-8',
	            contentType: 'application/json;charset=UTF-8',
	            dataType: "json"
	        });
	    };
	    /**
		 * 注册关导入相关的资源文件, url相对路径
		 * @method I18N.register(namespace, url)
		 * @param  namespace (string)
		 * @param  url (string)
		 *
		 */
	    I18N.register = function (namespace, url, lang) {
	        AUI.namespace(namespace);
	        getDefaultLanguage(namespace, url);
	        var lang = lang || navigator.language || navigator.userLanguage;

	        var newurl = $$.path + url + ((lang == null) ? "" : ("." + lang)) + ".js";

	        $.ajax({
	            url: newurl,
	            success: function (requestText) {
	                var nm = namespaceFormatString(namespace);
	                if (typeof requestText == "object") {
	                    for (var key in requestText) {
	                        __I18NMap__.put(nm + key, requestText[key]);
	                    }
	                } else {
	                    if (typeof requestText == "string") {
	                        var o = $.parseJSON(requestText);
	                        for (var key in o) {
	                            __I18NMap__.put(nm + key, o[key]);
	                        }
	                    }
	                }
	            },
	            error: function (httpRequest, textStatus, errorThrown) {
	                $$.log('Can not loading language: ' + newurl);
	            },
	            async: false,
	            //contentType:'text/plain;charset=UTF-8',
	            contentType: 'application/json;charset=UTF-8',
	            dataType: "json"
	        });
	    };

	    window.I18N = I18N;

	    //window.Module = Module;

	    window.$$ = window.AUI = AUI;

	    //控件使用的词条
	    AUI.I18N = {
	        calendar: {
	            //选中的时间小于当前时间
	            earlierTime: "Invalid time,The selected time cannot be earlier than current time.",
	            today: "Today",
	        },
	        captcha: {
	            emptyMessage: '!Please enter verification code',
	            errorMessage: '!Verification code error'
	        },
	        combobox: {
	            //水印对应的词条
	            waterMark: "Select one",
	            //过滤结果为空时的词条
	            noMatches: "No matches found."
	        },
	        datagrid: {
	            //过滤功能，清楚过滤对应的词条
	            clearFiltersFrom: "Clear Filters from ",
	            //过滤功能，Cancel按钮对应的词条
	            filterCancel: "Cancel",
	            //过滤功能，OK按钮对应的词条
	            filterOK: "OK",
	            //隐藏列对应的词条
	            hideColumn: "Hide This Column",
	            noneMessage: "There are no items to show in this view.",
	            //过滤功能Select All复选框对应的词条
	            selectAllforFilter: "Select All",
	            //字符类型的数据排序时，使用的提示语（升序）
	            sortAToZ: "Sort A to Z",
	            //字符类型的数据排序时，使用的提示语（降序）
	            sortZToA: "Sort Z to A",
	            //Date类型的数据排序时，使用的提示语（升序）
	            oldToNew: "Sort Oldest to Newest",
	            //Date类型的数据排序时，使用的提示语（降序）
	            newToOld: "Sort Newest to Ordest",
	            //数字类型的数据排序时，使用的提示语（升序）
	            ascending: "Ascending",
	            //数字类型的数据排序时，使用的提示语（降序）
	            descending: "Descending"
	        },
	        datepicker: {
	            //选中的时间小于当前时间
	            earlierTime: "Invalid time,The selected time cannot be earlier than current time.",
	            today: "Today",
	            timeZone: "Time Zone:",
	            savingTime: "Automatically adjust clock for daylight saving time",
	            ok: "OK",
	            cancel: "Cancel"
	        },
	        multicombobox: {
	            //全选时显示的词条
	            allText: "Select All",
	            //
	            none: "None",
	            selectedXItems: "Select {0} items",
	            selectedXItem: "Select {0} item",

	            //全选checkbox对应的词条
	            selectAllCheckbox: "All",
	            noneTitle: "None",
	            allTitle: "All",
	            selectedXItemsTitle: "{0} items",
	            ok: "OK",
	            cancel: "Cancel"
	        },
	        pager: {
	            page: "Page:",
	            of: "of "
	        },
	        peoplepicker: {
	            //Showing {0} results
	            results: "Showing {0} results",
	            //Showing {0} result
	            result: " Showing {0} result",
	            //搜索结果为空时显示的词条
	            noResults: "No results found"
	        },
	        globalcalendar: {
	            toPreviousMonth: "Go to previous month",
	            toNextMonth: "Go to next month"
	        },
	        gcalendar: {
	            //采用12小时制时，上午的缩写
	            am: "AM",
	            //采用12小时制时，下午的缩写
	            pm: "PM",
	            //月份全称
	            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	            //
	            previous: "Prev",
	            //
	            next: "Next",
	            //月份简写（大写） 
	            shortCapitalMonths: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],
	            //月份简写
	            shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	            //星期全称
	            weeks: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	            //星期简写
	            middleweeks: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	            //星期简写
	            shortweeks: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	            //标题格式
	            titleFormat: "m/, /yyyy"
	        },
	        loading: {
	            loading: "Loading..."
	        },
	        rangepicker: {
	            earlierStartTime: "The start time must be later than the current time.",
	            earlierEndTime: "The end time must be later than the current time.",
	            earlierStart: "The end time must be later than the start time.",
	            incompleteTime: "Enter the module duration to proceed."
	        },
	        reservation: {
	            shortweeks: ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'],
	            //没有被展开的记录,使用的提示语
	            xMore: "{0} more",
	            //关闭多余记录，使用的提示语
	            showless: "show less",
	            //add按钮使用的提示语
	            add: "Add"
	        },
	        timezones: [{
	            id: "Asia/Hong_Kong",
	            displayName: "(UTC+08:00)Beijing,Chongqing,Hong Kong",
	            zone: "(UTC+08:00)",
	            supportsDaylightSavingTime: false,
	            autoAdjustClock: false
	        }, {
	            id: "Asia/Tokyo",
	            displayName: "(UTC+09:00)Japan",
	            zone: "(UTC+09:00)",
	            supportsDaylightSavingTime: true,
	            autoAdjustClock: true
	        }, {
	            id: "Asia/Samon",
	            displayName: "(UTC+11:00)Samon",
	            zone: "(UTC+11:00)",
	            supportsDaylightSavingTime: true,
	            autoAdjustClock: false
	        }]
	    };

	    //由于如果引入jquery.ui了文件，并且removeClass的参数为空，则会先走jquery.ui文件的removeClass函数，无法正常移除所有的样式，故添加此方法覆盖原函数
	    $.fn.extend({
	        _removeClassExtend: jQuery.fn._removeClass === undefined ? jQuery.fn.removeClass : jQuery.fn._removeClass,
	        removeClass: function (classNames, speed, easing, callback) {
	            //jQuery.effects为jquery.ui里的函数，有可能没有引入该文件，所以需要先判断
	            if (speed && jQuery.effects) {
	                return $.effects.animateClass.call(this, {
	                    remove: classNames
	                }, speed, easing, callback);
	            } else {
	                //当classNames为空时，则会调用jquery文件的removeclass函数，参数为空
	                if (classNames) {
	                    return this._removeClassExtend(classNames);
	                } else {
	                    return this._removeClassExtend();
	                }
	            }
	        }
	    });
	})(window, jQuery);

	//tabbable
	+function ($$, $) {
	    "use strict";

	    var _cycle = {
	        tab: 0,
	        arrow: 1,
	        tabAndArrow: 2
	    };

	    $$.tabbable = function (type) {
	        var value = null;
	        type = type.toLowerCase();
	        if (type == "cycle") {
	            value = $.extend(true, value, _cycle);
	        }
	        return value;
	    };

	    $.widget("aui.tabbable", {
	        options: {
	            mode: null
	        },
	        _tabbableIndex: null,
	        _create: function () {
	            this._initMembers()
	                ._initEvent();
	        },
	        //初始化成员
	        _initMembers: function () {
	            var self = this;

	            if (self.options.mode == null) {
	                self.options.mode = _cycle.tab;
	            }

	            this._tabbableIndex = -1;

	            return this;
	        },
	        //注册事件
	        _initEvent: function () {
	            var self = this;

	            self.element.on('keydown' + self.eventNamespace, self, self._onKeydown);

	            return self;
	        },
	        //tab切换断言
	        _tabAssert: function (key) {
	            return (key == $.ui.keyCode.TAB);
	        },
	        //tab和箭头切换断言
	        _tabAndArrowAssert: function (key) {
	            return (key == $.ui.keyCode.TAB || key == $.ui.keyCode.DOWN || key == $.ui.keyCode.UP);
	        },
	        //箭头切换断言
	        _arrowAssert: function (key) {
	            return (key == $.ui.keyCode.DOWN || key == $.ui.keyCode.UP);
	        },
	        _getAssert: function () {
	            var
	                self = this,
	                assert,
	                type = self.options.mode;

	            switch (type) {
	                case _cycle.tab:
	                    assert = self._tabAssert;
	                    break;
	                case _cycle.arrow:
	                    assert = self._arrowAssert;
	                    break;
	                case _cycle.tabAndArrow:
	                    assert = self._tabAndArrowAssert;
	                    break;
	                default:
	                    assert = $.noop;
	                    break;
	            }

	            return assert;
	        },
	        //在键盘按下时处理焦点切换逻辑
	        _onKeydown: function (e) {
	            var
	                self = e.data,
	                assert = self._getAssert(),

	                tabbables = $(":tabbable", self.element),
	                //
	                first = tabbables.filter(":first"),
	                //
	                last = tabbables.filter(":last");

	            if (assert(e.which)) {
	                if (e.which == $.ui.keyCode.DOWN) {
	                    //点击下箭头的处理逻辑。
	                    self._tabbableIndex++;
	                    if (self._tabbableIndex == tabbables.length) {
	                        self._tabbableIndex = 0;
	                    }
	                    tabbables[self._tabbableIndex].focus();
	                    return false;
	                } else if (e.which == $.ui.keyCode.UP) {
	                    //点击上箭头的处理逻辑
	                    self._tabbableIndex--;
	                    if (self._tabbableIndex == -1) {
	                        self._tabbableIndex = tabbables.length - 1;
	                    }
	                    tabbables[self._tabbableIndex].focus();
	                    return false;
	                } else {
	                    //点击Tab键的处理逻辑
	                    if (!e.shiftKey) {
	                        self._tabbableIndex++;
	                        if (e.target === last[0]) {
	                            self._tabbableIndex = 0;
	                            first.focus(1);
	                            return false;
	                        }
	                    } else {
	                        self._tabbableIndex--;
	                        if (e.target === first[0]) {
	                            last.focus(1);
	                            self._tabbableIndex = tabbables.length - 1;
	                            return false;
	                        }
	                    }
	                }
	            } else if (e.which == $.ui.keyCode.TAB) {
	                //arrow模式下禁用tab切换
	                e.preventDefault();
	            }
	        },
	        _destroy: function () {
	            this.element.off(self.eventNamespace);
	        }
	    });
	}(AUI, jQuery);

	/*!
	* jQuery resize event - v1.1 - 3/14/2010
	* http://benalman.com/projects/jquery-resize-plugin/
	*
	* Copyright (c) 2010 "Cowboy" Ben Alman
	* Dual licensed under the MIT and GPL licenses.
	* http://benalman.com/about/license/
	*/

	// Script: jQuery resize event
	//
	// *Version: 1.1, Last updated: 3/14/2010*
	//
	// Project Home - http://benalman.com/projects/jquery-resize-plugin/
	// GitHub       - http://github.com/cowboy/jquery-resize/
	// Source       - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.js
	// (Minified)   - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.min.js (1.0kb)
	//
	// About: License
	//
	// Copyright (c) 2010 "Cowboy" Ben Alman,
	// Dual licensed under the MIT and GPL licenses.
	// http://benalman.com/about/license/
	//
	// About: Examples
	//
	// This working example, complete with fully commented code, illustrates a few
	// ways in which this plugin can be used.
	//
	// resize event - http://benalman.com/code/projects/jquery-resize/examples/resize/
	//
	// About: Support and Testing
	//
	// Information about what version or versions of jQuery this plugin has been
	// tested with, what browsers it has been tested in, and where the unit tests
	// reside (so you can test it yourself).
	//
	// jQuery Versions - 1.3.2, 1.4.1, 1.4.2
	// Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome, Opera 9.6-10.1.
	// Unit Tests      - http://benalman.com/code/projects/jquery-resize/unit/
	//
	// About: Release History
	//
	// 1.1 - (3/14/2010) Fixed a minor bug that was causing the event to trigger
	//       immediately after bind in some circumstances. Also changed $.fn.data
	//       to $.data to improve performance.
	// 1.0 - (2/10/2010) Initial release

	(function ($, window, undefined) {
	    '$:nomunge';// Used by YUI compressor.

	    // A jQuery object containing all non-window elements to which the resize
	    // event is bound.
	    var elems = $([]),

		// Extend $.resize if it already exists, otherwise create it.
		jq_resize = $.resize = $.extend($.resize, {}), timeout_id,

		// Reused strings.
		str_setTimeout = 'setTimeout', str_resize = 'resize', str_data = str_resize + '-special-event', str_delay = 'delay', str_throttle = 'throttleWindow';

	    // Property: jQuery.resize.delay
	    //
	    // The numeric interval (in milliseconds) at which the resize event polling
	    // loop executes. Defaults to 250.

	    jq_resize[str_delay] = 250;

	    // Property: jQuery.resize.throttleWindow
	    //
	    // Throttle the native window object resize event to fire no more than once
	    // every <jQuery.resize.delay> milliseconds. Defaults to true.
	    //
	    // Because the window object has its own resize event, it doesn't need to be
	    // provided by this plugin, and its execution can be left entirely up to the
	    // browser. However, since certain browsers fire the resize event continuously
	    // while others do not, enabling this will throttle the window resize event,
	    // making event behavior consistent across all elements in all browsers.
	    //
	    // While setting this property to false will disable window object resize
	    // event throttling, please note that this property must be changed before any
	    // window object resize event callbacks are bound.

	    jq_resize[str_throttle] = false;

	    // Event: resize event
	    //
	    // Fired when an element's width or height changes. Because browsers only
	    // provide this event for the window element, for other elements a polling
	    // loop is initialized, running every <jQuery.resize.delay> milliseconds
	    // to see if elements' dimensions have changed. You may bind with either
	    // .resize( fn ) or .bind( "resize", fn ), and unbind with .unbind( "resize" ).
	    //
	    // Usage:
	    //
	    // > jQuery('selector').bind( 'resize', function(e) {
	    // >   // element's width or height has changed!
	    // >   ...
	    // > });
	    //
	    // Additional Notes:
	    //
	    // * The polling loop is not created until at least one callback is actually
	    //   bound to the 'resize' event, and this single polling loop is shared
	    //   across all elements.
	    //
	    // Double firing issue in jQuery 1.3.2:
	    //
	    // While this plugin works in jQuery 1.3.2, if an element's event callbacks
	    // are manually triggered via .trigger( 'resize' ) or .resize() those
	    // callbacks may double-fire, due to limitations in the jQuery 1.3.2 special
	    // events system. This is not an issue when using jQuery 1.4+.
	    //
	    // > // While this works in jQuery 1.4+
	    // > $(elem).css({ width: new_w, height: new_h }).resize();
	    // >
	    // > // In jQuery 1.3.2, you need to do this:
	    // > var elem = $(elem);
	    // > elem.css({ width: new_w, height: new_h });
	    // > elem.data( 'resize-special-event', { width: elem.width(), height: elem.height() } );
	    // > elem.resize();

	    $.event.special[str_resize] = {

	        // Called only when the first 'resize' event callback is bound per element.
	        setup: function () {
	            // Since window has its own native 'resize' event, return false so that
	            // jQuery will bind the event using DOM methods. Since only 'window'
	            // objects have a .setTimeout method, this should be a sufficient test.
	            // Unless, of course, we're throttling the 'resize' event for window.
	            if (!jq_resize[str_throttle] && this[str_setTimeout]) {
	                return false;
	            }

	            var elem = $(this);

	            // Add this element to the list of internal elements to monitor.
	            elems = elems.add(elem);

	            // Initialize data store on the element.
	            $.data(this, str_data, {
	                w: elem.width(),
	                h: elem.height()
	            });

	            // If this is the first element added, start the polling loop.
	            if (elems.length === 1) {
	                loopy();
	            }
	        },
	        // Called only when the last 'resize' event callback is unbound per element.
	        teardown: function () {
	            // Since window has its own native 'resize' event, return false so that
	            // jQuery will unbind the event using DOM methods. Since only 'window'
	            // objects have a .setTimeout method, this should be a sufficient test.
	            // Unless, of course, we're throttling the 'resize' event for window.
	            if (!jq_resize[str_throttle] && this[str_setTimeout]) {
	                return false;
	            }

	            var elem = $(this);

	            // Remove this element from the list of internal elements to monitor.
	            elems = elems.not(elem);

	            // Remove any data stored on the element.
	            elem.removeData(str_data);

	            // If this is the last element removed, stop the polling loop.
	            if (!elems.length) {
	                clearTimeout(timeout_id);
	            }
	        },
	        // Called every time a 'resize' event callback is bound per element (new in
	        // jQuery 1.4).
	        add: function (handleObj) {
	            // Since window has its own native 'resize' event, return false so that
	            // jQuery doesn't modify the event object. Unless, of course, we're
	            // throttling the 'resize' event for window.
	            if (!jq_resize[str_throttle] && this[str_setTimeout]) {
	                return false;
	            }

	            var old_handler;

	            // The new_handler function is executed every time the event is triggered.
	            // This is used to update the internal element data store with the width
	            // and height when the event is triggered manually, to avoid double-firing
	            // of the event callback. See the "Double firing issue in jQuery 1.3.2"
	            // comments above for more information.

	            function new_handler(e, w, h) {
	                var elem = $(this), data = $.data(this, str_data);

	                // If called from the polling loop, w and h will be passed in as
	                // arguments. If called manually, via .trigger( 'resize' ) or .resize(),
	                // those values will need to be computed.
	                data.w = w !== undefined ? w : elem.width();
	                data.h = h !== undefined ? h : elem.height();

	                old_handler.apply(this, arguments);
	            };

	            // This may seem a little complicated, but it normalizes the special event
	            // .add method between jQuery 1.4/1.4.1 and 1.4.2+
	            if ($.isFunction(handleObj)) {
	                // 1.4, 1.4.1
	                old_handler = handleObj;
	                return new_handler;
	            } else {
	                // 1.4.2+
	                old_handler = handleObj.handler;
	                handleObj.handler = new_handler;
	            }
	        }
	    };

	    function loopy() {

	        // Start the polling loop, asynchronously.
	        timeout_id = window[str_setTimeout](function () {

	            // Iterate over all elements to which the 'resize' event is bound.
	            elems.each(function () {
	                var elem = $(this), width = elem.width(), height = elem.height(), data = $.data(this, str_data);

	                // If element size has changed since the last time, update the element
	                // data store and trigger the 'resize' event.
	                if (width !== data.w || height !== data.h) {
	                    elem.trigger(str_resize, [data.w = width, data.h = height]);
	                }

	            });
	            // Loop.
	            loopy();

	        }, jq_resize[str_delay]);

	    };

	})(jQuery, window);



/***/ },
/* 3 */
/***/ function(module, exports) {

	(function ($) {
	    

	    $.widget('aui.focusloop', {
	        options: {
	            
	        },

	        _create: function () {
	            this.element
	                .off('keydown' + this.eventNamespace)
	                .on('keydown' + this.eventNamespace, this.element, function (e) {
	                    if (e.keyCode === af.Utils.KeyCode.TAB) {
	                        var tabbables = $(":tabbable", e.data),
	                            first = tabbables.filter(":first"),
	                            last = tabbables.filter(":last");

	                        if (e.target === last[0] && !e.shiftKey) {
	                            first.focus(1);

	                            af.Utils.preventDefault(e);
	                        } else if (e.target === first[0] && e.shiftKey) {
	                            last.focus(1);

	                            af.Utils.preventDefault(e);
	                        }
	                    }
	                });
	        }
	    });
	}(jQuery));

/***/ },
/* 4 */
/***/ function(module, exports) {

	(function ($) {
	    

	    $.widget('aui.scrollable', {
	        options: {
	            scrollOffsetValue: 100
	        },

	        _create: function () {
	            var _self = this,
	                _el = _self.element;

	            _el.on('mousewheel' + _self.eventNamespace, _self, function (e) {
	                if (e.deltaY > 0) {
	                    e.data._scrollTop();
	                }
	                else if (e.deltaY < 0) {
	                    e.data._scrollBottom();
	                }
	            });
	        },
	        _scrollTop: function () {
	            this.element[0].scrollTop -= 100;
	        },
	        _scrollBottom: function () {
	            this.element[0].scrollTop += 100;
	        }
	    });
	}(jQuery));

	(function ($) {

	    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
	        toBind = ('onwheel' in document || document.documentMode >= 9) ?
	                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
	        slice = Array.prototype.slice,
	        nullLowestDeltaTimeout, lowestDelta;

	    if ($.event.fixHooks) {
	        for (var i = toFix.length; i;) {
	            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
	        }
	    }

	    var special = $.event.special.mousewheel = {
	        version: '3.1.12',

	        setup: function () {
	            if (this.addEventListener) {
	                for (var i = toBind.length; i;) {
	                    this.addEventListener(toBind[--i], handler, false);
	                }
	            } else {
	                this.onmousewheel = handler;
	            }
	            // Store the line height and page height for this particular element
	            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
	            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
	        },

	        teardown: function () {
	            if (this.removeEventListener) {
	                for (var i = toBind.length; i;) {
	                    this.removeEventListener(toBind[--i], handler, false);
	                }
	            } else {
	                this.onmousewheel = null;
	            }
	            // Clean up the data we added to the element
	            $.removeData(this, 'mousewheel-line-height');
	            $.removeData(this, 'mousewheel-page-height');
	        },

	        getLineHeight: function (elem) {
	            var $elem = $(elem),
	                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
	            if (!$parent.length) {
	                $parent = $('body');
	            }
	            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
	        },

	        getPageHeight: function (elem) {
	            return $(elem).height();
	        },

	        settings: {
	            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
	            normalizeOffset: true  // calls getBoundingClientRect for each event
	        }
	    };

	    $.fn.extend({
	        mousewheel: function (fn) {
	            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
	        },

	        unmousewheel: function (fn) {
	            return this.unbind('mousewheel', fn);
	        }
	    });


	    function handler(event) {
	        var orgEvent = event || window.event,
	            args = slice.call(arguments, 1),
	            delta = 0,
	            deltaX = 0,
	            deltaY = 0,
	            absDelta = 0,
	            offsetX = 0,
	            offsetY = 0;
	        event = $.event.fix(orgEvent);
	        event.type = 'mousewheel';

	        // Old school scrollwheel delta
	        if ('detail' in orgEvent) { deltaY = orgEvent.detail * -1; }
	        if ('wheelDelta' in orgEvent) { deltaY = orgEvent.wheelDelta; }
	        if ('wheelDeltaY' in orgEvent) { deltaY = orgEvent.wheelDeltaY; }
	        if ('wheelDeltaX' in orgEvent) { deltaX = orgEvent.wheelDeltaX * -1; }

	        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
	        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
	            deltaX = deltaY * -1;
	            deltaY = 0;
	        }

	        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
	        delta = deltaY === 0 ? deltaX : deltaY;

	        // New school wheel delta (wheel event)
	        if ('deltaY' in orgEvent) {
	            deltaY = orgEvent.deltaY * -1;
	            delta = deltaY;
	        }
	        if ('deltaX' in orgEvent) {
	            deltaX = orgEvent.deltaX;
	            if (deltaY === 0) { delta = deltaX * -1; }
	        }

	        // No change actually happened, no reason to go any further
	        if (deltaY === 0 && deltaX === 0) { return; }

	        // Need to convert lines and pages to pixels if we aren't already in pixels
	        // There are three delta modes:
	        //   * deltaMode 0 is by pixels, nothing to do
	        //   * deltaMode 1 is by lines
	        //   * deltaMode 2 is by pages
	        if (orgEvent.deltaMode === 1) {
	            var lineHeight = $.data(this, 'mousewheel-line-height');
	            delta *= lineHeight;
	            deltaY *= lineHeight;
	            deltaX *= lineHeight;
	        } else if (orgEvent.deltaMode === 2) {
	            var pageHeight = $.data(this, 'mousewheel-page-height');
	            delta *= pageHeight;
	            deltaY *= pageHeight;
	            deltaX *= pageHeight;
	        }

	        // Store lowest absolute delta to normalize the delta values
	        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

	        if (!lowestDelta || absDelta < lowestDelta) {
	            lowestDelta = absDelta;

	            // Adjust older deltas if necessary
	            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
	                lowestDelta /= 40;
	            }
	        }

	        // Adjust older deltas if necessary
	        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
	            // Divide all the things by 40!
	            delta /= 40;
	            deltaX /= 40;
	            deltaY /= 40;
	        }

	        // Get a whole, normalized value for the deltas
	        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
	        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
	        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

	        // Normalise offsetX and offsetY properties
	        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
	            var boundingRect = this.getBoundingClientRect();
	            offsetX = event.clientX - boundingRect.left;
	            offsetY = event.clientY - boundingRect.top;
	        }

	        // Add information to the event object
	        event.deltaX = deltaX;
	        event.deltaY = deltaY;
	        event.deltaFactor = lowestDelta;
	        event.offsetX = offsetX;
	        event.offsetY = offsetY;
	        // Go ahead and set deltaMode to 0 since we converted to pixels
	        // Although this is a little odd since we overwrite the deltaX/Y
	        // properties with normalized deltas.
	        event.deltaMode = 0;

	        // Add event and delta to the front of the arguments
	        args.unshift(event, delta, deltaX, deltaY);

	        // Clearout lowestDelta after sometime to better
	        // handle multiple device types that give different
	        // a different lowestDelta
	        // Ex: trackpad = 3 and mouse wheel = 120
	        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
	        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

	        return ($.event.dispatch || $.event.handle).apply(this, args);
	    }

	    function nullLowestDelta() {
	        lowestDelta = null;
	    }

	    function shouldAdjustOldDeltas(orgEvent, absDelta) {
	        // If this is an older event and the delta is divisable by 120,
	        // then we are assuming that the browser is treating this as an
	        // older mouse wheel event and that we should divide the deltas
	        // by 40 to try and get a more usable deltaFactor.
	        // Side note, this actually impacts the reported scroll distance
	        // in older browsers and can cause scrolling to be slower than native.
	        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
	        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
	    }

	}(jQuery));


/***/ },
/* 5 */
/***/ function(module, exports) {

	(function ($) {
	    

	    $.widget('aui.scrolless', {
	        options: {

	        },

	        _create: function () {
	            var _self = this,
	                _el = _self.element;

	            _el.on('mousewheel' + _self.eventNamespace + ' DOMMouseScroll' + _self.eventNamespace, function (e) {
	                af.Utils.preventDefault(e);
	            });
	        }
	    });
	}(jQuery));

/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * 移动到使用的触屏事件触屏事件
	 * 
	 */
	(function ($) {
	    "use strict"
	    var
	        num = function (value) {
	            return parseInt(value, 10) || 0;
	        }
	    //使用手势拖拽元素
	    $.widget("aui.touchdrag", {
	        //拖拽起始点的坐标
	        _start: null,
	        //拖拽元素的z-index，默认值0
	        _zIndex: "auto",
	        //拖拽元素的范围
	        _containment: null,
	        //元素的外边距
	        _margins: null,
	        //元素的宽高
	        _outer: null,
	        _isMove: false,
	        _isEnabled: true,
	        options: {
	            start: $.noop,
	            move: $.noop,
	            stop: $.noop,
	            containment: false,
	            //拖拽元素在拖拽时的z-index，默认值false，表示拖拽时不改变拖拽元素的z-index
	            zIndex: false
	        },
	        _create: function () {
	            this._initMembers()
	                ._loaded();
	        },
	        _initMembers: function () {
	            var
	                self = this,
	                ele = self.element;

	            self._start = {};
	            self._zIndex = self.element.css("zIndex");
	            self._max = Math.max;

	            self._margins = {
	                left: num(ele.css("marginLeft")),
	                top: num(ele.css("marginTop")),
	                right: num(ele.css("marginRight")),
	                bottom: num(ele.css("marginBottom"))
	            };

	            self._outer = {
	                width: ele.outerWidth(),
	                height: ele.outerHeight()
	            }

	            return self;
	        },
	        _loaded: function () {
	            var
	                self = this,
	                ns = self.eventNamespace;

	            self.element
	                .on("touchstart" + ns, self, self._onTouchStart)
	                .on("touchmove" + ns, self, self._onTouchMove)
	                .on("touchend" + ns, self, self._touchEnd);

	            return self;
	        },
	        _trigger: function (type, event, ui) {
	            var self = this;

	            //调用使用on注册的事件
	            self.element.trigger(type, ui);

	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(this, type, event, ui);
	        },
	        _onTouchStart: function (e) {
	            e.stopPropagation();
	            var
	                self = e.data,
	                event = e.originalEvent,
	                //第一个手指
	                touch = event.targetTouches[0],
	                current = event.currentTarget;

	            self._setContainment(current);
	            if (event.isTrusted && self._isEnabled) {
	                self._isTouchStart = true;
	                //记录开始位置
	                self._start = {
	                    x: touch.pageX,
	                    y: touch.pageY
	                };

	                self._offset = {
	                    //需要减掉margin
	                    left: current.offsetLeft,
	                    top: current.offsetTop,
	                    click: { //Where the click happened, relative to the element
	                        left: touch.pageX - self.element.offset().left,
	                        top: touch.pageY - self.element.offset().top
	                    },
	                };
	                self._ui = {
	                    helper: self.element,
	                    offset: self._offset,
	                    position: {},
	                }
	                //最近的祖先定位元素,定位元素指的是元素的 CSS position 属性被设置为 relative、absolute 或 fixed 的元素
	                self._trigger("start", e, self._ui);
	            } else {
	                self._isTouchStart = false;
	            }
	        },

	        _onTouchMove: function (e) {
	            e.stopPropagation();
	            e.preventDefault();
	            var
	                 self = e.data,
	                 original = e.originalEvent,
	                 touch = original.targetTouches[0],
	                 target = original.currentTarget,
	                 parent = self._parent,
	                 x,
	                 offset = self._parent.offset(),
	                 boundary = [],
	                 pageX = 0,
	                 pageY = 0,
	                 y;
	            if (self._isTouchStart) {
	                self._isMove = true;

	                boundary[0] = num(parent.css("borderLeftWidth")) + num(parent.css("paddingLeft")) + offset.left;
	                boundary[1] = num(parent.css("borderTopWidth")) + num(parent.css("paddingTop")) + offset.top;
	                boundary[2] = parent[0].offsetWidth - target.offsetWidth - num(parent.css("borderLeftWidth")) - num(parent.css("paddingRight")) + offset.left;
	                boundary[3] = parent[0].offsetHeight - target.offsetHeight - num(parent.css("borderTopWidth")) - num(parent.css("paddingBottom")) + offset.top;

	                pageX = touch.pageX;
	                if (touch.pageX - self._ui.offset.click.left < boundary[0]) {
	                    pageX = boundary[0] + self._ui.offset.click.left;
	                }
	                if (touch.pageX - self._ui.offset.click.left > boundary[2]) {
	                    pageX = boundary[2] + self._ui.offset.click.left;
	                }

	                pageY = touch.pageY;
	                if (touch.pageY - self._ui.offset.click.top < boundary[1]) {
	                    pageY = boundary[1] + self._ui.offset.click.top;
	                }
	                if (touch.pageY - self._ui.offset.click.top > boundary[3]) {
	                    pageY = boundary[3] + self._ui.offset.click.top;
	                }

	                if (original.isTrusted) {
	                    x = pageX - self._start.x + self._ui.offset.left;
	                    y = pageY - self._start.y + self._ui.offset.top;
	                }
	                self._ui.helper
	                    .css("left", x)
	                    .css("top", y);
	                if (self.options.zIndex !== false) {
	                    self._ui.helper.css("zIndex", self.options.zIndex);
	                }

	                self._ui.position.left = x;
	                self._ui.position.top = y;

	                self._trigger("move", e, self._ui);
	            }
	        },
	        _touchEnd: function (e) {
	            var self = e.data, ui;
	            e.stopPropagation();

	            if (self._isTouchStart) {
	                if (self.options.zIndex !== false) {
	                    self._ui.helper.css("zIndex", self._zIndex);
	                }

	                if (self._isMove == true) {
	                    self._trigger("stop", e, self._ui);
	                    self._isMove = false;
	                }
	            }
	        },
	        _setContainment: function (current) {
	            var
	                self = this,
	                parent = self.options.containment,
	                ce = null,
	                offset = null,
	                isHidden = false;

	            parent == 'parent' && (parent = $(current.offsetParent));

	            self._parent = self.element.parent();
	        },
	        enable: function () {
	            this._isEnabled = true;
	        },
	        disable: function () {
	            this._isEnabled = false;
	        }
	    });
	})(jQuery);

/***/ },
/* 7 */
/***/ function(module, exports) {

	(function ($) {

	    $.widget("aui.tabbase", {
	        options: {

	        },
	        selectPrev: function () {
	            var prev = this._getPrevLi(this._currentSelectedItem);
	            this._changeSelectedItem(prev);
	        },
	        selectNext: function () {
	            var next = this._getNextLi(this._currentSelectedItem);
	            this._changeSelectedItem(next);
	        },
	        selectFirst: function () {
	            this._changeSelectedItem(this._firstLi[0]);
	        },
	        selectLast: function () {
	            this._changeSelectedItem(this._lastLi[0]);
	        },

	        _create: function () {
	            this._dealWithUl();
	            this._dealWithLi();
	            this._dealWithContent();
	        },
	        _setOption: function (key, value) {
	            var _oldValue = this.options[key],
	                _doIt = this._setExtendOption.apply(this, arguments);

	            if (_doIt) {
	                $.Widget.prototype._setOption.apply(this, arguments);
	                this._optionChanged(key, { element: this.element, newValue: value, oldValue: _oldValue });
	            }
	        },
	        _dealWithContent: function () {
	            this.element.off('keydown' + this.eventNamespace)
	                .on('keydown' + this.eventNamespace, 'div[role="tabpanel"]', this, function (e) {
	                    switch (e.keyCode) {
	                        case af.Utils.KeyCode.UP:
	                        case af.Utils.KeyCode.LEFT:
	                            if (e.ctrlKey) {
	                                e.preventDefault();

	                                e.data._currentSelectedItem.focus();
	                            }
	                            break;
	                        case af.Utils.KeyCode.PAGE_UP:
	                            if (e.ctrlKey) {
	                                e.preventDefault();

	                                e.data.selectPrev();
	                            }
	                            break;
	                        case af.Utils.KeyCode.PAGE_DOWN:
	                            if (e.ctrlKey) {
	                                e.preventDefault();

	                                e.data.selectNext();
	                            }
	                            break;
	                    }
	                });
	        },
	        _dealWithLi: function () {
	            this._li = this._ul.find('li[aria-controls]');//this._li 是一个集合 this
	            if (this._li.length) {
	                this._currentSelectedItem = this._li.filter('.select:not([aria-controls^="javascript:"])');
	                if (this._currentSelectedItem.length > 1) this._currentSelectedItem = $(this._currentSelectedItem[this._currentSelectedItem.length - 1]);
	                this._currentSelectedContent = $('#' + this._currentSelectedItem.attr('aria-controls')).attr('aria-hidden', 'false');
	                this._firstLi = this._li.filter(':first');
	                this._lastLi = this._li.filter(':last');
	            }
	           
	        },
	        _dealWithUl: function () {
	            var _self = this,
	                _$el = _self.element,
	                _$ul = _self._ul = _$el.children('ul');

	            _$ul.off('click' + _self.eventNamespace)
	                .on('click' + _self.eventNamespace, 'li:not(li:has(ul>li))', _self, function (e) {
	                    if ($(this).attr('aria-selected') === 'true') return;

	                    var _tb = e.data;

	                    _tb._changeSelectedItem(this);
	                })
	                .off('keydown' + _self.eventNamespace)
	                .on('keydown' + _self.eventNamespace, 'li:not(li:has(ul))', _self, function (e) {
	                    switch (e.keyCode) {
	                        case af.Utils.KeyCode.UP:
	                        case af.Utils.KeyCode.LEFT:
	                            e.preventDefault();

	                            e.data.selectPrev();
	                            break;
	                        case af.Utils.KeyCode.DOWN:
	                        case af.Utils.KeyCode.RIGHT:
	                            e.preventDefault();

	                            e.data.selectNext();
	                            break;
	                        case af.Utils.KeyCode.HOME:
	                            e.preventDefault();

	                            e.data.selectFirst();
	                            break;
	                        case af.Utils.KeyCode.END:
	                            e.preventDefault();

	                            e.data.selectLast();
	                            break;
	                    }
	                });
	        },
	        _changeSelectedItem: function (el, old, autoChange) {
	            if (this._currentSelectedItem[0] === el) return;

	            var _oldItem = old ? old : this._currentSelectedItem,
	                _passChange = this._selectedItemChanging(_oldItem, el);

	            if (!_passChange) return;

	            this._unselectItem(_oldItem);
	            this._selectItem(el);

	            if (!autoChange) {
	                this._currentSelectedItem.focus();
	            }

	            this._selectedItemChanged(_oldItem, el);
	        },
	        _selectItem: function (el) {
	            var _$el = (this._currentSelectedItem = $(el).addClass('select')
	                .attr({
	                    'aria-selected': 'true',
	                    'tabindex': 0
	                }));

	            _$el.parent().closest('li').addClass('select')
	                .attr({
	                    'aria-selected': 'true',
	                    'tabindex': 0
	                });

	            this._currentSelectedContent = $('#' + _$el.attr('aria-controls')).show().attr('aria-hidden', 'false');//控制显隐添加属性
	        },
	        _unselectItem: function (el) {
	            if (!el || el.length === 0) return;

	            var _$el = $(el).removeClass('select').attr({
	                'aria-selected': 'false',
	                'tabindex': -1
	            });
	            _$el.parent().closest('li').removeClass('select').attr({
	                'aria-selected': 'false',
	                'tabindex': -1
	            });

	            $('#' + _$el.attr('aria-controls')).hide().attr('aria-hidden', 'true');
	        },
	        _getPrevLi: function (li) {
	            var index = this._li.index(li),
	                prev = this._li[index - 1];
	            if (!prev) {
	                prev = this._lastLi[0];
	            }
	            return prev.getAttribute('aria-controls') ? prev : this._getPrevLi(prev);
	        },
	        _getNextLi: function (li) {
	            var index = this._li.index(li),
	                next = this._li[index + 1];

	            if (!next) {
	                next = this._firstLi[0];
	            }
	            return next.getAttribute('aria-controls') ? next : this._getNextLi(next);

	        },
	        _selectedItemChanging: function (oldItem, newItem) {
	            return true;
	        },
	        _selectedItemChanged: function (oldItem, newItem) {

	        },
	        _setExtendOption: function (key, value) {
	            return true;
	        },
	        _optionChanged: function (key, data) {

	        }
	    });
	}(jQuery));

/***/ },
/* 8 */
/***/ function(module, exports) {

	/*
	 * btnContainer2.0
	 * Based on Jquery,Jquery UI。
	 * @param {Boolean} autoClose 设置listBox内项目点击后是否关闭listBox，默认true。
	 * @param {Boolean} hasBorder 设置容器是否具有边框，可通过重写aui-btnCont-border类来重定义样式，默认true。
	 * @param {Boolean} saveClicked 设置是否记忆点击过的列表项，保留其active样式，默认false。
	 */
	(function ($) {
	    var _constant = {
	        CONTAINER_CLASS: "aui-btn-container",
	        CONTAINER_BORDER_CLASS: "aui-btnCont-border",
	        BTN_MORE_CLASS: "aui-btnCont-more",
	        LIST_CLASS: "aui-btnCont-listBox",
	        HIDDEN_CLASS: "aui-btnCont-hide",
	        RIGHT_ELEMENT_CLASS: "aui-btnCont-right",
	    }
	    $.widget("aui.btnContainer", {
	        $container: null,
	        $btnMore: null,
	        $list: null,
	        $rightElement: null,
	        _hiddenItems: [],
	        options: {
	            autoClose: true,
	            hasBorder: true,
	            saveClicked: false,
	        },
	        _create: function () {
	            this._createContainer();
	            this._initMember();
	            this._initEvent();
	        },
	        _init: function () {
	            this.element.contents().filter(function () { return this.nodeType === 3; }).remove();
	            this._refresh();
	        },
	        _refresh: function () {
	            this._checkOverflow();
	            this._createList();
	        },
	        _initEvent: function () {
	            var self = this;
	            this.$container.children().add(this.$container).resize(function () {
	                if ($(this).is(":visible")) self._refresh();
	            });
	            document.onkeydown = function (event) {
	                self._keyEvent(event);
	            }
	            this._on(this.$btnMore, {
	                "click": function (e) {
	                    var e = e || window.event;
	                    e.cancelBubble = true;
	                    e.stopPropagation();
	                    if (this.$list.is(":visible")) {
	                        this.$list.hide();
	                    } else {
	                        $("." + _constant.LIST_CLASS).hide();
	                        this.setPosition(this.$list, this.$btnMore);
	                        if (!this.options.saveClicked) this.$list.children().removeClass("active");
	                        this.$list.css("visibility", "visible").show();
	                    }
	                }
	            });
	            this._on(this.$list, {
	                "click": function (e) {
	                    var e = e || window.event,
	                        _target = e.target;
	                    while (_target.parentNode != this.$list[0]) {
	                        _target = _target.parentNode;
	                    }
	                    var prevObj = this.$container.children().eq($(_target).attr("data-index"));
	                    if (prevObj.is(':disabled')) return false;
	                    if (prevObj.is(':hidden')) {
	                        prevObj.click();
	                    } else {
	                        console.error("No Element matched!");
	                    }
	                    $(_target).addClass("active").siblings().removeClass("active");
	                    if (this.options.autoClose) {
	                        this.$list.hide();
	                    }
	                    return false;
	                }
	            });
	            this._on($("html"), {
	                "mousedown": function (e) {
	                    var e = e || window.event,
	                        _target = e.target,
	                        $list = $(_target).closest("." + _constant.LIST_CLASS);
	                    e.cancelBubble = true;
	                    e.stopPropagation();
	                    if (!$(_target).hasClass(_constant.BTN_MORE_CLASS) && $list.length == 0) {
	                        $("." + _constant.LIST_CLASS).hide();
	                    }
	                }
	            })
	        },
	        _createContainer: function () {
	            this.element.contents().filter(function () { return this.nodeType === 3; }).remove();
	            this.$btnMore = $("<button></button>").addClass(_constant.BTN_MORE_CLASS).addClass("fi-three-dot-h-a").css("visibility", "hidden");
	            this.$list = $("<div></div>").addClass(_constant.LIST_CLASS).addClass("id" + this.uuid).html("<button>1</button>");
	            this.element.attr("id", "btnContainer" + this.uuid).append(this.$btnMore);
	            if (this.options.hasBorder) this.element.addClass(_constant.CONTAINER_BORDER_CLASS);
	            $("body").append(this.$list);
	        },
	        _initMember: function () {
	            this.$container = $("#btnContainer" + this.uuid);
	            this.$btnMore = this.$container.children("." + _constant.BTN_MORE_CLASS);
	            this.$list = $("." + _constant.LIST_CLASS + ".id" + this.uuid);
	            this.$rightElement = this.$container.children("." + _constant.RIGHT_ELEMENT_CLASS);
	            if (this.$rightElement.length > 0) {
	                this.$btnMore.css("right", parseFloat(this.$container.css("padding-right")) + this.$rightElement.outerWidth(true));
	            }
	            this.$list.css("visibility", "hidden");
	            this.setPosition(this.$list, this.$btnMore);
	        },
	        _checkOverflow: function () {
	            var $btnMore = this.element.children("." + _constant.BTN_MORE_CLASS),
	                _width = $btnMore.outerWidth(true),
	                self = this,
	                element = this.element,
	                items = element.children().not("." + _constant.RIGHT_ELEMENT_CLASS),
	                totalWidth = element.width();
	            element.css("padding-right", $btnMore.outerWidth(true));
	            self._hiddenItems = [];
	            if (this.$rightElement.length > 0) totalWidth -= this.$rightElement.outerWidth(true);
	            items.removeClass(_constant.HIDDEN_CLASS);
	            items.each(function (index, obj) {
	                if (!$(this).hasClass(_constant.BTN_MORE_CLASS) && $(this).is(":visible")) {
	                    _width += $(this).outerWidth(true);
	                    if (_width > totalWidth) {
	                        if ($(this).css("visibility") != "hidden") {
	                            var _clone = $(this).clone().attr("data-index", $(this).index()).removeAttr("onclick ng-click").prop("onclick", null);
	                            self._hiddenItems.push(_clone);
	                        }
	                        $(this).addClass(_constant.HIDDEN_CLASS);
	                    }
	                }
	            });
	        },
	        _createList: function () {
	            if (this._hiddenItems.length == 0) {
	                this.$btnMore.hide();
	            } else {
	                this.$btnMore.css("visibility", "visible").show();
	                var _lists = '';
	                $.each(this._hiddenItems, function (index, obj) {
	                    if (obj.css("visibility") != "hidden") _lists += obj.prop("outerHTML");
	                })
	                this.$list.html(_lists);
	            }
	            this.element[0].style.paddingRight = '';
	        },
	        _keyEvent: function (event) {
	            var listBox = $("." + _constant.LIST_CLASS + ":visible").last(),
	                e = event || window.event;
	            if (listBox.length > 0 && e && $.inArray(e.keyCode, [40, 38, 13]) != -1) {
	                e.preventDefault();
	                if (e.keyCode == 40) {//down
	                    if (listBox.find(".active").length == 0 || listBox.children(".active").next().length == 0) {
	                        _focus(listBox.children(":first"));
	                    } else {
	                        _focus(listBox.children(".active").next());
	                    }
	                } else if (e.keyCode == 38) {//up
	                    if (listBox.find(".active").length == 0 || listBox.children(".active").prev().length == 0) {
	                        _focus(listBox.children(":last"));
	                    } else {
	                        _focus(listBox.children(".active").prev());
	                    }
	                } else if (e.keyCode == 13) {//enter
	                    if (listBox.children(".active").length == 1) {
	                        $(":focus").blur();
	                        listBox.children(".active").click();
	                    }
	                }
	            }
	            function _focus(element) {
	                element.addClass("active").focus().siblings().removeClass("active");
	            }
	        },
	        setPosition: function (element, of) {
	            var of = of || this.$btnMore,
	                _pos = of.offset();
	            element.css({ "left": _pos.left + parseFloat(of.css("padding-left")), "top": _pos.top + of.outerHeight() });
	        }
	    })
	})(jQuery);

/***/ },
/* 9 */
/***/ function(module, exports) {

	(function ($) {

	    var
	        uuid = -1,
	        //常量
	        _constant = {
	            CAPTCHA_CLASS: 'aui-captcha',
	            //
	            CODE_CONTAINER_CLASS: 'aui-captcha-code-container',
	            //
	            CODE_CLASS: 'aui-captcha-code',
	            ITALIC_CLASS: 'aui-captcha-code-italic',
	            WEIGHT_CLASS: 'aui-captcha-code-weight',
	            //
	            BUTTON_CLASS: 'aui-captcha-button',
	            //
	            RIGHT_ICON_CLASS: 'aui-captcha-icon',
	            FINISH_CLASS: 'fi-round-finish-a',
	            MESSAGE_CLASS: 'aui-captcha-message',
	            INPUT_CLASS: 'aui-captcha-input'
	        };

	    $.widget("aui.captcha", {
	        //验证码
	        _code: '',
	        captchaId: 'aui-captcha-code-',
	        iconId: 'aui-captcha-icon-',
	        messageId: 'aui-captcha-message-',
	        verifyId: 'aui-captcha-verify-',
	        options: {
	            isValid: false,
	            caseSensitivity: false,
	            length: 6,
	            validChanged: $.noop
	        },
	        _create: function () {
	            this._initMembers()
	                ._createCaptcha()
	                ._loaded()
	                ._initEvent()
	                ._refresh();
	        },
	        _initMembers: function () {
	            ++uuid;
	            this._initId();

	            this._length = this.options.length;
	            this._caseSensitivity = this.options.caseSensitivity;

	            return this;
	        },
	        _initId: function () {
	            this.captchaId += uuid;
	            this.verifyId += uuid;
	            this.messageId += uuid;
	            this.iconId += uuid;
	        },
	        _createCaptcha: function () {
	            var
	                html = [],
	                h = -1,
	                i = 0,
	                l = this._length;

	            html[++h] = '<input class="' + _constant.INPUT_CLASS + '" id="' + this.verifyId + '" />';

	            html[++h] = '<div id="' + this.captchaId + '" class="' + _constant.CODE_CONTAINER_CLASS + '">';
	            for (; i < l; i++) {
	                html[++h] = '<div onselectstart="return false;"  class="' + _constant.CODE_CLASS + '"></div>'
	            }
	            html[++h] = '</div>';

	            html[++h] = '<span id="' + this.iconId + '" class="' + _constant.FINISH_CLASS + ' ' + _constant.RIGHT_ICON_CLASS + '"></span>';

	            //message
	            html[++h] = '<div class="' + _constant.MESSAGE_CLASS + '" id="' + this.messageId + '"></div>'

	            this.element.html(html.join(''));

	            return this;
	        },
	        _loaded: function () {
	            var
	                ele = this.element,
	                l = this._length;
	            ele.addClass(_constant.CAPTCHA_CLASS);
	            this.$code = ele.children('#' + this.captchaId).children();
	            this.$codes = [];
	            for (var i = 0; i < l; i++) {
	                this.$codes[i] = $(this.$code[i]);
	            }
	            this.$verify = this.element.find('#' + this.verifyId);
	            this.$message = this.element.children('#' + this.messageId);
	            this.$icon = this.element.children('#' + this.iconId);

	            return this;
	        },
	        _initEvent: function () {
	            var ns = this.eventNamespace;

	            this.$code.on('click' + ns, this, this._onRefreshClick);
	            this.$verify.on('blur' + ns, this, this._onInputBlur)

	            return this;
	        },
	        _onRefreshClick: function (e) {
	            e.data._refresh();
	        },
	        _onInputBlur: function (e) {
	            var
	                self = e.data,
	                value = false;
	            if (self.$verify.val() == self._code) {
	                value = true;
	                self.$icon.show();
	                self.$message.text('');
	            }
	            self.options.isValid = value;
	            self._onValidation(value);
	        },
	        _onValidation: function (value) {
	            if (this._oldValue != value) {
	                this._trigger("validChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: this._oldValue,
	                    newValue: value
	                }));
	                this._oldValue = value;
	            }
	        },
	        _trigger: function (type, event, args) {

	            if (args) {
	                args.type = "captcha";
	            }

	            //调用使用on注册的事件
	            this.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(this, type, event, args);
	        },
	        _refresh: function () {
	            this.options.isValid = false;

	            //清空输入
	            this.$verify.val('');
	            this.$icon.hide();
	            //生成验证码
	            this._generateCode();

	        },
	        _generateCode: function () {
	            var
	                keys = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 1, 2, 3, 4, 5, 6, 7, 8, 9],
	                capitals = [1, 2, 3, 4, 5, 6],
	                captcha = [],
	                l = this._length,
	                i = 0;
	            this.$code.removeClass().addClass(_constant.CODE_CLASS);
	            capitalsCount = capitals[Math.floor(Math.random() * capitals.length)];

	            for (; i < l; i++) {
	                captcha[i] = keys[Math.floor(Math.random() * keys.length)];
	            }

	            if (this._caseSensitivity) {
	                for (i = 0; i < capitalsCount; i++) {
	                    var index = capitals[Math.floor(Math.random() * capitals.length)] - 1;
	                    if (typeof captcha[index] == "string") {
	                        captcha[index] = captcha[index].toUpperCase();
	                    }
	                }
	            }

	            for (i = 0; i < l; i++) {
	                this.$codes[i].text(captcha[i]);
	            }

	            //capitalsCount = capitals[Math.floor(Math.random() * capitals.length)];
	            //for (i = 0; i < capitalsCount; i++) {
	            //    var index = capitals[Math.floor(Math.random() * capitals.length)] - 1;

	            //    this.$codes[index].addClass(_constant.ITALIC_CLASS)
	            //}

	            //capitalsCount = capitals[Math.floor(Math.random() * capitals.length)];
	            //for (i = 0; i < capitalsCount; i++) {
	            //    var index = capitals[Math.floor(Math.random() * capitals.length)] - 1;
	            //    this.$codes[index].addClass(_constant.WEIGHT_CLASS)
	            //}


	            this._code = captcha.join('');
	        },
	        //销毁
	        _destroy: function () {
	            var self = this;
	            self._trigger("destroy", null, $$.Event({
	                element: self.element
	            }));
	        },
	        isValid: function () {
	            return this.options.isValid;
	        },
	        validate: function () {
	            var value = this.$verify.val()
	            if (value == '') {
	                this.$message.text($$.I18N.captcha.emptyMessage)

	            } else if (value != this._code) {
	                this.$message.text($$.I18N.captcha.errorMessage)
	            }
	        }
	    });
	})(jQuery);

/***/ },
/* 10 */
/***/ function(module, exports) {

	(function ($$, $) {
	    "use strict";
	    var
	        _constant = {
	            CAROUSEL_CLASS: "aui-carousel",
	            CAROUSEL_CONTAINER_CLASS: "aui-carousel-container",
	            CAROUSEL_HORSE_CLASS: "aui-carousel-horse",
	            CAROUSEL_ARROW_CLASS: "aui-carousel-arrow",
	            CAROUSEL_ARROW_ICON_CLASS: "aui-carousel-arrow-icon",
	            CAROUSEL_ARROW_OVER_ICON_CLASS: "aui-carousel-arrow-icon-over",
	            CAROUSEL_PREV_CLASS: "aui-carousel-prev",
	            CAROUSEL_PREV_ICON_CLASS: "aui-icon-carousel-arrow-left",
	            CAROUSEL_NEXT_CLASS: "aui-carousel-next",
	            CAROUSEL_NEXT_ICON_CLASS: "aui-icon-carousel-arrow-right",
	            CAROUSEL_SHADE_CLASS: "aui-carousel-shade",
	            CAROUSEL_DESCRIPTION_CLASS: "aui-carousel-description",
	            CAROUSEL_SINGLE_LINE_CLASS: "aui-carousel-single-line",
	            CAROUSEL_PAGER_CLASS: "aui-carousel-pager",
	            CAROUSEL_PORTAL_CLASS: "aui-carousel-portal",
	            CAROUSEL_PORTAL_NORMAL_CLASS: "aui-icon-carousel-normal",
	            CAROUSEL_PORTAL_SELECTED_CLASS: "aui-icon-carousel-select",
	            CAROUSEL_PORTAL_SELECTED_COLOR_CLASS: "aui-carousel-portal-current"
	        };
	    $.widget("aui.carousel", {
	        options: {
	            //获取或设置一个值，该值表示是否启用轮播。值是boolean，默认值true,表示启用轮播。
	            autoplay: true,
	            //获取或设置一个值，该值表示轮播等待时间。值是number，默认值4000，表示轮播间隔为4秒。
	            delay: 4000,
	            //获取或设置一个值，该值表示信息区域文字最多显示的行数。值是number，默认值1，表示信息只能显示成一行。该值控制class的值为aui-carousel-description的div的布局行为。
	            displayLine: 1,
	            //获取或设置一个值，该值表示控件的高度。值是number，只在控件初始化时设置有效。
	            height: 200,
	            //获取或设置一个值，该值广告区域的模板。值是string，只在控件初始化时设置有效。
	            template: "",
	            //获取或设置一个对象，该对象表示广告区域绑定时的ViewModel。值是object。
	            viewModel: {

	            },
	            //获取或设置一个值，该值表示是否生成分页部分。
	            hasPager: true,
	            //获取或设置一个值，该值表示控件的宽度。值是number，只在控件初始化时设置有效。
	            width: 500
	        },
	        _create: function () {
	            var
	                self = this;
	            self._createCarousel();
	            self._createMembers();
	            self._initEvent();
	        },
	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];

	            self.options[key] = value;
	            if (oldValue != value) {
	                switch (key) {
	                    case "displayLine":
	                        self._onDisplayLineChanged(value);
	                        break;
	                    case "autoplay":
	                        self._onAutoplayChanged(value);
	                        break;
	                    case "delay":
	                        self._onDelayChanged(value);
	                        break;
	                }
	            }
	        },
	        _onDelayChanged: function (value) {
	            var self = this;
	            clearInterval(self._broadcasting);
	            if (value) {
	                self._play();
	            }
	        },
	        _onAutoplayChanged: function (value) {
	            var self = this;
	            clearInterval(self._broadcasting);
	            if (value) {
	                self._play();
	            }
	        },
	        _onDisplayLineChanged: function (value) {
	            var self = this;
	            self._displayLine = value;
	            //根据Design的标准，描述区域只提供两种高度模式。
	            self._shadeHeight = self._displayLine == 1 ? 50 : 70;

	            self._shade.height(self._shadeHeight);
	            if (self._tips) {
	                self._tips.height(self._shadeHeight - 10 - 22);
	                if (value == 1) {
	                    self._tips.addClass(_constant.CAROUSEL_SINGLE_LINE_CLASS);
	                } else {
	                    self._tips.removeClass(_constant.CAROUSEL_SINGLE_LINE_CLASS);
	                }
	            }
	        },
	        _createCarousel: function () {
	            var
	                self = this,
	                options = self.options,
	                element = self.element;

	            self._displayLine = options.displayLine;

	            element
	                .attr("tabindex", 0)
	                .addClass(_constant.CAROUSEL_CLASS)
	                .height(options.height)
	                .width(options.width)
	                .append(self._createContainer());
	            if (self.options.hasPager) {
	                element.append(self._createPager());
	            }

	            self._createMembers();
	            self._updateLayouts();

	            self._vm = {
	                items: ko.observableArray()
	            };
	            $.extend(self._vm, self.options.viewModel);
	            self._vm.items.subscribe(self._onVmChanged, {
	                self: self
	            });

	            ko.applyBindings(self._vm, element[0]);
	        },
	        _createContainer: function () {
	            var html = '';
	            html += '<div class="' + _constant.CAROUSEL_CONTAINER_CLASS + '" data-bind="foreach:items">';
	            html += '<div class="' + _constant.CAROUSEL_HORSE_CLASS + '" data-bind="attr:{index:$index}">';
	            html += this.options.template;
	            html += '</div>';
	            html += '</div>';

	            return html;
	        },
	        _createPager: function () {
	            var
	                html = '';
	            html += '<div class="' + _constant.CAROUSEL_ARROW_CLASS + ' ' + _constant.CAROUSEL_PREV_CLASS + '"><div class="' + _constant.CAROUSEL_ARROW_ICON_CLASS + ' ' + _constant.CAROUSEL_PREV_ICON_CLASS + '"></div></div>';
	            html += '<div class="' + _constant.CAROUSEL_ARROW_CLASS + ' ' + _constant.CAROUSEL_NEXT_CLASS + '"><div class="' + _constant.CAROUSEL_ARROW_ICON_CLASS + ' ' + _constant.CAROUSEL_NEXT_ICON_CLASS + '"></div></div>';
	            html += '<div class="' + _constant.CAROUSEL_SHADE_CLASS + '"></div>';
	            html += '<div class="' + _constant.CAROUSEL_PAGER_CLASS + '" data-bind="foreach:items">';
	            html += '<div class="' + _constant.CAROUSEL_PORTAL_CLASS + ' ' + _constant.CAROUSEL_PORTAL_NORMAL_CLASS + '" data-bind="attr:{index:$index}"></div>';
	            html += '</div>';
	            return html;
	        },
	        _createMembers: function () {
	            var
	                self = this,
	                element = self.element;
	            //显示的广告对应的序号
	            self._selectedIndex = -1;
	            self._start = 0,
	            self._container = element.children("." + _constant.CAROUSEL_CONTAINER_CLASS);
	            self._prev = element.children("." + _constant.CAROUSEL_PREV_CLASS);
	            self._next = element.children("." + _constant.CAROUSEL_NEXT_CLASS);
	            self._prevIcon = self._prev.children("." + _constant.CAROUSEL_PREV_ICON_CLASS);
	            self._nextIcon = self._next.children("." + _constant.CAROUSEL_NEXT_ICON_CLASS);
	            self._pager = element.children("." + _constant.CAROUSEL_PAGER_CLASS);
	            self._shade = element.children("." + _constant.CAROUSEL_SHADE_CLASS);
	        },
	        _initEvent: function () {
	            var
	                self = this,
	                namespace = self.eventNamespace;

	            self.element
	                .on('keydown' + namespace, self, self._onKeyDown)
	                .on('keyup' + namespace, self, self._onKeyUp)
	                .on('mouseover' + namespace, self, self._onMouseOver)
	                .on('mouseout' + namespace, self, self._onMouseOut)
	                .on('touchstart', self, self._onTouchstart)
	                .on('touchend', self, self._onTouchend);

	            self._prev
	                .on("click" + namespace, self, self._doPrevious)
	                .on("mouseover" + namespace, self, self._onPrevMouseOver)
	                .on("mouseout" + namespace, self, self._onPrevMouseOut);

	            self._next
	                .on("click" + namespace, self, self._doNext)
	                .on("mouseover" + namespace, self, self._onNextMouseOver)
	                .on("mouseout" + namespace, self, self._onNextMouseOut);

	        },
	        _updateLayouts: function () {
	            var
	                self = this,
	                top = 0,
	                shadeHeight = self._displayLine == 1 ? 50 : 70;
	            self._shadeHeight = shadeHeight;
	            top = (self.options.height - shadeHeight) / 2;

	            self._shade.height(shadeHeight);

	            self._prev.css("top", top);
	            self._next.css("top", top);
	        }
	    });

	    //itemsSource相关逻辑
	    $.extend($.aui.carousel.prototype, {
	        _onVmChanged: function () {
	            var self = this.self;
	            self._vmTimer = setInterval(function () {
	                clearInterval(self._vmTimer);

	                if (self._item && 'off' in self._item) {
	                    self._item.off(self.eventNamespace);
	                }

	                self._onItemsSourceChanged();
	            }, 10);
	        },
	        _onItemsSourceChanged: function () {
	            var
	                self = this,
	                i = 0,
	                count = 0;

	            self._horses = self._container.children('div[class~=' + _constant.CAROUSEL_HORSE_CLASS + ']');
	            count = self._horses.length;
	            self._portals = self._pager.children('div[class~=' + _constant.CAROUSEL_PORTAL_CLASS + ']').on('click' + self.eventNamespace, self, self._onPortalClick);

	            self._max = count - 1;
	            self._horse = [];
	            self._portal = [];
	            for (; i < count; i++) {
	                self._horse[i] = $(self._horses[i]);
	                self._portal[i] = $(self._portals[i]);
	            }

	            self._goToPageByIndex(0);

	            self._tips = self._horses.find('div[class~=' + _constant.CAROUSEL_DESCRIPTION_CLASS + ']').height(self._shadeHeight - 10 - 22).width(self.options.width - 20);

	            if (self.options.displayLine == 1) {
	                self._tips.addClass(_constant.CAROUSEL_SINGLE_LINE_CLASS);
	            }
	            self._play();

	        },
	        _goToPageByIndex: function (index, direction) {
	            var
	                self = this,
	                direction = (direction || "left right").split(" "),
	                hideDirection = direction[0],
	                direction = direction[1];
	            index = index < 0 ? 0 : index;
	            index = index > (self._vm.items().length - 1) ? 0 : index;

	            self._portals.removeClass(_constant.CAROUSEL_PORTAL_SELECTED_CLASS + ' ' + _constant.CAROUSEL_PORTAL_SELECTED_COLOR_CLASS);
	            //self._horses.hide();
	            if (self._oldSelectedIndex != -1 && !self._running) {
	                direction = self._oldSelectedIndex > index ? "left" : "right";
	                hideDirection = self._oldSelectedIndex > index ? "right" : "left";
	            } else {
	                //不改变轮播时动画的方向。
	                self._running = false;
	            }

	            if (self._horse[self._oldSelectedIndex]) {
	                self._horseTransition(self._horse[self._oldSelectedIndex], "drop", hideDirection);
	            }
	            if (self._horse[index]) {
	                self._horseTransition(self._horse[index], "slide", direction);

	                self._selectedIndex = index;
	                self._portal[index].addClass(_constant.CAROUSEL_PORTAL_SELECTED_CLASS + ' ' + _constant.CAROUSEL_PORTAL_SELECTED_COLOR_CLASS);
	            }
	        },
	        _setItemsSource: function (source) {
	            var
	                self = this;

	            self.options.itemsSource = source;

	            self._vm.items(ko.mapping.fromJS(source)());
	        },
	        /**
	         * 获取或设置用于生成控件的内容的集合。
	         * @method itemsSource
	         * @param {Array} source 需要设置的内容集合。
	         */
	        itemsSource: function (source) {
	            var self = this;
	            if (source === undefined) {
	                //获取控件的数据源
	                return ko.mapping.toJS(self._vm.items);
	            } else {
	                self._setItemsSource(source);
	            }
	        }
	    });

	    //分页相关逻辑
	    $.extend($.aui.carousel.prototype, {
	        //轮播
	        _play: function () {
	            var self = this;
	            if (self.options.autoplay) {
	                self._broadcasting = setInterval(function () {
	                    self._running = true;
	                    self._oldSelectedIndex = self._selectedIndex;
	                    self._goToPageByIndex(++self._selectedIndex <= self._max ? self._selectedIndex : 0);
	                }, self.options.delay);
	            }
	        },
	        _onKeyDown: function (e) {
	            if (e.which == $.ui.keyCode.LEFT || e.which == $.ui.keyCode.RIGHT) {
	                //暂停轮播
	                clearInterval(e.data._broadcasting);
	            }
	        },
	        _onKeyUp: function (e) {
	            var self = e.data;
	            switch (e.which) {
	                case $.ui.keyCode.LEFT:
	                    self._prev.trigger("click");
	                    self._play();
	                    break;
	                case $.ui.keyCode.RIGHT:
	                    self._next.trigger("click");
	                    self._play();
	                    break;
	            }
	        },
	        _onMouseOver: function (e) {
	            //暂停轮播
	            clearInterval(e.data._broadcasting);
	        },
	        _onMouseOut: function (e) {
	            var self = e.data;
	            //重新开启轮播
	            self._play();
	        },
	        //向前翻页
	        _doPrevious: function (e) {
	            var self = (e && e.data) || this;
	            self._oldSelectedIndex = self._selectedIndex;
	            self._running = true;
	            self._goToPageByIndex(--self._selectedIndex >= 0 ? self._selectedIndex : self._max, "right left");
	        },
	        //跳转到前一页
	        goToPrevious: function () {
	            var self = this;
	            clearInterval(self._broadcasting);
	            self._doPrevious();
	            self._play();
	        },
	        _onPrevMouseOver: function (e) {
	            e.data._prev.addClass(_constant.CAROUSEL_ARROW_OVER_ICON_CLASS);
	        },
	        _onPrevMouseOut: function (e) {
	            e.data._prev.removeClass(_constant.CAROUSEL_ARROW_OVER_ICON_CLASS);
	        },
	        //向后翻页
	        _doNext: function (e) {
	            var self = (e && e.data) || this;
	            self._oldSelectedIndex = self._selectedIndex;
	            self._running = true;
	            self._goToPageByIndex(++self._selectedIndex <= self._max ? self._selectedIndex : 0);
	        },
	        //跳转到前一页
	        goToNext: function () {
	            var self = this;
	            clearInterval(self._broadcasting);
	            self._doNext();
	            self._play();
	        },
	        _onNextMouseOver: function (e) {
	            e.data._next.addClass(_constant.CAROUSEL_ARROW_OVER_ICON_CLASS);
	        },
	        _onNextMouseOut: function (e) {
	            e.data._next.removeClass(_constant.CAROUSEL_ARROW_OVER_ICON_CLASS);
	        },
	        _onPortalClick: function (e) {
	            var self = e.data;
	            self._oldSelectedIndex = self._selectedIndex;
	            self._goToPageByIndex(this.getAttribute("index"));
	        },
	        _horseTransition: function (horse, type, direction) {
	            horse
	                .stop(true, true)
	                .effect({
	                    effect: type,
	                    direction: direction
	                });
	        }
	    });

	    //触摸相关
	    $.extend($.aui.carousel.prototype, {
	        //touch start时触发
	        _onTouchstart: function (e) {
	            e.preventDefault();
	            var self = e.data;
	            clearInterval(self._broadcasting);
	            self._start = e.originalEvent.changedTouches[0].pageX;
	        },
	        //touch end时触发
	        _onTouchend: function (e) {
	            e.preventDefault();
	            var
	                self = e.data,
	                distance = e.originalEvent.changedTouches[0].pageX - self._start;
	            self._play();
	            self._start = e.originalEvent.changedTouches[0].pageX;
	            if (distance > 10) {             
	                self._doPrevious(e);
	            }
	            else if (distance < -10) {
	                self._doNext(e);
	            }
	        }
	    });
	})(AUI, jQuery);

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	(function ($) {
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        //自定义绑定
	        ko.bindingHandlers.checkbox = {
	            update: function (element, valueAccessor, allbingsAccessor) {
	                //单独提出defaultOptions主要用来重定义click事件，避免click死循环
	                //toJS 将对象中的所有对象都变成简单类型，不是observable
	                //unwrap 将对象变成简单类型，不是observable,如果是array一类的，里面的对象类型不变，还可以是observable
	                var defaultOptions = {
	                    isThreeState: false,
	                    isTabStop: true,
	                    tabindex: 0,
	                    isInline: false,
	                    contentWidth: "auto",
	                    disabled: false,
	                    checked: false
	                }, options = ko.unwrap(valueAccessor());
	                //unwrap获取对应简单类型的值，而不是observable等类型的值
	                defaultOptions.disabled = ko.unwrap(options.disabled);
	                defaultOptions.clickToIntermediate = ko.unwrap(options.clickToIntermediate);
	                defaultOptions.checked = ko.unwrap(options.checked);
	                defaultOptions.isThreeState = ko.unwrap(options.isThreeState);
	                defaultOptions.isTabStop = ko.unwrap(options.isTabStop);
	                defaultOptions.tabindex = ko.unwrap(options.tabindex);
	                defaultOptions.isInline = ko.unwrap(options.isInline);
	                defaultOptions.contentWidth = ko.unwrap(options.contentWidth);
	                if (ko.isObservable(options.checked)) {
	                    //此处的click为原options中暴露的click事件，此处相当于是click的回调函数
	                    defaultOptions.click = function (e, args) {
	                        //实现双向绑定
	                        options.checked(args.newValue);
	                        e.stopPropagation();
	                        if (options.click) {
	                            //对于暴露的事件一定要手动写一次，是执行用户传进来的自定义click事件(如果没有绑定，控件中默认就执行该句，但是有绑定，就需要手动再写一次调用)
	                            options.click(e, args);
	                        }
	                    };
	                }

	                $(element).checkbox(defaultOptions);
	            }
	        };
	    }
	    /**
		 * checkbox控件，可进行勾选、反勾选等操作，状态分别为checked，unchecked和indeterminate。如果使用form提交时，在checkbox内部还有一个隐藏的input，可以通过name与element的id值相同的该input的value值得到check状态。
		 * HTML文件中的代码：
		 
		 	<div id="mydiv">this is a three state checkbox</div>
		 	
		 * 相关Javascript代码：
		 
		 	$("#mydiv").checkbox({
			 	isThreeState : true,
			 	checked : false,
			 	tabindex : 1,
			});
			
		 * @class checkbox
		 * @author Hongbin.Dou
		 * @constructor
		 * @param {Object} options 控件配置信息。
		 * @param {Boolean} options.isThreeState 获取或设置一个值，该值表示控件的类型。如果为true，则代表是toggle三态checkbox，否则，代表是两种状态的checkbox。该值只有在控件初始化时设置有效。
		 * @param {Boolean} options.checked 获取或设置一个值，该值表示checkbox控件的checked状态。如果为true，则代表是checked状态，如果为false，则表示unchecked状态，如果为null（isThreeState为true），则表示indeterminate状态。
		 * @param {Number} options.isTabStop 判断checkbox控件是否需要设置tabindex值，如果为false则不设置tabindex值，即不可获取焦点。该值只有在控件初始化时设置有效。
		 * @param {Number} options.tabindex 设置checkbox控件的tabindex值。该值只有在控件初始化时设置有效。
		 * @param {Boolean} options.disabled 获取或设置一个值，该值表示checkbox控件的disabled状态。如果为true，则代表是disabled，否则，代表enabled。
		 * @param {Boolean} options.isInline 获取或设置一个值，该值表示checkbox控件的display布局。如果为true，则是inline横向布局（true），否则，是纵向布局（false）。该值只有在控件初始化时设置有效。
		 * @param {Number} options.contentWidth 设置checkbox控件的content宽度值，写法同JS自带的宽度写法相同，默认为auto自适应宽度。该值只有在控件初始化时设置有效。
		 * @param {Function} options.click 设置一个方法，该方法会在click时触发。
		 * @param {Function} options.check 设置一个方法，该方法会在状态变成checked时触发。
		 * @param {Function} options.uncheck 设置一个方法，该方法会在状态变成unchecked时触发。
		 * @param {Function} options.indeterminate 设置一个方法，该方法会在状态变成indeterminate时触发。	
		 */
	    $.widget("aui.checkbox", {
	        options: {
	            isThreeState: false,
	            clickToIntermediate: true,
	            //供开发初始化时设置checkbox状态：unchecked(false) -- checked(true) -- indeterminate(null)
	            //状态改变时该值也会改变
	            checked: false,
	            //对于tree这类不需要tabindex值（不可获取焦点）的控件可设置isTabStop值为false
	            isTabStop: true,
	            tabindex: 0,
	            disabled: false,
	            isInline: false,
	            contentWidth: "auto",
	            isPisces: false,
	            /**
				 * 在click checkbox控件时触发。
				 * @event click
				 * @param {Object} 第一个参数e为触发事件click的信息。
				 * @param {Object} 第二个参数args为事件信息。
				 * @param {Boolean} args.oldValue click前的checked值。
				 * @param {Boolean} args.newValue click后的checked值。
				 * @param {Object} args.element checkbox对象。
				 * @example <div id="checkboxid1">click 事件赋值,clickevent为要执行的事件。</div>
				 * $("#checkboxid1").checkbox({
	click : clickevent
	})
				 */
	            click: $.noop,
	            /**
				 * checkbox控件状态变成checked时触发。
				 * @event check
				 * @param {Object} 第一个参数为{}。
				 * @param {Object} 第二个参数args为事件信息。
				 * @param {Boolean} args.oldValue 前一个checked的状态。
				 * @param {Boolean} args.newValue 当前checked的状态。
				 * @param {Object} args.element checkbox对象。
				 * @example <div id="checkboxid1">check 事件赋值,checkevent为要执行的事件。</div>
				 * $("#checkboxid1").checkbox({
	check : checkevent,
	})
				 */
	            check: $.noop,
	            /**
				 * checkbox控件状态变成unchecked时触发。
				 * @event uncheck
				 * @param {Object} 第一个参数为{}。
				 * @param {Object} 第二个参数args为事件信息。
				 * @param {Boolean} args.oldValue 前一个checked的状态。
				 * @param {Boolean} args.newValue 当前checked的状态。
				 * @param {Object} args.element checkbox对象。
				 * @example <div id="checkboxid1">uncheck 事件赋值,uncheckevent为要执行的事件。</div>
				 * $("#checkboxid1").checkbox({
	uncheck : uncheckevent,
	})
				 */
	            uncheck: $.noop,
	            /**
				 * checkbox控件状态变成indeterminate时触发。
				 * @event indeterminate
				 * @param {Object} 第一个参数为{}。
				 * @param {Object} 第二个参数args为事件信息。
				 * @param {Boolean} args.oldValue 前一个checked的状态。
				 * @param {Boolean} args.newValue 当前checked的状态。
				 * @param {Object} args.element checkbox对象。
				 * @example <div id="checkboxid1">indeterminate 事件赋值,indeterminateevent为要执行的事件。</div>
				 * $("#checkboxid1").checkbox({
	indeterminate : indeterminateevent,
	})
				 */
	            indeterminate: $.noop
	        },
	        _create: function () {
	            var self = this;
	            self._render();
	        },
	        _setOption: function (key, value) {
	            // 保存修改前和将要（或已经）修改的值
	            var self = this,
				args = {
				    //todo:delete
				    oldstate: this.options[key],
				    newstate: value,
				    obj: self,

				    //new args content
				    oldValue: this.options[key],
				    newValue: value,
				    element: self.element
				};
	            if (args.oldValue != args.newValue) {
	                //执行完该句之后key对应的值就会变成value,即使key对应的值没变，也会走这里
	                //$.Widget.prototype._setOption.apply(this, arguments);
	                if (key == "disabled") {
	                    self.options.disabled = args.newValue;
	                    args.newValue ? self._disable() : self._enable();
	                };
	                if (key == "checked") {
	                    self.options.checked = args.newValue;
	                    self._gotoState(args.newValue);
	                    switch (args.newValue) {
	                        case true:
	                            self.options.check({}, $.extend($$._EventArgs, args));
	                            break;
	                        case false:
	                            self.options.uncheck({}, $.extend($$._EventArgs, args));
	                            break;
	                        case null:
	                            self.options.indeterminate({}, $.extend($$._EventArgs, args));
	                            break;
	                    }
	                }
	            }
	        },
	        _render: function () {
	            var self = this, element = self.element;
	            self._defaultchecked = self.options.checked;
	            self._initLayOut();
	            self._initCheckState();
	            element.on("click" + self.eventNamespace, self, self._click)
	                .on("keydown" + self.eventNamespace, self, function (e) { e.stopPropagation(); })
			        .on("mousedown" + self.eventNamespace, self._box, function (e) {
			            e.data.addClass("aui-checkbox-box-down");
			        })
	                .hover(function () {
	                    self._box.addClass("aui-checkbox-box-hover");
	                }, function () {
	                    self._box.removeClass("aui-checkbox-box-hover");
	                });
	            self._box.on('keydown' + self.eventNamespace, self, self._keydown)
	                .on("blur" + self.eventNamespace, self._box, function (e) {
	                    e.data.removeClass("aui-checkbox-box-down");
	                });
	        },
	        _initLayOut: function () {
	            var self = this, element = self.element, _usercontenthtml = element.html();
	            self._pisces = self.options.isPisces ? $('<div class="aui-checkbox-pisces"></div>') : "";
	            self._box = $("<div class='aui-checkbox-box aui-checkbox-box-base' ></div>").attr("role", "checkbox").attr("aria-span", _usercontenthtml);
	            self._box2 = $("<div class='aui-checkbox-check-box'></div>");
	            self._checkdiv = $("<img src='" + $$.path + "/image/checkbox.png' alt=''/>");
	            self._content = $("<div class='aui-checkbox-content'></div>");
	            self._box.append(self._box2);
	            self._box2.append(self._checkdiv);
	            self.options.isTabStop ? self._box.attr("tabindex", self.options.tabindex) : self._box.removeAttr("tabindex");
	            //add type="hidden" input, you can get the input value instead of custom checkbox's value when submit form.
	            self._hiddeninput = $("<input type='hidden' name='" + element.attr("id") + "'/>");
	            element.html("").addClass("aui-checkbox").append(self._pisces).append(self._box).append(self._content).append(self._hiddeninput);
	            //将content放到单独的DIV里面，这样可以调整content的高度，不然content偏下
	            self._content.append(_usercontenthtml);
	            if (self.options.disabled) {
	                self._disable();
	            }
	            //当options.contentWidth没有设置时看容器div是否有设置宽度值，如果有则取该值，没有就为auto
	            var _contentWidth = element.attr("contentWidth");
	            if (self.options.contentWidth === "auto" && _contentWidth != undefined) {
	                self.options.contentWidth = _contentWidth;
	            }
	            self._content.css("width", self.options.contentWidth);
	            element.width(this._content.width() + 29).css("height", self._content.css("height") == "0px" ? "20px" : self._content.css("height"));

	            if (self.options.isInline) {
	                element.addClass("aui-checkbox-display-inline");
	            }
	        },
	        _initCheckState: function () {
	            var _state = this._confirmState(this.options.checked);
	            this._gotoState(_state);
	        },
	        _gotoState: function (state) {
	            var self = this, element = self.element;
	            self._ischecked = state;
	            switch (state) {
	                case true:
	                    self._box.attr("aria-checked", "true");
	                    self._checkdiv.removeClass("aui-checkbox-indeterminate aui-checkbox-uncheck").addClass("aui-checkbox-check");
	                    break;
	                case false:
	                    self._box.attr("aria-checked", "false");
	                    self._checkdiv.removeClass("aui-checkbox-check aui-checkbox-indeterminate").addClass("aui-checkbox-uncheck");
	                    self._hiddeninput.attr("value", "false");
	                    break;
	                case null:
	                    self._box.attr("aria-checked", "mixed");
	                    self._checkdiv.attr("aria-checked", "mixed").attr("alt", "half check state").removeClass("aui-checkbox-check aui-checkbox-uncheck").addClass("aui-checkbox-indeterminate");
	                    self._hiddeninput.attr("value", "");
	                    break;
	            }
	        },
	        _confirmState: function (state) {
	            var _checked = false;
	            if (state == true || state == false || state == null) {
	                if (this.options.isThreeState) {
	                    _checked = state;
	                } else {
	                    //当不是三态时null与false效果相同
	                    _checked = !!state;
	                }
	            }
	            return _checked;
	        },
	        _nextState: function (state) {
	            var _checked = false;
	            if (this.options.isThreeState && this.options.clickToIntermediate) {
	                //checkbox状态改变顺序：unchecked(false) -- checked(true) -- indeterminate(null)
	                switch (state) {
	                    case true:
	                        _checked = null;
	                        break;
	                    case false:
	                        _checked = true;
	                        break;
	                    case null:
	                        _checked = false;
	                        break;
	                }
	            } else {
	                //当不是三态时只有true和false，nextstate与原state相反
	                _checked = !state;
	            }
	            return _checked;
	        },
	        _disable: function () {
	            var self = this;
	            self.element.removeClass("aui-checkbox").addClass("aui-checkbox-disabled");
	            //当将tabindex属性移除时，Div无法获得焦点，避免键盘操作有误
	            self._box.removeClass("aui-checkbox-box aui-checkbox-box-hover").addClass("aui-checkbox-box-disabled").removeAttr("tabindex");
	            self.options.isPisces && self._pisces.addClass("aui-checkbox-pisces-disabled");
	            switch (self.options.checked) {
	                case true:
	                    self._checkdiv.removeClass("aui-checkbox-check").addClass("aui-checkbox-check-disabled");
	                    break;
	                case null:
	                    self._checkdiv.removeClass("aui-checkbox-indeterminate").addClass("aui-checkbox-indeterminate-disabled");
	                    break;
	            }
	        },
	        //在disabled改变时调用
	        _enable: function () {
	            var self = this;
	            self.element.removeClass("aui-checkbox-disabled").addClass("aui-checkbox");
	            //当将tabindex设置成非负数时，Div可以获得焦点
	            self._box.removeClass("aui-checkbox-box-disabled aui-checkbox-box-down").addClass("aui-checkbox-box");
	            self.options.isPisces && self._pisces.removeClass("aui-checkbox-pisces-disabled");
	            self.options.isTabStop ? self._box.attr("tabindex", self.options.tabindex) : self._box.removeAttr("tabindex");
	            switch (self.options.checked) {
	                case true:
	                    self._checkdiv.removeClass("aui-checkbox-check-disabled").addClass("aui-checkbox-check");
	                    break;
	                    //case false:
	                    //    self._checkdiv.removeClass("aui-checkbox-uncheck-disabled").addClass("aui-checkbox-uncheck");
	                    //    break;
	                case null:
	                    self._checkdiv.removeClass("aui-checkbox-indeterminate-disabled").addClass("aui-checkbox-indeterminate");
	                    break;
	            }
	        },
	        //Events below
	        _keydown: function (e) {
	            //点击空格时执行_click函数($.ui.keyCode.SPACE = 32:代表空格)	
	            if (e.keyCode == $.ui.keyCode.SPACE) {
	                e.stopPropagation();
	                e.preventDefault();
	                e.data._click(e);
	            }
	        },
	        _click: function (e) {
	            e.stopPropagation();
	            var self = e.data, _oldstate = self._confirmState(self.options.checked), _newstate = self._nextState(_oldstate);
	            if (!self.options.disabled) {
	                self._setOption("checked", _newstate);
	                self._box.removeClass("aui-checkbox-box-down")
	                if (self.options.isTabStop) {
	                    self._box.focus();
	                };
	                //执行开发自定义的click事件
	                var args = {
	                    //todo:delete
	                    oldstate: _oldstate,
	                    newstate: _newstate,
	                    obj: self,

	                    //new args content
	                    oldValue: _oldstate,
	                    newValue: _newstate,
	                    element: self.element
	                };
	                self.options.click(e, $.extend($$._EventArgs, args));
	            }
	        },

	        //destroy改成_destroy，为私有方法
	        _destroy: function () {
	            this._box.removeClass().off(this.eventNamespace);
	            this._checkdiv.removeClass();
	            this._content.removeClass();
	            this.element.removeClass().empty();
	            //$.Widget.prototype.destroy.call(this);
	        },
	        ////////////////////Public Methods ////////////////////
	        /**
			 * 获得checkbox的默认checked值。
			 * @public
			 * @return {Boolean} 返回checkbox的默认checked值。
			 * @example
			 * var defaultChecked = $("#checkboxid1").checkbox("getDefaultChecked");
			 */
	        getDefaultChecked: function () {
	            return this._defaultchecked;
	        },
	        /**
			 * 获取或设置checkbox的checked值。
			 * @method checked
			 * @param {Boolean} ischecked需要设置的值。
			 * @return {Boolean} 如果ischecked参数为空，则返回当前checked属性值。
			 * @return {checkbox} 如果参数不为空则返回checkbox对象，便于链式调用。
			 * @example CheckBox 的状态与IsChecked值的对应：Checked-true；Unchecked-false；Indeterminate-null
			 * $("#checkboxid1").checkbox("checked"); //获取当前checked状态。
	$("#checkboxid1").checkbox("checked",true); //设置checked状态为true，即checked状态。
			 */
	        checked: function (ischecked) {
	            if (arguments.length == 0) {
	                return this._ischecked;
	            } else {
	                this._setOption("checked", this._confirmState(ischecked));
	            }
	        },
	        /**
			 * 刷新布局checkbox高度。
			 * @method refresh
			 * @return {checkbox}。
			 * @example 由于checkbox无法自动改变承载div的高度，所以需要开发自己在resize函数里对其调用refresh函数。
			 * $(window).resize(function() {
		$("#checkboxid1").checkbox("refresh");
	});
			 */
	        refresh: function () {
	            var self = this, element = this.element;
	            element.css("height", this._content.css("height"));
	            //width:不带单位；css("width")带单位px
	            element.width(this._content.width() + 23);
	        },
	        /**
			 * 获取或设置checkbox的disabled值。
			 * @method isDisabled
			 * @param {Boolean} isdisabled需要设置的值。
			 * @return {Boolean} 如果isdisabled参数为空，则返回当前disabled属性值。
			 * @return {checkbox} 如果参数不为空则返回checkbox对象，便于链式调用。
			 * @example
			 * $("#checkboxid1").checkbox("isDisabled"); //获取当前checked状态。
	$("#checkboxid1").checkbox("isDisabled",true); //设置disabled状态为true，即disabled状态。
			 */
	        isDisabled: function (isdisabled) {
	            if (arguments.length == 0) {
	                return this.options.disabled;
	            } else {
	                //防止isdisabled不是bool类型，故添加!!操作
	                this._setOption("disabled", !!isdisabled);
	            }
	        },
	        //////////////////// End of Public Methods ////////////////////
	    });
	})(jQuery);

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author glwang
	 * @fileoverview colorpicker控件。
	 */
	(function ($) {
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.colorpicker = {
	            update: function (element, valueAccessor) {
	                var options = ko.toJS(ko.unwrap(valueAccessor()));
	                options.converter = function (prop) {
	                    if (prop != undefined)
	                        return options.optionText ? prop[options.optionText] : prop;
	                    else
	                        return '';
	                };
	                $(element).colorpicker(options);
	            }
	        };
	    }
	    /**
	     * <p>将DOM元素转化成colorpicker控件。表示一个颜色选择器控件。</p>
	     * 普通的colorpicker使用： 

	     $("#colorpicker").colorpicker({
	            click: function (e, data) {
	                console.log($("#colorpicker").colorpicker("selectedColor"));
	            }
	        });

	     * HTML内容：
	       
	       <div id="colorpicker"></div>
		  
		 * @class colorpicker
	     * @author glwang
		 * @constructor 
		 * @param {Function} options.click 当每一个颜色方格被点击时，执行的回调事件。 
		 */

	    $.widget("aui.colorpicker", {
	        options: {
	            /**
				 * 当点击颜色方格时触发。
				 * @event click
				 * @param {Object} e 事件信息。
				 * @param {Object} e.oldValue 现在的值。
				 * @param {Number} e.newValue 将要变更的值。
				 * @param {jQuery} e.data 控件实例。
				 */
	            click: $.noop
	        },
	        _create: function () {
	            this._createColorPicker();
	        },
	        _createWebSafeColor: function () {
	            var c = ['FF', 'CC', '99', '66', '33', '00'], length = c.length, t = [], flag = false;
	            for (var i = 0; i < length; i++) {
	                for (var j = 0; j < length / 2; j++) {
	                    if (j >= length / 2) {
	                        //
	                        flag = true;
	                    } else {
	                        flag = false;
	                    }
	                    for (var k = 0; k < length; k++) {
	                        if (flag) {
	                            t[t.length % 18 - 1] = c[j] + c[k] + c[i];
	                        } else {
	                            t[t.length] = c[j] + c[k] + c[i];
	                        }
	                    }
	                }
	            }
	            for (var i = 0; i < 6; i++) {
	                for (var j = 3; j < 6; j++) {
	                    for (var k = 0; k < 6; k++) {
	                        t[t.length] = c[j] + c[k] + c[i];
	                    }
	                }
	            }
	            return t.join(',')
	        },


	        _getColorData: function () {
	            return this._createWebSafeColor();
	            //return
	            //"FFFFFF,FFCCFF,FF99FF,FF66FF,FF33FF,FF00FF,
	            //CCFFFF,CCCCFF,CC99FF,CC66FF,CC33FF,CC00FF,
	            //99FFFF,99CCFF,9999FF,9966FF,9933FF,9900FF,
	            //FFFFCC,FFCCCC,FF99CC,FF66CC,FF33CC,FF00CC,
	            //CCFFCC,CCCCCC,CC99CC,CC66CC,CC33CC,CC00CC,
	            //99FFCC,99CCCC,9999CC,9966CC,9933CC,9900CC,
	            //FFFF99,FFCC99,FF9999,FF6699,FF3399,FF0099,
	            //CCFF99,CCCC99,CC9999,CC6699,CC3399,CC0099,
	            //99FF99,99CC99,999999,996699,993399,990099,
	            //FFFF66,FFCC66,FF9966,FF6666,FF3366,FF0066,
	            //CCFF66,CCCC66,CC9966,CC6666,CC3366,CC0066,
	            //99FF66,99CC66,999966,996666,993366,990066,
	            //FFFF33,FFCC33,FF9933,FF6633,FF3333,FF0033,
	            //CCFF33,CCCC33,CC9933,CC6633,CC3333,CC0033,
	            //99FF33,99CC33,999933,996633,993333,990033,
	            //FFFF00,FFCC00,FF9900,FF6600,FF3300,FF0000,
	            //CCFF00,CCCC00,CC9900,CC6600,CC3300,CC0000,
	            //99FF00,99CC00,999900,996600,993300,990000,
	            //66FFFF,66CCFF,6699FF,6666FF,6633FF,6600FF,
	            //33FFFF,33CCFF,3399FF,3366FF,3333FF,3300FF,
	            //00FFFF,00CCFF,0099FF,0066FF,0033FF,0000FF,
	            //66FFCC,66CCCC,6699CC,6666CC,6633CC,6600CC,
	            //33FFCC,33CCCC,3399CC,3366CC,3333CC,3300CC,
	            //00FFCC,00CCCC,0099CC,0066CC,0033CC,0000CC,
	            //66FF99,66CC99,669999,666699,663399,660099,
	            //33FF99,33CC99,339999,336699,333399,330099,
	            //00FF99,00CC99,009999,006699,003399,000099,
	            //66FF66,66CC66,669966,666666,663366,660066,
	            //33FF66,33CC66,339966,336666,333366,330066,
	            //00FF66,00CC66,009966,006666,003366,000066,
	            //66FF33,66CC33,669933,666633,663333,660033,
	            //33FF33,33CC33,339933,336633,333333,330033,
	            //00FF33,00CC33,009933,006633,003333,000033,
	            //66FF00,66CC00,669900,666600,663300,660000,
	            //33FF00,33CC00,339900,336600,333300,330000,
	            //00FF00,00CC00,009900,006600,003300,000000";
	        },
	        _createColorPicker: function () {
	            var self = this, _colorData = self._getColorData().split(","), html = [];
	            for (var i = 0; i < _colorData.length; i++) {
	                html[html.length] = '<a style="border-color: #' + _colorData[i] + '; background-color: #' + _colorData[i] + '" href="javascript:void(0)">' + _colorData[i] + '</a>';
	            }
	            html[html.length] = '<span><em>X</em><strong></strong></span>';
	            var colorpicker = $("<div></div>").addClass("aui-colorpicker").attr("tabindex", "0");
	            self.element.append(colorpicker.html(html.join('')));

	            colorpicker.on("focusin", function (e) {
	                var atag = $(e.target).closest("a");
	                if (atag && atag.length != 0) {
	                    colorpicker.find("em").css("backgroundColor", "#" + atag.text());
	                    colorpicker.find("strong").html("#" + atag.text());
	                }
	            }).on("click", function (e) {
	                var atag = $(e.target).closest("a");
	                if (atag && atag.length != 0) {
	                    var args = {
	                        oldValue: self._selectedColor == undefined ? "" : self._selectedColor.text,
	                        newValue: atag.text(),
	                        element: self.element
	                    };
	                    self.options.click({}, $.extend($$._EventArgs, args));
	                    self._selectedColor = atag;
	                }
	            }).on("mouseover", function (e) {
	                var atag = $(e.target).closest("a");
	                if (atag && atag.length != 0) {
	                    colorpicker.find("em").css("backgroundColor", "#" + atag.text());
	                    colorpicker.find("strong").html("#" + atag.text());
	                }
	            }).on("keydown", function (e) {
	                if (e.keyCode == 27) {
	                    return true;
	                }
	                var tabbables = $(":tabbable", $(".aui-colorpicker")),
	                    first = tabbables.filter(":first"),
	                    last = tabbables.filter(":last");
	                if (e.keyCode == 39) {
	                    if (e.target.nodeName == "DIV") {
	                        first.focus(1);
	                        return true;
	                    }
	                    for (var i = 0; i < tabbables.length; i++) {
	                        if (e.target === tabbables[i]) {
	                            var index = i + 1, col = index % 18, row = Math.floor(index / 18);
	                            if (row == Math.floor(i / 18)) {
	                                $(tabbables[index]).focus(1);
	                            }
	                            return true;
	                        }
	                    }
	                }
	                if (e.keyCode == 37) {
	                    if (e.target.nodeName == "DIV") {
	                        first.focus(1);
	                        return true;
	                    }
	                    for (var i = 0; i < tabbables.length; i++) {
	                        if (e.target === tabbables[i]) {
	                            var index = i - 1, col = index % 18, row = Math.floor(index / 18);
	                            if (row == Math.floor(i / 18)) {
	                                $(tabbables[index]).focus(1);
	                            }
	                            return true;
	                        }
	                    }
	                }
	                if (e.keyCode == 40) {
	                    if (e.target.nodeName == "DIV") {
	                        first.focus(1);
	                        return true;
	                    }
	                    for (var i = 0; i < tabbables.length; i++) {
	                        if (e.target === tabbables[i]) {
	                            var index = i + 1, col = index % 18, row = Math.floor(index / 18), nextIndex = (row + 1) * 18 + col - 1;
	                            if (index == 0) {
	                                first.focus(1);
	                                return true;
	                            }
	                            $(tabbables[nextIndex]).focus(1);
	                            return true;
	                        }
	                    }
	                }
	                if (e.keyCode == 38) {
	                    if (e.target.nodeName == "DIV") {
	                        first.focus(1);
	                        return true;
	                    }
	                    for (var i = 0; i < tabbables.length; i++) {
	                        if (e.target === tabbables[i]) {
	                            var index = i - 1,
	                                col = index % 18,
	                                row = Math.floor(index / 18),
	                                lastIndex = (row - 1) * 18 + col + 1;
	                            if (index == 0) {
	                                first.focus(1);
	                                return true;
	                            }
	                            $(tabbables[lastIndex]).focus(1);
	                            return true;
	                        }
	                    }
	                }
	            });
	        },
	        _destroy: function () {
	            this.element.off(this.eventNamespace);
	            this.element.empty();
	        },
	        /**
			 * 获取或设置选中的颜色值。
			 * @method selectedColor
			 * @param {String} value 当前选中的颜色值。
			 * @example 相关Javascript代码：
			 * @example
		$("#colorpicker").colorpicker("selectedColor");
	    $("#colorpicker").colorpicker("selectedColor", "FF99FF");
			 */
	        selectedColor: function (value) {
	            var atags = this.element.find("a");
	            if (arguments.length == 0) {
	                return this._selectedColor == undefined ? "" : $(this._selectedColor).text();
	            } else {
	                for (var i = 0; i < atags.length; i++) {
	                    if ($(atags[i]).text() == value) {
	                        this._selectedColor = atags[i];
	                    }
	                }
	            }
	        }
	    });
	})(jQuery);

/***/ },
/* 13 */
/***/ function(module, exports) {

	//@author fqwu

	(function ($$, $) {
	    "use strict";
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.combobox = {
	            init: function (element, valueAccessor, allBindings, viewModel) {
	                var
	                    element = $(element),
	                    data = valueAccessor(),
	                    disabled = data.disabled,
	                    disabledObservable = ko.isObservable(disabled),
	                    selectedIndex = data.selectedIndex,
	                    selectedValue = data.selectedValue,
	                    selectedItem = data.selectedItem,
	                    isSelectedValueObservable = ko.isObservable(selectedValue),
	                    isSelectedItemObservable = ko.isSubscribable(selectedItem),
	                    value = ko.toJS(ko.unwrap(data)),
	                    c = value.viewModel.items.length,
	                    items = value.viewModel.items,
	                    executeEventHandler = $$.executeEventHandler,
	                    isEnabledChanged = value.isEnabledChanged,
	                    //selectionChanged事件的回调
	                    valueChanged = value.selectionChanged;
	                value.parameters = data.parameters || {};
	                value.viewModel = data.viewModel;

	                if (c > 0) {
	                    //如果初始化的时候有数据，利用下面的方式触发订阅
	                    value.viewModel.items.removeAll();
	                    element.combobox(value);
	                    element.combobox('itemsSource', items);
	                } else {
	                    element.combobox(value);
	                }

	                if (isSelectedValueObservable || isSelectedItemObservable) {
	                    element.on("selectionChanged", function (e, args) {
	                        if (isSelectedValueObservable) {
	                            selectedValue(args.newValue);
	                        }

	                        if (isSelectedItemObservable) {
	                            selectedItem(args.newValue.item);
	                        }
	                    });

	                    if (isSelectedValueObservable) {
	                        selectedValue.subscribe(function () {
	                            element.combobox("selectedValue", selectedValue());
	                        });
	                    }

	                    if (isSelectedItemObservable) {
	                        selectedItem.subscribe(function () {
	                            try {
	                                element.combobox("selectedItem", selectedItem());
	                            } catch (e) { };
	                        });
	                    }
	                }

	                if (disabledObservable) {
	                    element.combobox("option", "isEnabledChanged", function (e, args) {
	                        disabled(args.newValue);
	                        executeEventHandler(null, "isEnabledChanged", isEnabledChanged, e, args);
	                    });

	                    disabled.subscribe(function () {
	                        try {
	                            element.combobox("option", "disabled", disabled());
	                        } catch (e) {
	                        };
	                    });
	                }

	                return { 'controlsDescendantBindings': true };
	            }
	        };
	    }

	    var
	        //radiobutton的唯一标识
		    uuid = -1,
	        _constant = {
	            //combobox对应的样式
	            COMBOBOX_CLASS: "aui-combobox",
	            //combobox禁用时的样式
	            COMBOBOX_DISABLED_CLASS: "aui-combobox-disabled",
	            //input部件对应的样式
	            INPUT_CLASS: "aui-combobox-input",
	            //content部件对应的样式
	            CONTENT_CLASS: "aui-combobox-content",
	            //content部件禁用时的样式
	            CONTENT_DISABLED_CLASS: "aui-combobox-content-disabled",
	            //鼠标移入时触发
	            MOUSEENTER_CLASS: "aui-combobox-mouseenter",
	            //鼠标获得焦点的样式
	            FOCUSED_CLASS: "aui-combobox-focused",
	            //dropdown部件对应的样式
	            DROPDOWN_CLASS: "aui-combobox-dropdown",
	            //dropdown的图标
	            ICON_DROPDOWN: "fi-triangle-down-bs",
	            //popup部件的样式
	            POPUP_CLASS: "aui-combobox-popup",
	            //listbox的阳还是
	            LISTBOX_CLASS: "aui-combobox-listbox",
	            //可选项的样式
	            SELECTION_CLASS: "aui-combobox-selection",
	            //项的默认样式
	            SELECTION_ITEM_CLASS: "aui-combobox-selection-item",
	            //可选项内容的样式
	            SELECTION_CONTENT_CLASS: "aui-combobox-selection-content",
	            //group功能开启时可选项对应的样式
	            CONTENT_20_CLASS: "aui-combobox-selection-content-20",
	            //可选项鼠标移入状态的样式
	            SELECTION_MOUSEOVER_CLASS: "aui-combobox-selection-mouseover",
	            //可选项选中状态的样式
	            SELECTION_SELECTED_CLASS: "aui-combobox-selection-selected",
	            //组名对应的样式
	            GROUP_NAME_CLASS: 'aui-combobox-group-name',
	            //组分割线对应的样式：
	            GROUP_LINE_CLASS: 'aui-combobox-group-line',
	            CREATE_NEW_CLASS: 'aui-combobox-crate-new',
	            MESSAGE_CLASS: 'aui-combobox-message',
	            SELECTED_TEMPLATE_CLASS: 'aui-combobox-selected-template'
	        },
	        _lockStatus = {
	            //冻结selectionChanged事件的执行
	            freeze: 0,
	            //允许selectionChanged事件的执行
	            pass: 1,
	            //取消selectionChanged事件的执行
	            cancel: 2
	        };

	    $$.combobox = function (type) {
	        var value = null;
	        type = type.toLowerCase();
	        switch (type) {
	            case 'lockstatus':
	                value = $.extend(true, value, _lockStatus);
	                break;
	        }

	        return value;
	    };

	    $.widget("aui.combobox", {
	        $window: null,
	        //window对应的jQuery对象
	        //body对应的jQuery对象
	        $body: null,
	        //content部件对应的jQuery对象
	        $input: null,
	        //content区域对应的jQuery对象
	        $container: null,
	        //content部件对应的jQuery对象
	        //dropdown对应的jQuery对象
	        $dropdown: null,
	        //popup部件对应的jQuery对象
	        $popup: null,
	        //listbox对应的部件
	        $listbox: null,
	        //所有可选项对应的jQuery对象
	        $selection: null,
	        //可选项集合，数组的每一项是一个可选项对应的jQuery对象
	        $selections: [],
	        //所有groupname对应的jQuery对象
	        $groupNames: null,
	        //input部件的id
	        inputId: "aui-combobox-input-",
	        //listbox部件的id
	        listboxId: "aui-combobox-listbox-",
	        //选定项的Id
	        selectedId: "aui-combobox-selected-",
	        //popup部件的id
	        popupId: "aui-combobox-popup-",
	        //content区域的id  
	        contentContainerId: "aui-combobox-content-container-",
	        //提示区域的id
	        messageId: "aui-combobox-message-",
	        //获取或设置一个值，该值表示popup部件是否打开。
	        _isOpened: false,
	        //获取或设置一个值，该值表示选中区域是否使用模板，true表示使用
	        _isTemplate: false,
	        //可选项集合
	        _items: null,
	        //可选项区域的实际高度
	        _listboxHeight: 0,
	        //可选项区域的最大高度
	        _listboxMaxHeight: 0,
	        //当前选定项对应的数据
	        _newValue: { index: -1, item: {} },
	        //前一个选定项对应的数据
	        _oldValue: { index: -1, item: {} },
	        //可选项的数目
	        _selectionCount: 0,
	        //前一个选中项的序号
	        _oldSelectedIndex: -1,
	        options: {
	            //获取或设置create new区域的模板，只在控件初始化时有效。
	            createTemplate: null,
	            //获取或设置一个值，该值表示每个可选项显示的属性的名称，只在控件初始化时有效。
	            dataTextField: "",
	            //获取或设置一个值，该值表示每个可选项值的属性的名称。
	            dataValueField: "",
	            //获取或设置一个值，该值指示用户是否可以与控件交互。
	            disabled: false,
	            //获取或设置一个值，该值表示用来分组的属性名称，只在控件初始化时有效。
	            groupBy: "",
	            //获取或设置一个值，该值表示控件的高度
	            height: null,
	            //获取或设置一个值，该值表示可选项的模板，只在控件初始化时有效。
	            itemTemplate: null,
	            //获取或设置一个id，将id对应元素的文本，作为可识别的名称提供给用户。
	            labelledby: "",
	            //事件自定义参数,参数的名称与事件名称一一对应。
	            parameters: {},
	            //获取或设置一个值，该值表示popup的高度
	            popupHeight: "auto",
	            //获取或设置一个值，该值表示popup部件的最大高度，默认值200
	            popupMaxHeight: 300,
	            //获取或设置一个值，该值表示popup的宽度
	            popupWidth: "auto",
	            //获取或设置当前选择内容的索引。
	            selectedIndex: -1,
	            //获取或设置当前选择内容的值。
	            selectedValue: null,
	            //获取或设置当前选择内容对应的对象。
	            selectedItem: null,
	            //获取或设置一个值,该值表示选中项模板，只在初始化时设置有效。
	            selectedTemplate: null,
	            //获取或设置一个值，该值表示可选项的高度
	            selectionHeight: "auto",
	            //获取或设置一个值，该值表示，设置数据源时，是否触发selectionChanged事件
	            triggerDefaultChanged: true,
	            //获取或设置一个值，该值表示combobox没有选中时，显示的文字。
	            waterMark: $$.I18N.combobox.waterMark,
	            //获取或设置一个值，该值表示控件的宽度
	            width: 'auto',
	            hasFilter: false,
	            delay: 300,
	            viewModel: {

	            },
	            //获取或设置一个方法，该方法在可选项区域关闭时触发
	            hidden: $.noop,
	            //获取或设置一个方法，该方法在可选项集合变化时触发。（删除、添加一行，清空，排序,重新赋值都会触发）
	            itemsSourceChanged: $.noop,
	            //获取或设置一个方法，该方法在选中项更改时触发。
	            selectionChanged: $.noop,
	            //选中项正在更改时触发，该事件的返回值决定selectionChanged事件是否继续触发，true表示触发，反之不触发。
	            selectionChanging: $.noop,
	            //获取或设置一个方法，该方法在可选项区域（popup部件）打开时触发
	            shown: $.noop,
	            autoSort: true,
	            //排序断言
	            sortAssert: null,
	            //兼容旧版本combobox,在aui.timezone.js中的自定义绑定（_combobox）使用，西版本使用viewModule代替。
	            itemsSource: null
	        },
	        _create: function () {
	            this._initMembers()
	                ._createCombobox()
	                ._loaded()
	                ._initEvent()
	                ._applyBinding();
	        },
	        //初始化成员
	        _initMembers: function () {
	            var
	                self = this,
	                itemsSource = self.options.itemsSource;
	            ++uuid;

	            this._changingTimer = null;

	            this._groups = {};
	            this.$groupNames = [];
	            this._autoSort = self.options.autoSort;
	            this._delay = this.options.delay;

	            self._initId();

	            self._isTemplate = false;
	            this._hasFilter = self.options.hasFilter;
	            if (this.options.selectedTemplate) {
	                this._hasFilter = false;
	            }

	            self._groupBy = self.options.groupBy.split(" ");

	            self._firstProperty = self._groupBy[1];
	            self._groupBy = self._groupBy[0]

	            self.element
	                .addClass(_constant.COMBOBOX_CLASS);
	            //window对应的jQuery对象
	            self.$window = $(window);
	            //body对应的jQuery对象
	            self.$body = $("body");

	            if (!ko.isObservable(self.options.viewModel.items)) {
	                self.options.viewModel.items = ko.observableArray();
	            }
	            self.options.viewModel.selectedItems = ko.observableArray();

	            self._items = self.options.viewModel.items;
	            self._items.subscribe(self._onVmChanged, {
	                self: self
	            });

	            return self;
	        },
	        _initId: function () {
	            this.inputId += uuid;
	            this.listboxId += uuid;
	            this.selectedId += uuid;
	            this.popupId += uuid;
	            this.contentContainerId += uuid;
	            this.messageId += uuid;
	        },
	        //创建combobox
	        _createCombobox: function () {
	            var self = this;

	            self.element.html(self._createContent() + self._createDropdown());

	            self.$body.append(self._createPopup());

	            return self;
	        },
	        //创建content部件
	        _createContent: function () {
	            var
	                self = this,
	                h = -1,
	                contentClass = _constant.CONTENT_CLASS,
	                html = [];

	            html[++h] = '<input id="' + self.inputId + '" placeholder="' + this.options.waterMark + '" class="' + _constant.INPUT_CLASS + '" autocomplete="off" role="combobox" aria-haspopup="true" aria-expanded="false" aria-autocomplete="list" wrap="off"  aria-activedescendant="" />';

	            //content
	            html[++h] = '<div id="' + self.contentContainerId + '" class="aui-combobox-content-container" data-bind="stopBindings:combobox">';

	            if (typeof self.options.selectedTemplate == "string") {
	                html[++h] = '<div class="' + _constant.SELECTED_TEMPLATE_CLASS + '" data-bind="foreach:selectedItems">';
	                html[++h] = self.options.selectedTemplate;
	                html[++h] = '</div>';

	                self._isTemplate = true;
	            }

	            //end content
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        //创建dropdown部件
	        _createDropdown: function () {
	            return '<div unselectable="on" class="' + _constant.DROPDOWN_CLASS + ' ' + _constant.ICON_DROPDOWN + '" ></div>';
	        },
	        //创建popup部件
	        _createPopup: function () {
	            var
	                self = this,
	                h = -1,
	                createTemplate = self.options.createTemplate,
	                contentClass = _constant.SELECTION_CONTENT_CLASS,
	                name = self._groupBy,
	                html = [];

	            name != "" && (contentClass += " " + _constant.CONTENT_20_CLASS);


	            html[++h] = '<div data-bind="stopBindings:combobox">';
	            //popup
	            html[++h] = '<div class="' + _constant.POPUP_CLASS + '" id="' + self.popupId + '">';

	            //选中项
	            html[++h] = '<div id="' + this.messageId + '" class="' + _constant.MESSAGE_CLASS + '">' + $$.I18N.combobox.noMatches + '</div>';

	            if (createTemplate != null) {
	                html[++h] = '<div class="' + _constant.CREATE_NEW_CLASS + '">';
	                html[++h] = createTemplate;
	                html[++h] = '</div>';
	            }
	            html[++h] = '<div class="' + _constant.LISTBOX_CLASS + '" id="' + self.listboxId + '" role="listbox" data-bind="foreach:items">';

	            if (name != "") {
	                html[++h] = '<div class="' + _constant.SELECTION_CLASS + '" role="option"  data-bind="attr:{\'data-group\':' + name + ',index:$index,\'aria-span\':' + self.options.dataTextField + ' }">';
	            } else {
	                html[++h] = '<div class="' + _constant.SELECTION_CLASS + '" role="option"  data-bind="attr:{index:$index,\'aria-span\':' + self.options.dataTextField + ' }">';
	            }

	            if (self.options.itemTemplate == null) {
	                html[++h] = self._getDefaultTemplate(contentClass);
	            } else {
	                html[++h] = self.options.itemTemplate;
	            }
	            html[++h] = '</div>';

	            html[++h] = '</div>';

	            html[++h] = '</div>';

	            html[++h] = '</div>';


	            return html.join('');
	        },
	        _getDefaultTemplate: function (contentClass) {
	            var
	                self = this,
	                html = [],
	                h = -1;

	            html[++h] = '<div class="' + _constant.SELECTION_ITEM_CLASS + '">';
	            html[++h] = '<span class="' + contentClass + '" data-bind="text:' + self.options.dataTextField + '"></span>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        //部件创建成功后触发
	        _loaded: function () {
	            var
	                self = this,
	                element = self.element,
	                itemsSource = self.options.itemsSource,
	                options = self.options;

	            self.$container = element.children('#' + self.contentContainerId).hide();
	            self.$template = $(self.$container.children()[0]);

	            self.$input = element.children('#' + self.inputId);

	            if (self.options.labelledby != "") {
	                self.$input.attr("aria-labelledby", self.options.labelledby);
	            }
	            if (options.height) {
	                self._setHeight(options.height);
	            }

	            self.$input
	                .attr("role", "combobox")
	                .prop("readonly", !self._hasFilter)
	                .attr("aria-readonly", !self._hasFilter)
	                .attr("aria-expanded", false);


	            //self._setWatermark(self.options.waterMark);

	            self.$dropdown = element.children('div[class~="' + _constant.DROPDOWN_CLASS + '"]');

	            self.$popup = self.$body.find("#" + self.popupId);
	            self.$message = self.$popup.children("#" + self.messageId);
	            self.$listbox = self.$popup.children("#" + self.listboxId);

	            //设置宽度
	            if (options.width == null) {
	                options.width = 150;
	            } else {
	                self._setWidth(options.width);
	            }

	            if (options.popupMaxHeight != "auto") {
	                self._setPopupMaxHeight(options.popupMaxHeight);
	            }

	            if (options.popupHeight != "auto") {
	                self._setPopupHeight(options.popupHeight);
	            }

	            self._updatePopupPosition();

	            self.$createNew = self.$popup.children('div[class="' + _constant.CREATE_NEW_CLASS + '"]');
	            self.$createNew
	                .on("click", self, self._onCreateNewClick)
	                .on("mousedown", self._onCreateNewMouseDown);

	            if (options.disabled === true) {
	                self._setDisabled(false, options.disabled);
	            }

	            if ($.isArray(itemsSource) && itemsSource.length > 0) {
	                self.options.viewModel.items(ko.mapping.fromJS(itemsSource)());
	            }

	            return this;

	        },
	        _onCreateNewClick: function (e) {
	            e.data._hide();
	        },
	        _onCreateNewMouseDown: function (e) {
	            e.stopPropagation();
	            e.preventDefault();
	        },
	        /**
	         * 获取或设置一个值，该值指示用户是否可以与控件交互
	         * @param {boolean} value 可用性，true表示控件禁用
	         */
	        disabled: function (value) {
	            var self = this;

	            if (value != null) {
	                self._setOption("disabled", value);
	            } else {
	                return self.options.disabled;
	            }
	        },
	        /**
	         * 设置控件的可用性
	         * @param {boolean} old 变化之前的值
	         * @param {boolean} disabled 可用性，true表示控件禁用
	         */
	        _setDisabled: function (old, disabled) {
	            var self = this;
	            self.$input.prop("disabled", disabled);
	            if (disabled === false) {
	                self.$container.removeClass(_constant.CONTENT_DISABLED_CLASS);
	                self.element.removeClass(_constant.COMBOBOX_DISABLED_CLASS);
	            } else {
	                self.$container.addClass(_constant.CONTENT_DISABLED_CLASS);
	                self.element.addClass(_constant.COMBOBOX_DISABLED_CLASS);
	            }

	            if (old != disabled) {
	                $$.executeEventHandler(self, "isEnabledChanged", self.options.isEnabledChanged, null, $$.Event({
	                    element: self.element,
	                    oldValue: old,
	                    newValue: disabled
	                }));
	            }
	        },
	        // 注册事件
	        _initEvent: function () {
	            var self = this;
	            self.$window.on("resize", self, self._onWindowResize);
	            self.element.on('mousedown', self, self._onElementMousedown);
	            self.element.on('mouseup', self, self._onElementMouseup);

	            self.$input
	                .on("mouseenter", self, self._onContentMouseEnter)
	                .on("mouseleave", self, self._onContentMouseLeave)
	                .on("keydown", self, self._onContentKeydown)
	                .on("focus", self, self._onInputFocus)
	                .on("blur", self, self._onInputBlur);

	            self.$dropdown
	                .on("mouseenter", self, self._onContentMouseEnter)
	                .on("mouseleave", self, self._onContentMouseLeave);

	            self.$container
	                .on("mouseenter", self, self._onContentMouseEnter)
	                .on("mouseleave", self, self._onContentMouseLeave);

	            self.$listbox
	                .on("keydown", self, self._onListboxKeydown)
	                .on("mousedown", self, self._onselectionMouseDown)
	                .on("mousewheel", self, self._onselectionMousewheel);

	            $$.close(self.element, "combobox", "hide");
	            return this;
	        },
	        _onElementMousedown: function (e) {
	            var self = e.data;

	            $$.closeExcept(self.element, true);
	            self._isContentMouseDown = true;
	            self.$input.focus();
	            if (self.options.disabled === false) {
	                if (self._isOpened) {
	                    self._hide();
	                } else {
	                    self._show();
	                }
	            }
	        },
	        _onElementMouseup: function (e) {
	            e.data._isContentMouseDown = false;
	        },
	        _onselectionMousewheel: function (e) {
	            var
	                self = e.data,
	                delta = 1;
	            e.preventDefault();
	            if (e.deltaY > 0) {
	                delta = -1
	            }
	            self.$listbox.scrollTop(self.$listbox.scrollTop() + delta * 60);
	            $$.closeExcept(self.element, true);
	        },
	        //设置绑定
	        _applyBinding: function () {
	            var self = this;
	            ko.applyBindings(self.options.viewModel, self.$popup[0]);
	            if (self._isTemplate) {
	                ko.applyBindings(self.options.viewModel, self.$template[0]);
	            }
	        },
	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;

	            switch (key) {
	                case 'selectedIndex':
	                    self.selectedIndex(value);
	                    break;
	                case 'selectedItem':
	                    self.selectedItem(value);
	                    break;
	                case 'selectedValue':
	                    self.selectedValue(value);
	                    break;
	                case 'disabled':
	                    self._setDisabled(oldValue, value);
	                    break;
	                case 'width':
	                    self._setWidth(value);
	                    break;
	                case 'height':
	                    self._setHeight(value);
	                    break;
	                case 'popupWidth':
	                    self._setPopupWidth(value);
	                    break;
	                case 'popupHeight':
	                    self._setPopupHeight(value);
	                    break;
	                case 'popupMaxHeight':
	                    self._setPopupMaxHeight(value);
	                    break;
	                case 'selectionHeight':
	                    self._setSelectionHeight(value);
	                    break;
	                case 'waterMark':
	                    self._setWatermark(value);
	                    break;
	            }
	        },
	        //设置水印
	        _setWatermark: function (value) {
	            this.$input.attr("placeholder", value);
	        },
	        /**
	         * 设置控件的宽度（包括popup部件）
	         * @param {number} height 需要高度
	         */
	        _setWidth: function (width) {
	            var
	                self = this,
	                element = self.element;
	            element.width(width);
	            //self.$input.width(element.width() - 22);
	        },
	        /**
	         * 设置popup部件的宽度。
	         * @param {number} height 需要高度
	         * @param {boolean} isLoaded 是否是初始化时
	         */
	        _setPopupWidth: function () {
	            var width = this.options.popupWidth;

	            width = $.isNumeric(width) ? width : this.element.width();

	            this.$popup.width(width);
	        },
	        /**
	         * 设置popup部件的高度。
	         * @param {number} 需要设置的高度
	         */
	        _setPopupHeight: function (height) {
	            var
	                self = this,
	                maxHeight = self.options.popupMaxHeight;
	            height = height > maxHeight ? maxHeight : height;
	            self.$popup.height(height);
	            if (self.options.createTemplate != null) {
	                height -= 24;
	            }
	            self.$listbox.height(height);
	        },
	        /**
	         * 设置popup部件的最大高度。
	         * @param {number} height 需要设置的高度
	         */
	        _setPopupMaxHeight: function (height) {
	            var self = this;
	            self.$popup.css("max-height", height);
	            if (self.options.createTemplate != null) {
	                height -= 42;
	            }
	            self._listboxMaxHeight = height;
	            self.$listbox.css("max-height", height);
	        },
	        _setSelectionHeight: function (height) {
	            this.$selection.height(height);
	        },
	        /**
	         * 设置控件的高度
	         * @param {number} height 需要高度
	         */
	        _setHeight: function (height) {
	            var self = this;
	            self.element.height(height);
	        },
	        //content 鼠标移入时触发
	        _onContentMouseEnter: function (e) {
	            var self = e.data;
	            if (self.options.disabled === false) {
	                e.data.element.addClass(_constant.MOUSEENTER_CLASS);
	            }
	        },
	        //content 鼠标移出时触发
	        _onContentMouseLeave: function (e) {
	            var self = e.data;
	            self.element.removeClass(_constant.MOUSEENTER_CLASS);
	            self._isContentMouseDown = false;
	        },
	        //listbox部件键盘按下时触发
	        _onListboxKeydown: function (e) {
	            var self = e.data;

	            if (e.which == $.ui.keyCode.TAB || e.which == $.ui.keyCode.ESCAPE) {
	                e.preventDefault();
	                self._hide();
	                self.$input.focus();
	            } else if (e.which == 8) {
	                e.preventDefault();
	            } else {
	                if (e.which == $.ui.keyCode.UP || e.which == $.ui.keyCode.DOWN || e.which == $.ui.keyCode.ENTER) {
	                    self._isListboxKeydown = true;
	                } else {
	                    self._isListboxKeydown = false;
	                }
	                self._onContentKeydown(e)
	            }
	        },
	        //element 键盘按下时触发
	        _onContentKeydown: function (e) {
	            var self = e.data;

	            if (self.options.disabled === false) {

	                if (self._hasFilter) {
	                    if ((e.which == 229) || (e.which == 32) || (e.which == 8) || (e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90) || (e.which >= 96 && e.which <= 111) || (e.which >= 186 && e.which <= 192) || (e.which >= 219 && e.which <= 222)) {

	                        self._startTimer(self._delay);
	                        if (e.which == 8 && self.$input.val() == '') {
	                            e.preventDefault();
	                        }
	                    }
	                } else {
	                    if (e.which == 8) {
	                        e.preventDefault();
	                    }
	                }

	                //self.$input.focus();
	                switch (e.which) {
	                    case $.ui.keyCode.ENTER:
	                        self._onElementEnter();
	                        break;
	                    case $.ui.keyCode.LEFT:
	                    case $.ui.keyCode.RIGHT:
	                        e.preventDefault();
	                        break;
	                    case $.ui.keyCode.DOWN:
	                        e.preventDefault();
	                        self._selectedNext();
	                        break;
	                    case $.ui.keyCode.UP:
	                        e.preventDefault();
	                        self._selectedLast();
	                        break;
	                }
	            }
	        },

	        /**
	         * 启动定时器
	         * @method _startTimer
	         * @param {Number} delay 延迟时间
	         */
	        _startTimer: function (delay) {
	            var self = this;
	            self._clearTimer();
	            self._timer = setInterval(function () {
	                self._onTimer(self);
	            }, delay);
	        },
	        /**
	         * 关闭定时器
	         * @method _clearTimer
	         */
	        _clearTimer: function () {
	            if (this._timer != null) {
	                clearInterval(this._timer);
	            }
	        },
	        /**
	         * 过滤可选区域
	         * @method _onTimer
	         */
	        _onTimer: function (self) {
	            self._clearTimer();
	            self._filterSelection();

	        },
	        /**
	         * 获取比较条件
	         * @method _getFilterCondition
	         * @private
	         */
	        _getFilterCondition: function () {
	            var value = '';

	            if (!this._isCaseSensitive) {
	                value = this.$input.val().toLowerCase();
	            } else {
	                value = this.$input.val();
	            }

	            return value;
	        },
	        /**
	         * 过滤可选项
	         * @method _filterSelection
	         * @private
	         */
	        _filterSelection: function () {
	            var
	            self = this,
	            //filter项的序号
	            i = 0,
	            //符合过滤条件的项的个数
	            j = 0,
	            //
	            condition = self._getFilterCondition();

	            self._firstIndex = -1;
	            this._isFilter = true;

	            if (!!self._groupBy) {
	                for (var p in self._groups) {
	                    self._groups[p].count = self._groups[p].total;
	                }
	            }

	            //过滤
	            ko.utils.arrayForEach(self._items(), function (item) {
	                var o = self._getDisplayName(item);
	                self.$selections[i].show();
	                if (o.indexOf(condition) == -1) {
	                    //隐藏不符合条件的项
	                    self.$selections[i].hide();
	                    if (!!self._groupBy) {
	                        self._groups[self.$selections[i].data('group')].count--;
	                    }
	                } else {
	                    j++;
	                    if (self._firstIndex == -1) {
	                        self._firstIndex = i;
	                    }
	                }
	                i++;
	            });
	            if (!!self._groupBy) {
	                for (var p in self._groups) {
	                    var group = self._groups[p];
	                    if (group.count == 0) {
	                        group.ele && group.ele.hide();
	                        group.line && group.line.hide();
	                    } else {
	                        group.ele && group.ele.show();
	                        group.line && group.line.show();
	                    }
	                }
	            }

	            //如果选择区域没显示，显示该区域
	            if (this.$popup.is(':hidden')) {
	                this._show();
	            } else {
	                if (self.$selection) {
	                    self.$selection.width(self._getSelectionWidth());
	                }
	                this._updatePopupPosition();
	            }

	            //搜索不到时，显示提示
	            if (j == 0) {
	                this.$message.show();
	            } else {
	                this.$message.hide();
	            }

	            if (this._firstIndex != -1) {
	                this.options.selectedIndex = this._firstIndex;
	                this.options.selectedValue = this._items()[this._firstIndex][this.options.dataValueField]();
	                this._setSelectedIndex(this._firstIndex);
	            }

	            this.$input.focus();
	        },
	        _getDisplayName: function (item) {
	            var
	            //
	            value,
	            //
	            name = this.options.dataTextField;
	            if (!this._isCaseSensitive) {
	                value = item[name]().toLowerCase();
	            } else {
	                value = item[name]();
	            }

	            return value;
	        },
	        //选择上一个可选项
	        _selectedLast: function () {
	            var
	                self = this,
	                max = self._selectionCount,
	                pro = self.options.dataValueField,
	                index = self.options.selectedIndex - 1;

	            index = self._getNextIndex(false, self.options.selectedIndex);

	            if (index >= 0) {
	                self.options.selectedIndex = index;
	                self.options.selectedValue = self._items()[index][pro]();
	                self._setSelectedIndex(index);
	            }
	        },
	        //选择下一个可选项
	        _selectedNext: function () {
	            var
	                self = this,
	                max = self._selectionCount,
	                pro = self.options.dataValueField,
	                index;

	            index = self._getNextIndex(true, self.options.selectedIndex);

	            if (index < max) {
	                self.options.selectedIndex = index;
	                self.options.selectedValue = self._items()[index][pro]();
	                self._setSelectedIndex(index);
	            }
	        },
	        _getNextIndex: function (isAdd, oldIndex) {
	            var
	                self = this,
	                index = -1,
	                selections = this.$selections;
	            if (isAdd) {
	                index = ++oldIndex < selections.length - 1 ? oldIndex : selections.length - 1;
	            } else {
	                index = --oldIndex > 0 ? oldIndex : 0;
	            }
	            if (this.$popup.is(':visible') && this.$selections[index].is(':hidden')) {
	                if (index > self._firstIndex) {
	                    index = self._getNextIndex(isAdd, index);
	                } else {
	                    index = self._firstIndex;
	                }

	            }

	            return index;
	        },
	        //element 键盘按下enter时触发
	        _onElementEnter: function () {
	            var self = this;
	            if (self._isOpened) {
	                self._hide();
	            } else {
	                self._show();
	            }
	        },
	        /**
	         * 将指定数据插入到可选项的指定位置。
	         * @paran {number} index 插入的位置（大于-1，小于最大长度） 
	         * @param {object} item 插入项
	         */
	        insert: function (index, item) {
	            var
	                self = this,
	                c = self._selectionCount;
	            if (index > -1 && index <= c) {
	                item = ko.mapping.fromJS(item);
	                self._items.splice(index, 0, item);
	            }
	        },
	        /**
	         * 将特定集合插入到可选项集合的特定位置。
	         * @param {array} items 待插入的集合
	         * @param {number} index 插入的位置
	         */
	        addItems: function (items, index) {
	            var
	                self = this,
	                index = index || 0,
	                c = self._selectionCount;
	            if (index > -1 && index <= c) {
	                items = ko.mapping.fromJS(items)();
	                //self._items().splice(index, 0, item);
	                items.splice(0, 0, index, 0);
	                ko.observableArray.fn.splice.apply(self._items, items);
	            }
	        },
	        //清楚所有可选项
	        removeAll: function () {
	            this._items.removeAll();
	        },
	        getListBoxId: function () {
	            return this.listboxId;
	        },
	        //销毁
	        _destroy: function () {
	            $$.offClose(this.element);
	            this.element.off();
	            this.$selection = null;
	            this.options.selectedIndex = -1;
	            this.$popup.parent().remove();
	            this._trigger("destroy", null, $$.Event({
	                element: this.element
	            }));
	        }
	    });

	    //选定项的相关逻辑
	    $.extend($.aui.combobox.prototype, {
	        _setSelectedIndex: function (index, isItemsChanged) {
	            if (this.$selection) {
	                if (index >= -1 && index < this._selectionCount) {
	                    //this.$selection为null时，表示dom没有初始化完成
	                    this.$selection
	                        .removeAttr("tabindex")
	                        .removeAttr("id")
	                        .removeClass(_constant.SELECTION_SELECTED_CLASS);
	                    if (index > -1) {
	                        if (this.$selections[index]) {
	                            this.$selections[index]
	                                .attr("tabindex", 0)
	                                .attr("id", this.selectedId)
	                                .addClass(_constant.SELECTION_SELECTED_CLASS)
	                            if (!this._forzenFocus) {
	                                if (!this._isFilter) {
	                                    this.$selections[index].focus();
	                                } else {
	                                    this._isFilter = false;
	                                }
	                            }
	                        }
	                    } else {
	                        this.$container.hide();
	                    }

	                    //可选区域只在关闭时改变selected，触发事件
	                    if (!this._isOpened) {
	                        this._onSelectionChanging(index, isItemsChanged);
	                    }
	                } else {
	                    $.error('The selected index ' + index + ' was outside the bounds of the options.');
	                }
	            }
	        },
	        _onSelectionChanged: function (index, oldValue, newValue, isItemsChanged) {
	            this.options.selectedItem = newValue.item;
	            this._oldSelectedIndex = index;
	            this.options.selectedIndex = index;
	            this.options.selectedValue = newValue.value;

	            this.$input.val(newValue.item[this.options.dataTextField]);
	            //更新模板的数据源
	            if (this._isTemplate) {
	                this.$container.show();
	                this.options.viewModel.selectedItems(newValue.item);
	            }
	            if (this.options.triggerDefaultChanged || !isItemsChanged) {
	                this._trigger("selectionChanged", null, $$.Event({
	                    element: this.element,
	                    oldValue: oldValue,
	                    newValue: newValue
	                }));
	            }
	        },
	        //选定项变化时触发
	        _onSelectionChanging: function (index, isItemsChanged) {
	            var
	                self = this,
	                oldIndex = this._oldSelectedIndex,
	                field = self.options.dataValueField,
	                oldValue = { index: -1, item: {}, value: null },
	                newValue = { index: -1, item: {}, value: null };

	            clearInterval(this._changingTimer);
	            if (this._oldSelectedIndex != index) {
	                this._isSelectionChanging = true;

	                this._oldValue = oldValue = oldIndex == -1 ? oldValue : {
	                    index: oldIndex,
	                    item: ko.mapping.toJS(self._items()[oldIndex] || {})
	                };
	                self._oldValue.value = self._oldValue.item[field];

	                self._newValue = newValue = index == -1 ? newValue : {
	                    index: index,
	                    item: ko.mapping.toJS(self._items()[index])
	                };
	                self._newValue.value = self._newValue.item[field];

	                this._trigger("selectionChanging", null, $$.Event({
	                    element: this.element,
	                    oldValue: oldValue,
	                    newValue: newValue
	                }));

	                if (!this._isSelectionChanging) {
	                    this._lock = _lockStatus.pass;
	                }

	                if (this._lock == _lockStatus.freeze) {
	                    this._changingTimer = setInterval(function () {
	                        if (self._lock > 0) {
	                            clearInterval(self._changingTimer);
	                            if (self._lock == _lockStatus.pass) {
	                                self._onSelectionChanged(index, oldValue, newValue);
	                            }
	                        }
	                    }, 150);
	                } else {
	                    this._onSelectionChanged(index, oldValue, newValue, isItemsChanged);
	                }
	            }
	        },
	        /**
	         * 获取或设置一个值，该值表示选中项的序号。
	         * @param {number} index 选中项的序号 
	         */
	        selectedIndex: function (index) {
	            var self = this;
	            if ($.isNumeric(index)) {
	                self.options.selectedIndex = index;
	                self._setSelectedIndex(index);

	            } else {
	                return self.options.selectedIndex;
	            }
	        },
	        /**
	         * 获取或设置选中项。
	         * @param {object} selected 选中项 
	         */
	        selectedItem: function (selected) {
	            var
	                self = this,
	                pro = self.options.dataValueField;
	            self.options.selectedItem = selected;

	            if (arguments.length == 0) {
	                //获取
	                return self._newValue.item;
	            } else {
	                if ($$.isObject(selected)) {
	                    self.selectedValue(selected[pro]);
	                } else if (selected === null) {
	                    self.selectedValue(null);
	                }

	            }
	        },
	        /**
	         * 获取或设置选定值(如果有重复，选择第一个出现的)
	         * @param {string} value 需要选定的值
	         */
	        selectedValue: function (value) {
	            var
	                index = -1,
	                isBreak = false;
	            if (arguments.length == 0) {
	                //获取
	                return this._newValue.item[this.options.dataValueField];
	            } else {
	                if (this._newValue.value != value) {
	                    this.options.selectedValue = value;
	                    this.options.selectedIndex = -1;
	                    index = this._getIndexByValue(value);
	                    this._forzenFocus = true;
	                    this._setSelectedIndex(index);
	                }
	            }
	        },
	        _getIndexByValue: function (value) {
	            var
	                i = 0,
	                index = -1,
	                items = this._items(),
	                pro = this.options.dataValueField,
	                c = items.length;

	            for (; i < c; i++) {
	                var
	                    item = items[i],
	                    cur;
	                cur = ko.isObservable(item[pro]) ? item[pro]() : item[pro];

	                if (cur === value) {
	                    index = i;
	                    break;
	                }
	            }
	            return index;
	        }
	    });

	    //可选项相关逻辑
	    $.extend($.aui.combobox.prototype, {
	        //获取selection部件的宽度
	        _getSelectionWidth: function () {
	            var
	                self = this,
	                width,
	                selection = self.$selection,
	                options = self.options;

	            if (this.$popup.is(':hidden')) {
	                this.$popup.show();
	                this._setPopupWidth();
	            }

	            self.$selection.width("auto");
	            width = self.$selection.filter(":visible").width();

	            self.$listbox.scrollLeft(1000000000);
	            return width += self.$listbox.scrollLeft();
	        },
	        _onVmChanged: function () {
	            var
	                self = this.self,
	                options = self.options,
	                width,
	                i = 0,
	                name = self.namespace,
	                //定时器
	                vmTimer = null,
	                c = self._items().length;
	            self._selectionCount = c;

	            self.$popup.css("opacity", 0);

	            vmTimer = setInterval(function () {
	                var event = $.Event(), index;
	                clearInterval(vmTimer);
	                if (c > 0) {
	                    if (self.$selection instanceof $) {
	                        self.$selection.off(name);
	                    }

	                    self.$selection = self.$listbox.children('div[class~="' + _constant.SELECTION_CLASS + '"]');

	                    self.$selections = [];
	                    for (; i < c; i++) {
	                        self.$selections[i] = $(self.$selection[i]);
	                    }
	                    if (self._groupBy != "" && c != 0) {
	                        self._updateGroupName();
	                    }
	                    width = self._getSelectionWidth();

	                    self.$selection
	                        .width(width)
	                        .css("font-weight", "normal")
	                        .off(name)
	                        .on("mousedown", self, self._onselectionMouseDown)
	                        .on("mouseup", self, self._onSelectionClick)
	                        .on("mouseover", self, self._onselectionMouseOver)
	                        .on("mouseout", self, self._onselectionMouseOut)
	                        .on("blur", self, self._onSelectionBlur);

	                    if (options.selectionHeight != "auto") {
	                        self._setSelectionHeight(options.selectionHeight);
	                    }
	                    index = self._getDefaultSelectedIndex();

	                    if (index > -1) {
	                        self._setSelectedIndex(index, true);
	                    }

	                }

	                self.$popup.show().width(self.element.width());

	                self._listboxHeight = self.$listbox.height();
	                self.$listbox.scrollLeft(0);
	                self.$popup.hide();
	                self.$popup.css("opacity", 1);

	                self._trigger("itemsSourceChanged", event, $$.Event({
	                    element: self.element,
	                    newValue: self._convertItems()
	                }));
	            });
	        },
	        _getDefaultSelectedIndex: function () {
	            var
	                index = -1,
	                value;
	            if (this.options.selectedItem != null) {
	                value = this.options.selectedItem[this.options.dataValueField];
	            } else if (value == undefined) {
	                value = this.options.selectedValue;
	            }

	            if (value != undefined) {
	                index = this._getIndexByValue(value);
	            }

	            if (index == -1) {
	                index = this.options.selectedIndex;
	            }

	            return index;
	        },
	        _convertItems: function () {
	            var
	                i = 0,
	                items = ko.mapping.toJS(this._items),
	                c = items.length;

	            for (; i < c; i++) {
	                delete items[i][this._firstProperty];
	            }

	            return items;
	        },
	        _emptyGroup: function () {
	            var
	                p,
	                groups = this._groups;

	            for (p in this._groups) {
	                groups[p].ele.remove();
	                if (groups[p].line) {
	                    groups[p].line.remove();
	                }
	            }
	        },
	        //更新group name的显示隐藏和布局
	        _updateGroupName: function () {
	            var
	                self = this,
	                name = self._groupBy,
	                first = self._firstProperty,
	                items = self._items(),
	                distance = 0,
	                i = 0,
	                c = items.length,
	                lastValue = null,
	                value;

	            self._groups = {};

	            for (; i < c; i++) {
	                var item = items[i];
	                value = item[name]();
	                //如果与lastValue不等，代表是新组的第一个元素
	                if (value !== lastValue) {
	                    self._groups[value] = { total: 0 };
	                    if (lastValue != null) {
	                        self._groups[lastValue].line = $('<div class="' + _constant.GROUP_LINE_CLASS + '"></div>');
	                        self.$selections[i - 1].after(self._groups[lastValue].line);
	                    }
	                    lastValue = value;
	                    distance += 24;

	                    if (first) {
	                        item[first](true);
	                    } else {
	                        self._groups[value].ele = $('<div class="' + _constant.GROUP_NAME_CLASS + '" >' + items[i][name]() + '</div>');
	                        self.$selections[i].before(self._groups[value].ele);
	                    }

	                }
	                self._groups[value].total++;
	                self.$selections[i].data("distance", distance);
	            }

	        },
	        //selection鼠标按下时触发
	        _onselectionMouseDown: function (e) {
	            e.stopPropagation();
	            e.preventDefault();
	        },
	        //selection鼠标弹起时触发
	        _onSelectionClick: function (e) {
	            var self = e.data;
	            self.options.selectedIndex = this.getAttribute("index") - 0;
	            self._hide();
	        },
	        //可选项鼠标移入时触发
	        _onselectionMouseOver: function (e) {
	            e.stopPropagation();
	            e.data.$selections[this.getAttribute("index")].addClass(_constant.SELECTION_MOUSEOVER_CLASS);
	        },
	        //可选项失去焦点时触发
	        _onSelectionBlur: function (e) {
	            var self = e.data;
	            var $active = $(document.activeElement);

	            if (self._isOpened == true && !self._isContentMouseDown && self.options.selectedIndex == this.getAttribute("index") && $active.attr("id") != self.inputId && $active.attr("id") != self.listboxId && !self._isListboxKeydown) {
	                self.element.removeClass(_constant.FOCUSED_CLASS);
	                self._hide();
	            } else {
	                self._isListboxKeydown = false;
	            }
	        },
	        //可选项鼠标移出时触发
	        _onselectionMouseOut: function (e) {
	            e.stopPropagation();
	            e.data.$selections[this.getAttribute("index")].removeClass(_constant.SELECTION_MOUSEOVER_CLASS);
	        },
	        /**
	         * 获取搜索条件。
	         * @method getSearchCondition
	         */
	        getSearchCondition: function () {
	            return this.$input.val();
	        },
	        setLock: function (value) {
	            this._lock = value;
	        },
	        /**
	         * 获取或设置可选项集合
	         * @param {array} source 需要设置的可选项集合。
	         */
	        itemsSource: function (source) {
	            var
	                self = this,
	                items,
	                name = self._groupBy,
	                first = self._firstProperty,
	                c;
	            this._emptyGroup();
	            this._oldSelectedIndex = -1;
	            this.$input.val('');
	            this.$selection = null;

	            if (source === undefined) {
	                //获取控件的数据源
	                return ko.mapping.toJS(self._items);
	            } else {
	                self.options.itemsSource = source;
	                items = ko.mapping.fromJS(source);
	                c = source.length;

	                if (self._autoSort) {
	                    if ($.isFunction(self.options.sortAssert)) {
	                        items.sort(self.options.sortAssert);
	                    } else if (!!name) {
	                        items.sort(function (left, right) {
	                            var x = name;
	                            if (x in left) {
	                                return left[x]() == right[x]() ? 0 : (left[x]() < right[x]() ? -1 : 1);
	                            } else {
	                                $.error('Can not read property "' + x + '" of source. Please reset "groupBy" property at combobox initialize.');
	                            }
	                        });
	                    }
	                }
	                items = items();
	                if (!!name) {
	                    if (self._firstProperty) {
	                        for (var i = 0; i < c; i++) {
	                            items[i][first] = ko.observable(false);
	                        }
	                    }
	                }


	                self._items(items);
	            }
	        }
	    });

	    //popup部件打开，关闭，定位的相关逻辑
	    $.extend($.aui.combobox.prototype, {
	        //更新popup部件的位置
	        _updatePopupPosition: function () {
	            var
	                self = this,
	                my = "left top+";
	            my = my + self.element.height();
	            self.$popup.css({ top: 0 });
	            self.$popup.position({
	                my: my,
	                at: "left top+2",
	                of: self.element,
	                collision: "flipfit flipfit",
	                within: self.options.within
	            });
	        },
	        //窗体大小改变时触发
	        _onWindowResize: function (e) {
	            var self = e.data;
	            self._updatePopupPosition();
	            self.$popup.hide();
	        },
	        _onInputFocus: function (e) {
	            e.data.element.addClass(_constant.FOCUSED_CLASS);
	        },
	        //element失去焦点时触发
	        _onInputBlur: function (e) {
	            var
	                self = e.data,
	                timer;
	            if (!self._isContentMouseDown) {
	                if (self._isOpened == false) {
	                    self.element.removeClass(_constant.FOCUSED_CLASS);
	                } else {
	                    timer = setInterval(function () {
	                        clearInterval(timer);
	                        var $active = $(document.activeElement);
	                        //焦点元素不是可选项，不是listbox，不是grid
	                        if (!$active.hasClass(_constant.SELECTION_CLASS) && !$active.hasClass(_constant.LISTBOX_CLASS) && self._isOpened == true && $active.attr("role") != "gridcell") {
	                            self._hide();
	                        }
	                    });
	                }
	            }
	        },
	        //打开popup部件
	        _show: function () {
	            var
	                self = this,
	                index = self.options.selectedIndex,
	                pWidth;

	            self._isOpened = true;
	            $$.closeVisibility(self.element, true);

	            this.$popup.show();
	            this._setPopupWidth();
	            self._updatePopupPosition();
	            if (self.$selection) {
	                self.$selection.width(self._getSelectionWidth());
	            }
	            self.$listbox.scrollLeft(0);
	            self.$listbox.scrollTop(0);
	            self.$input.attr("aria-expanded", true).focus();

	            this._setSelectedIndex(index);

	            self._trigger("shown", null, $$.Event({
	                element: self.element,
	                oldValue: self._oldValue,
	                newValue: self._newValue
	            }));

	            return self;
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            if (args) {
	                args.parameters = self.options.parameters[type] || {};
	                args.type = "combobox";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        //关闭popup部件
	        _hide: function () {
	            var self = this;
	            self._isOpened = false;
	            $$.closeVisibility(self.element, false);
	            self.$input.attr("aria-expanded", false).focus();
	            self.$popup.hide();
	            self._onSelectionChanging(self.options.selectedIndex);

	            self._trigger("hidden", null, $$.Event({
	                element: self.element,
	                oldValue: self._oldValue,
	                newValue: self._newValue
	            }));

	            return self;
	        },
	        //展开可选项区域
	        show: function () {
	            var self = this;

	            if (!self._isOpened) {
	                self._show();
	            }
	        },
	        //关闭可选项区域
	        hide: function () {
	            var self = this;
	            if (self._isOpened) {
	                self._hide();
	            }

	        },
	        open: function () {
	            this._show();
	        },
	        hidePopup: function () {
	            this._hide();
	        }
	    });
	})(AUI, jQuery);

/***/ },
/* 14 */
/***/ function(module, exports) {

	//@author fqwu
	(function ($$, $) {
	    "use strict";
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.datagrid = {
	            init: function (element, valueAccessor) {
	                var
	                    element = $(element),
	                    options = valueAccessor(),
	                    value = ko.toJS(ko.unwrap(options)),
	                    c = value.viewModel.items.length,
	                    datagrid = element.append('<div id="' + value.id + '"></div>').children(),
	                    items = value.viewModel.items;
	                value.viewModel = options.viewModel;

	                if (c > 0) {
	                    //如果初始化的时候有数据，利用下面的方式触发订阅
	                    options.viewModel.items.removeAll();
	                    datagrid.datagrid(value);
	                    datagrid.datagrid('itemsSource', items);
	                } else {
	                    datagrid.datagrid(value);
	                }

	                return { 'controlsDescendantBindings': true };
	            }
	        };
	    }
	    var
		//常量
		_constant = {
		    //显示状态的样式(block)
		    auiDisplayBlock: 'aui-display-block',
		    //隐藏状态的样式
		    auiDisplayNone: 'aui-display-none',
		    //datagrid的样式
		    DATAGRID_CLASS: "aui-datagrid",
		    //datagrid中的table样式
		    DATAGRID_TABLE_CLASS: "aui-datagrid-table",
		    //datagrid可滚动区域的容器
		    DATAGRID_SCROLL_CONTAINER: "aui-datagrid-scroll-container",
		    //HEADER区域的容器
		    HEADER_CONTAINER_CLASS: "aui-datagrid-header-container",
		    //datagrid标题区域的class
		    DATAGRID_HEADER_CLASS: "aui-datagrid-header",
		    //标题单元格的样式
		    HEADER_CELLS_CLASS: 'aui-datagrid-header-cell',
		    //
		    HEADER_CELLS_FOCUS_CLASS: 'aui-datagrid-header-cell-focus',
		    //标题单元格的样式
		    HEADER_CELLS_CONTENT_CLASS: 'aui-datagrid-header-cell-content',
		    //标题容器的class。
		    HEADER_CONTENT_CLASS: "aui-datagrid-header-content",
		    DYNAMIC_HEADER_CONTENT_CLASS: 'aui-datagrid-dynamic-header-content',
		    //禁用排序时，标题的样式
		    HEADER_NOT_SORT_CLASS: "aui-datagrid-header-not-sort",
		    //标题设置区域的样式
		    HEADER_SETTINGS_CLASS: 'aui-datagrid-header-settings',
		    //填充列对应的样式
		    FILL_COLUMN: "aui-datagrid-fill-column",
		    HEADER_FILTER_CONTAINER: 'aui-datagrid-filter-cintainer',
		    //标题设置区域弹出部分的样式
		    HEADER_SETTINGS_POPUP_CLASS: 'aui-datagrid-header-settings-popup',
		    //标题排序部分对应的样式
		    HEADER_SETTING_CLASS: "aui-datagrid-header-setting",
		    //标题设置区域的图标
		    HEADER_SETTING_ICON_CLASS: "",
		    //header hidden action
		    HEADER_SETTING_HIDDEN_ACTION_CLASS: "aui-datagrid-header-setting-hidden-action",
		    //
		    HEADER_SETTING_HIDDEN_ICON_CLASS: "fi-close-bs",
		    //
		    HEADER_SORT_CLASS: 'aui-datagrid-sort',
		    //升序状态对应的样式
		    HEADER_SORT_ASC_CLASS: "fi-datagrid-sort-list-up-as",
		    //降序状态对应的样式
		    HEADER_SORT_DESC_CLASS: "fi-datagrid-sort-list-down-as",
		    //标题过滤状态的样式
		    HEADER_FILTER_CLASS: 'fi-datagrid-filter',
		    //降序过滤状态的样式
		    HEADER_SORT_DESC_FILTER_CLASS: 'fi-datagrid-filter-and-sort-down',
		    //升序过滤状态的样式
		    HEADER_SORT_ASC_FILTER_CLASS: 'fi-datagrid-filter-and-sort-up',
		    //Header部分drag区域使用的class
		    HEADER_DRAG_CLASS: "aui-datagrid-header-drag",
		    //Header部分drag区域不可用时使用的class
		    HEADER_DRAG_DISABLED_CLASS: 'aui-datagrid-header-drag-disabled',
		    //标题区域最后一列对应的样式
		    LAST_CELL_CLASS: "aui-datagrid-last-column",
		    //块状过滤对应的样式
		    BLOCK_FILTER_CLASS: 'aui-datagrid-block-filter',
		    //块状过滤容器对应的样式
		    BLOCK_FILTER_CONTAINER_CLASS: 'aui-datagrid-block-filter-container',
		    //过滤选项容器对应的样式
		    BLOCK_FILTER_ITEM_CONTAINER_CLASS: 'aui-datagrid-block-filter-item-container',
		    //设置区域过滤全选checkbook的样式
		    BLOCK_FILTER_SELECT_ALL_CLASS: 'aui-datagrid-block-filter-select-all',
		    //块状过滤action的样式
		    BLOCK_FILTER_ACTION_CLASS: 'aui-datagrid-block-filter-action',
		    //排序action的样式
		    SORT_ACTION_CLASS: "aui-datagrid-sort-action",
		    BLOCK_FILTER_ACTION_MOUSEENTER_CLASS: 'aui-datagrid-block-filter-action-mouseenter',
		    //过滤按钮区域的样式
		    BLOCK_FILTER_BUTTON_CONTAINER_CLASS: 'aui-datagrid-block-filter-button-container',
		    //块状过滤搜索部分对应的样式
		    BLOCK_FILTER_SEARCH_CLASS: 'aui-datagrid-block-filter-search',
		    //块状过滤clear filter对应的样式
		    HEADER_SETTING_CLEAR_CLASS: 'aui-datagrid-header-setting-clear',
		    //块状过滤clear filter disabled状态对应的样式
		    HEADER_SETTING_CLEAR_DISABLED_CLASS: 'aui-datagrid-header-setting-clear-disable',
		    //clear filter action
		    HEADER_SETTING_CLEAR_ACTION_CLASS: "aui-datagrid-filter-clear-action",
		    //clear filter iocn
		    HEADER_SETTING_CLEAR_ICON_CLASS: "fi-datagrid-clear-filter",
		    //块状过滤clear filter 图片的对应的样式
		    HEADER_SETTING_CLEAR_DISABLED_IMG_CLASS: 'aui-datagrid-filter-clear-action-disabled-img',
		    HEADER_SETTING_HIDDEN_CLASS: 'aui-datagrid-header-setting-hidden',
		    //带状filter区域对应的样式
		    BELT_FILTER_CLASS: 'aui-datagrid-belt-filter',
		    //带状filter单元格的样式
		    BELT_FILTER_CELL_CLASS: 'aui-datagrid-belt-filter-cell',
		    //带状过滤选择类型对应的样式
		    BELT_FILTER_CHECKBOX_CLASS: 'aui-datagrid-belt-checkbox',
		    //带状过滤数字类型对应的样式
		    BELT_FILTER_NUMBER_CLASS: 'aui-datagrid-belt-number',
		    //带状过滤数字类型对应的样式
		    BELT_FILTER_NIMBER_COMBOBOX_CLASS: 'aui-datagrid-belt-number-combobox',
		    //带状过滤combobox类型对应的样式
		    BELT_FILTER_COMBOBOX_CLASS: 'aui-datagrid-belt-combobox',
		    //带状过滤input类型对应的样式
		    BELT_FILTER_INPUT_CLASS: 'aui-datagrid-belt-input',
		    //拖拽时遮罩的样式
		    DRAG_POPUP_CLASS: "aui-datagrid-popup",
		    BLOCK_FILTER_POPUP_EXPAND: 'aui-datagrid-filter-popup-expand',
		    BLOCK_FILTER_POPUP: 'aui-datagrid-filter-popup',
		    //提示区域容器的样式
		    DATAGRIR_MESSAGE_CONTAINER_CLASS: 'aui-datagrid-message-container',
		    //提示区域的样式
		    DATAGRIR_MESSAGE_CLASS: 'aui-datagrid-message',
		    //内容区域的样式
		    DATAGRID_CONTENT_CLASS: "aui-datagrid-content",
		    //标尺的样式
		    DRAG_RULER_CLASS: "aui-datagrid-drag-ruler",
		    //datagrid内容区域的表格部分的样式
		    CONTENT_ROW_PRESENTER: 'aui-datagrid-row-presenter',
		    //行的样式
		    ROW_CLASS: "aui-datagrid-row",
		    //鼠标移入时，行的样式
		    ROW_MOUSEOVER_CLASS: 'aui-datagrid-row-mouseover',
		    //奇数行的样式
		    SINGLE_ROW_CLASS: "aui-datagrid-single-row",
		    //偶数行的样式
		    EVEN_ROW_CLASS: "aui-datagrid-even-row",
		    //行选中状态的样式
		    SELECTED_ROW_CLASS: "aui-datagrid-row-selected",
		    //detail row使用的样式
		    DETAILS_ROW_CLASS: "aui-datagrid-details-row",
		    //单元格的基础样式对应的样式。
		    CELL_CLASS: "aui-datagrid-cell",
		    //
		    CELL_BACKGROUND_PANEL_CLASS: 'aui-datagrid-background-panel',
		    //
		    IE_PANEL: 'aui-datagrid-ie-panel',
		    //
		    CELL_FOCUS_CLASS: "aui-datagrid-cell-focus",
		    //单元格内容区域的焦点样式
		    CELL_CONTENT_CLASS: "aui-datagrid-cell-content",
		    //文本单元格的样式
		    CELL_TEXT_CONTENT_CLASS: "aui-datagrid-cell-text",
		    //checkbox单元格的格式
		    CELL_CHECKBOX_CLASS: 'aui-datagrid-cell-checkbox',
		    //
		    CELL_WIDGET_CLASS: "aui-datagrid-cell-widget",
		    //
		    CELL_POPUP_WIDGET_CLASS: "aui-datagrid-popup-widget",
		    //单元格隐藏状态下使用的样式
		    HIDE_TD_CLASS: "aui-datagrid-hide-column",
		    //单元格编辑模式下使用的样式
		    CELL_EDITING_CLASS: "aui-datagrid-cell-editing",
		    //锁定部分对应的class
		    LOCKED_AREA_CLASS: "aui-datagrid-locked",
		    //非锁定部分对应的class
		    UNLOCKED_AREA_CLASS: "aui-datagrid-unLocked"
		},
	    //定义元素显示状态的枚举。通过$$.datagrid('Visibility')获取
		_visibility = {
		    /**
			 * 显示元素。
			 * @property Visibility.visible
			 * @type Number
			 * @default 0
			 */
		    visible: 0,
		    /**
			 * 不显示元素。
			 * @property Visibility.collapsed
			 * @type Number
			 * @default 1
			 */
		    collapsed: 1
		},
	    //定义提示信息的枚举。通过$$.datagrid('Message')获取
		_message = {
		    /**
			 * 通常状态的提示语。
			 * @property Message.normal
			 * @type Number
			 * @default 0
			 */
		    normal: 0,
		    /**
			 * 搜索时的提示语。
			 * @property Message.search
			 * @type Number
			 * @default 1
			 */
		    search: 1,
		    /**
			 * 过滤时的提示语。
			 * @property Message.filter
			 * @type Number
			 * @default 2
			 */
		    filter: 2
		},
	    //定义过滤类型的枚举。通过$$.datagrid('Filter')获取
		_filter = {
		    /**
			 * 禁用过滤。
			 * @property Filter.none
			 * @type Number
			 * @default 0
			 */
		    none: 0,
		    /**
			 * 带状过滤。
			 * @property Filter.belt
			 * @type Number
			 * @default 1
			 */
		    belt: 1,
		    /**
			 * 块状过滤。
			 * @property Filter.block
			 * @type Number
			 * @default 2
			 */
		    block: 2,
		    /**
			 * 搜索。
			 * @property Filter.search
			 * @type Number
			 * @default 3
			 */
		    search: 3
		},
	    //定义belt类型过滤的枚举。通过$$.datagrid('FilterBelt')获取
		_filterBelt = {
		    /**
			 * 输入类型的过滤。
			 * @property FilterBelt.input
			 * @type Number
			 * @default 0
			 */
		    input: 0,
		    /**
			 * 下拉框类型的过滤。
			 * @property FilterBelt.combobox
			 * @type Number
			 * @default 1
			 */
		    combobox: 1,
		    /**
			 * 布尔类型的过滤。
			 * @property FilterBelt.checkbox
			 * @type Number
			 * @default 2
			 */
		    checkbox: 2,
		    /**
			 * 数字类型的过滤 。
			 * @property FilterBelt.number
			 * @type Number
			 * @default 3
			 */
		    number: 3,
		    /**
			 * 时间类型的过滤 。
			 * @property FilterBelt.date
			 * @type Number
			 * @default 4
			 */
		    date: 4
		},
	    //定义belt类型中数字过滤的枚举。通过$$.datagrid('NumberFilterBelt')获取
		_numberFilterBelt = {
		    /**
			 * 相等。
			 * @property NumberFilterBelt.equal
			 * @type Number
			 * @default 0
			 */
		    equal: 0,
		    /**
			 * 不相等。
			 * @property NumberFilterBelt.notEqual
			 * @type Number
			 * @default 1
			 */
		    notEqual: 1,
		    /**
			 * 小于。
			 * @property NumberFilterBelt.lessThan
			 * @type Number
			 * @default 2
			 */
		    lessThan: 2,
		    /**
			 * 小于等于。
			 * @property NumberFilterBelt.lessThanOrEqual
			 * @type Number
			 * @default 3
			 */
		    lessThanOrEqual: 3,
		    /**
			 * 大于。
			 * @property NumberFilterBelt.greaterThan
			 * @type Number
			 * @default 4
			 */
		    greaterThan: 4,
		    /**
			 * 大于等于。
			 * @property NumberFilterBelt.greaterThanOrEqual
			 * @type Number
			 * @default 5
			 */
		    greaterThanOrEqual: 5
		},
	    //定义列类型的枚举。通过$$.datagrid('ColumnType')获取
		_columnType = {
		    /**
			 * 文本类型
			 */
		    text: 0,
		    /**
			 * checkbox类型
			 */
		    checkbox: 1,
		    /**
			 * 模板类型。
			 */
		    template: 2,
		    /**
			 * title类型
			 */
		    title: 3,
		    /**
	         * ellipsis类型
	         */
		    ellipsis: 0

		},
	    //定义单元格状态的枚举。通过$$.datagrid('CellMode')获取
		_cellMode = {
		    /**
			 * 通常状态。
			 * @property CellMode.normal
			 * @type Number
			 * @default 0
			 */
		    normal: 0,
		    /**
			 * 编辑状态。
			 * @property CellMode.editing
			 * @type Number
			 * @default 1
			 */
		    editing: 1
		},
	    //定义排序的枚举。通过$$.datagrid('SortMode')获取
		_sortMode = {
		    /**
			 * 无排序。
			 * @property SortMode.none
			 * @type Number
			 * @default 1
			 */
		    none: 0,
		    /**
			 * 升序。
			 * @property SortMode.asc
			 * @type Number
			 * @default 1
			 */
		    asc: 1,
		    /**
			 * 降序。
			 * @property SortMode.desc
			 * @type Number
			 * @default 1
			 */
		    desc: 2
		},
	    //定义detail行显示模式的枚举。通过$$.datagrid('DetailsMode')获取
		_detailsMode = {
		    /**
			 * 选中时显示detail。
			 * @property DetailsMode.visibleWhenSelected
			 * @type Number
			 * @default 0
			 */
		    visibleWhenSelected: 0,
		    /**
			 * 点击时显示detail。同时只能有一个detail展开。
			 * @property DetailsMode.visibleWhenClick
			 * @type Number
			 * @default 1
			 */
		    visibleWhenClick: 1,
		    /**
			 * 总是显示detail。
			 * @property DetailsMode.visible
			 * @type Number
			 * @default 2
			 */
		    visible: 2,
		    /**
			 * 总是隐藏detail。
			 * @property DetailsMode.collapsed
			 * @type Number
			 * @default 3
			 */
		    collapsed: 3,
		    /**
	         * 点击时显示，再次点击时关闭。可以同时展开多好个detail。
	         * @property DetailsMode.click
	         * @type Number
	         * @default 4
	         */
		    click: 4
		},
	    //行的视觉状态管理器
		_row_vsm = {
		    normal: {
		        add: [],
		        remove: ['_isMouseOver', '_isSelected']
		    },
		    mouseout: {
		        add: [],
		        remove: ['_isMouseOver']
		    },
		    mouseover: {
		        add: ['_isMouseOver'],
		        remove: []
		    },
		    selected: {
		        add: ['_isSelected'],
		        remove: []
		    },
		    unSelected: {
		        add: [],
		        remove: ['_isSelected']
		    },
		    changeVisualStates: function (state) {
		        var
				//
				add = state.add,
				//
				remove = state.remove,
				//
				i = 0,
				//
				al = add.length,
				//
				rl = remove.length;
		        for (; i < al; i++) {
		            this[add[i]](1);
		        }
		        for (i = 0; i < rl; i++) {
		            this[remove[i]](-1);
		        }
		    }
		},
	    _sortType = {
	        string: 0,
	        date: 1,
	        number: 2
	    };

	    function _dynamicTemplate(temp) {
	        return temp.templateName();
	    }

	    function _dynamicBackgroundTemplate(temp) {
	        return temp.backgroundTemplateName();
	    }

	    function _dynamicHeaderBackgroundTemplate(temp) {
	        return temp.headerBackgroundTemplateName();
	    }

	    function _dynamicHeaderTemplate(temp) {
	        return temp.headerTemplateName();
	    }

	    /**
		 * 获取datagrid控件的常量。
		 * @method $$.datagrid
		 * @param {String} type 常量名称。
		 */
	    $$.datagrid = function (type) {
	        var value = null;
	        type = type.toLowerCase();
	        switch (type) {
	            case 'visibility':
	                value = $.extend(true, value, _visibility);
	                break;
	            case 'columntype':
	                value = $.extend(true, value, _columnType);
	                break;
	            case 'detailsmode':
	                value = $.extend(true, value, _detailsMode);
	                break;
	            case 'celleditingclass':
	                value = _constant.CELL_EDITING_CLASS;
	                break;
	            case 'cellwidgetclass':
	                value = "aui-datagrid-cell-widget";
	                break;
	            case 'cellPopupWidget':
	                value = "aui-datagrid-popup-widget";
	                break;
	            case 'cellmode':
	                value = $.extend(true, value, _cellMode);
	                break;
	            case 'constant':
	                value = $.extend(true, value, _constant);
	                break;
	            case 'sortmode':
	                value = $.extend(true, value, _sortMode);
	                break;
	            case 'filter':
	                value = $.extend(true, value, _filter);
	                break;
	            case 'filterbelt':
	                value = $.extend(true, value, _filterBelt);
	                break;
	            case 'numberfilterbelt':
	                value = $.extend(true, value, _numberFilterBelt);
	                break;
	            case 'message':
	                value = $.extend(true, value, _message);
	                break;
	            case 'sorttype':
	                value = $.extend(true, value, _sortType);
	                break;
	            default:
	                value = {};
	        }

	        return value;
	    };
	    /**
		 * <div style="font-weight:600">在可自定义的网格中显示数据。</div>
		 * <div style="color:#E20111">初始化时，必须将参数中的viewModel.items设置成ko.observableArray()</div>
		 * @class datagrid
		 * @author Fengqiang.Wu
	     *
	     * @param {Boolean} options.isResponsive 设置一个值，该值表示是否初始化datagrid的响应式部分。该值只有在控件初始化时设置有效。
		 *
	     * @param {String} options.responsiveHeaderName 设置一个值，该值表示响应式变换后的标题名称。该值只有在控件初始化时设置有效。
	     *
	     * @param {String} options.responsiveHeaderTitleBinding 设置一个值，该值表示每行数据的标题对应的数据源中的绑定属性。该值只有在控件初始化时设置有效。
	     *
	     * @param {String} options.responsiveHeaderCheckeBoxTemplate 设置一个值，该值表示每行标题中checkbox对应的模板。该值只有在控件初始化时设置有效。
	     *
	     * @param {String} options.responsiveHeaderSettingTemplate 设置一个值，该值表示行的Action打开时显示的元素的模板。该值只有在控件初始化时设置有效。
	     *
	     * @param {String} options.responsiveSelectAllId 设置一个值，该值表示全选按钮对应的id。该值只有在控件初始化时设置有效。
	     * 
		 */
	    $.extend($.aui.datagrid.prototype, {
	        // These options will be used as defaults
	        options: {
	            //获取或设置一个值，该值表示列的配置信息。只在控件初始化时设置有效。类型:Array。数组的每一项代表对应列的设置信息。
	            columns: [],
	            //获取或设置一个方法，该方法在过滤完成后执行（只在前台过滤时有效）。类型:function
	            filtered: $.noop,
	            //获取或设置一个方法，该方法在过滤时执行。类型:function
	            filtering: $.noop,
	            //获取或设置一个值，该值表示数据筛选的类型。只在控件初始化时设置有效。类型:$$.datagrid("filter")
	            filterType: _filter.none,
	            //获取或设置一个值，该值表示被冻结的列的个数。datagrid内部横向滚动条滚动时，不会移动冻结列。只在控件初始化时设置有效。类型:number。值是正整数，并且小于列的总数
	            frozenColumnCount: 0,
	            //获取或设置一个值，该值表示内容区域的高度。只在控件初始化时设置有效。类型:number | string。可以设置成两种类别的值，分别对应两种纵向布局方式
	            height: 'auto',
	            //获取或设置一个值，该值表示是否开启斑马线。只在控件初始化时设置有效。类型:boolean
	            hasZebraCrossing: true,
	            //获取或设置一个值，该值表示控件的数据处理是否由控件完成x。只在控件初始化时设置有效。
	            isBackground: false,
	            //获取或设置一个值，该值指示用户是否可以使用鼠标调整列的宽度。只在控件初始化时设置有效。
	            isColumnResizable: false,
	            //获取或设置一个值，该值表示过滤时是否区分大小写。只在控件初始化时设置有效。只对前台过滤起作用。类型:boolean。
	            isFilterCaseSensitive: false,
	            //获取或设置一个值，该值表示是否允许进入编辑模式。只在控件初始化时设置有效。类型:boolean。
	            isReadOnly: true,
	            //获取或设置一个值，该值表示是否允许排序。只在控件初始化时设置有效。类型:boolean。
	            isSortable: false,
	            //获取或设置一个方法，该方法在datagrid内容集合变化时触发。（删除、添加一行，清空，重新赋值都会触发）
	            itemsSourceChanged: $.noop,
	            //获取或设置一个值，该值表示自适应高度模式下，内容区域的最大高度，只在控件初始化时设置有效。
	            maxHeight: 0,
	            //获取或设置一个值，该值表示拖拽列宽时列的最小宽度。类型:number
	            minCellWidth: 40,
	            //获取或设置一个值，该值表示内容集合为空时的提示信息。类型:string
	            noneMessage: null,
	            //获取或设置一个值，该值表示搜索结果为空时，显示的提示信息。类型:string
	            noneSearchMessage: '',
	            //获取或设置一个值，该值表示过滤结果为空时，显示的提示信息。类型:string
	            noneFilterMessage: '',
	            //获取或设置一个方法，该方法在行点击时执行。类型:function
	            rowClick: $.noop,
	            //获取或设置一个值，该值表示行的详细信息模板。该模板定义行显示信息的html结构和绑定关系。只在控件初始化时设置有效。类型:string
	            rowDetailsTemplate: "",
	            //获取或设置一个值，该值表示行详细信息的显示模式。类型:$$.datagrid("detailsMode")
	            rowDetailsVisibilityMode: _detailsMode.collapsed,
	            //获取或设置一个方法，该方法在行双击时执行。类型:function
	            rowDoubleClick: $.noop,
	            //获取或设置一个值，该值表示行高。只在控件初始化时设置有效。类型:number | string
	            rowHeight: 'auto',
	            //获取或设置一个方法，该方法在鼠标移入行后执行。类型:function
	            rowMouseover: $.noop,
	            //获取或设置一个方法，该方法在鼠标移出行后执行。类型:function
	            rowMouseout: $.noop,
	            //获取或设置一个方法，该方法在排序完成后执行（只在前台排序时有效）。类型:function
	            sorted: $.noop,
	            //获取或设置一个方法，该方法在排序时执行。类型:function
	            sorting: $.noop,
	            //获取或设置一个值，该值表示控件内部绑定使用的view model。类型:object
	            viewModel: {

	            },
	            //获取或设置一个值，该值表示控件的宽度。只在控件初始化时设置有效。类型:number | string
	            width: 'auto',
	            //初始化列模板中的控件
	            initPart: function () {

	            },
	            //获取或设置一个值，该值表示是否支持响应式变化。true表示支持。
	            isResponsive: false,
	            //事件自定义参数,参数的名称与事件名称一一对应。
	            parameters: {}
	        },
	        _create: function () {
	            this._initMembers()
	                ._initColumnVisibility()
	                ._initColumnSort()
	                ._initRowDetails()
	                ._createCellMembers()
	                ._initColumnFilter()
	                ._createDataGrid()
	                ._applyBinding()
	                ._initColumnResize()
	                ._initCellEdit()
	                ._loaded()
	                ._initEvent()
	                ._updateLayout();
	        },
	        //初始化实例成员
	        _initMembers: function () {
	            var self = this;
	            //cell使用的class前缀。
	            self._cellClassPre = 'datagrid_cell';
	            //table col使用class的前缀
	            self._colClassPre = 'datagrid_column';
	            //控制行显示隐藏的属性名称
	            self._display = '_display';
	            //选中样式对应的属性名称
	            self._isSelected = '_isSelected';
	            self._isMouseOver = '_isMouseOver';
	            self._itemsCount = 0;

	            //获取或设置一个值，该值表示过滤类型
	            self._filterType = self.options.filterType;

	            self._isBackground = self.options.isBackground;

	            self._hasZebraCrossing = self.options.hasZebraCrossing;

	            //获取或设置一个值，该值表示是否开启控件的过滤功能
	            self._hasFilter = (self.options.filterType == _filter.none) ? false : true;

	            //获取或设置一个值， 该值表示列的设置参数
	            self._columns = self.options.columns;
	            //获取或设置一个值，该值表示宽度的设置参数
	            self._width = self.options.width;

	            //行高
	            self._rowHeight = self.options.rowHeight;
	            //获取一个值，该值表示宽度是否是百分比模式
	            self._isPercentage = (typeof self._width == 'string' && self._width != 'auto') ? true : false;
	            //获取一个值，该值表示控件视区的宽度
	            self._viewWidth = self._getViewWidth();
	            //获取或设置一个值，该值表示控件内容的宽度
	            self._contentWidth = self._getTotalWidth();
	            //获取一个值，该值表示冻结列的数目
	            self._frozenColumnCount = self.options.frozenColumnCount || 0;
	            //获取一个值，该值表示冻结列的宽度和
	            self._frozenWidth = self._getFrozenWidth();
	            //滚动区域的视区宽度
	            self._scrollableViewWidth = 0;
	            //滚动区域的内容宽度
	            self._scrollableContentWidth = self._contentWidth - self._frozenWidth;
	            //获取一个值，该值表示是否允许用户自定义列宽
	            self._canUserResize = self.options.isColumnResizable;
	            //获取一个值，该值表示是否使用行Detail功能
	            self._hasDetails = self.options.hasDetails;
	            if (self._hasDetails === true && !self._createDetailMembers) {
	                $.error('Please add "aui.datagrid.detail.js" when using datagrid detail.');
	            }
	            //获取一个值，该值表示设置区域获得元素的焦点的序号。
	            self._settingTabbableIndex = -1;
	            //当前展开的的标题设置区域的序号
	            self._openingSettingIndex = -1;

	            self.options.frozenColumnCount = self._frozenColumnCount = self._frozenColumnCount >= self.options.columns.length ? 0 : self._frozenColumnCount;

	            //所有行对应的jQuery对象
	            self._item = null;
	            //所有锁定行对应的jQuery对象
	            self._lockedItem = null;
	            //所有未锁定行对应的jQuery对象
	            self._unLockedItem = null;

	            //所有单元格对应的jQuery对象
	            self._cells = null;
	            //所有冻结单元格
	            self._frozenColumn = [];
	            //所以行的集合，数组的每一项是行对应的jQuery对象
	            self._rows = [];
	            //隐藏列的集合，数组的每一项是隐藏列对应的jQuery对象
	            self._hiddenColumns = [];
	            //选中行的行号
	            self._selectedIndex = -1;
	            //鼠标移入行的行号
	            self._mouseoverIndex = -1;
	            //选中行对应的jQuery对象
	            self._selectedItem = null;

	            this._initVM();

	            return this;
	        },
	        _initVM: function () {
	            //控件的ViewModule
	            this._vm = {};
	            if (!ko.isObservable(this.options.viewModel.items)) {
	                this.options.viewModel.items = ko.observableArray();
	            }

	            if (!ko.isObservable(this.options.viewModel.dynamicColumns)) {
	                this.options.viewModel.dynamicColumns = ko.observableArray();
	            }

	            $.extend(this._vm, this.options.viewModel);

	            this._vm.dynamicColumns.subscribe(this._onDynamicColumnsChanged, {
	                self: this
	            });
	            this._vm.items.subscribe(this._onVmChanged, {
	                self: this
	            });

	            this._vm._dynamicTemplate = _dynamicTemplate;
	            this._vm._dynamicBackgroundTemplate = _dynamicBackgroundTemplate;
	            this._vm._dynamicHeaderBackgroundTemplate = _dynamicHeaderBackgroundTemplate;
	            this._vm._dynamicHeaderTemplate = _dynamicHeaderTemplate;
	            this._vm._getDynamicCellClass = this._getDynamicCellClass;
	        },
	        _initColumnVisibility: function () {
	            if ($.isFunction(this._createColumnVisibilityMembers)) {
	                this._createColumnVisibilityMembers();
	            }

	            return this;
	        },
	        _initColumnSort: function () {
	            if (this.options.isSortable === true) {
	                if (!$.isFunction(this._createSortMembers)) {
	                    $.error('Please add "aui.datagrid.sort.js" when using datagrid sort.');
	                } else {
	                    this._createSortMembers();
	                }
	            }

	            return this;
	        },
	        _createHeaderCache: function () {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //非锁定列的数目
	            count = self._headerCell.length,
	            //
	            cells = self._headerCell,
	            //
	            containers = self._headerContent,
	            //
	            options = self._headerOptions,
	            //
	            sorts = self._headerSorts,
	            //
	            drags = self._headerDrags;

	            self._headerCache = [];


	            for (; i < count; i++) {
	                var
	                    cell = $(cells[i]),
	                    index = cell.attr("columnindex");

	                self._allColumns[i] = self.element.find("." + self._cellClassPre + "_" + i);
	                self._allTableCols[i] = self.element.find("." + self._colClassPre + "_" + i);

	                self._headerCache[index] = {
	                    cell: cell,
	                    index: index,
	                    container: $(containers[i]),
	                    sort: $(sorts[i]),
	                    drag: $(drags[i])
	                };
	            }

	            return this;
	        },
	        _initRowDetails: function () {
	            if (this._hasDetails === true) {
	                this._createDetailMembers();
	            }

	            return this;
	        },
	        _initColumnFilter: function () {
	            if (this._hasFilter) {
	                this._initFilterMembers();
	            }

	            return this;
	        },
	        _initColumnResize: function () {
	            if (!this._isWidthNumeric() && this._width != 'auto') {
	                this._canUserResize = false;
	            }

	            if (this._canUserResize === true) {
	                if ($.isFunction(this._createResizingMembers)) {
	                    //生成自定义列宽需要的成员
	                    this._createResizingMembers();
	                } else {
	                    $.error('Please add "aui.datagrid.columnsresize.js" when using resize column.');
	                }
	            }

	            return this;
	        },
	        _initCellEdit: function () {
	            if ($.isFunction(this._createEditMembers)) {
	                this._createEditMembers();
	            }

	            return this;
	        },
	        _applyBinding: function () {
	            ko.applyBindings(this._vm, this.element.parent()[0]);
	            return this;
	        },
	        _loaded: function () {
	            this._initHeaderPart()
	                ._createHeaderCache()
	                ._initCellPart();

	            this._trigger("loaded", null, $$.Event({
	                element: this.element
	            }));

	            return this;
	        },
	        _initHeaderPart: function () {
	            this._headerWrapper = this.element.find('div[class~=' + _constant.DATAGRID_HEADER_CLASS + ']');
	            this._headerUnLocked = this._headerWrapper.find(".aui-datagrid-unLocked");
	            //标题容器对应的jQuery对象,保护锁定部分和非锁定部分。
	            this._headerContainer = this.element.find('div[class~=' + _constant.HEADER_CONTAINER_CLASS + ']');
	            //标题对应的jQuery对象。
	            this._header = this._headerContainer.find('table[class~=' + _constant.DATAGRID_TABLE_CLASS + ']');
	            if (this._header.length == 2) {
	                this._lockedHeader = $(this._header[0]);
	                this._unlockedHeader = $(this._header[1]);
	            } else {
	                this._unlockedHeader = this._header;
	            }

	            this._columns = this.options.columns.concat(this._vm.dynamicColumns());
	            //标题单元格对应的jQuery对象。
	            this._headerCell = this._header.find('.' + _constant.HEADER_CELLS_CLASS);
	            if ($$.browser.browser == 'msie') {
	                this._headerCell.children('.' + _constant.CELL_BACKGROUND_PANEL_CLASS).height(this._headerCell.height());
	            }
	            //标题单元格容器对应的jQuery对象。
	            this._headerContent = this._headerCell.children('div[class=' + _constant.HEADER_CONTENT_CLASS + ']');
	            //单元格排序部件对应的jQuery对象。
	            this._headerSorts = this._headerContent.children('div[class~=' + _constant.HEADER_SETTING_CLASS + ']');
	            this._headerDrags = this._headerContent.children('div[class~=' + _constant.HEADER_DRAG_CLASS + ']');
	            this._headerCache = [];

	            //所有列的集合，数组的每一项是列对应的jQuery对象。
	            this._allColumns = [];
	            //所以col的集合，数组的每一项是每个col对应的jQuery对象。不包括填充列
	            this._allTableCols = [];

	            return this;
	        },
	        _initCellPart: function () {

	            this._messageContainer = this.element.children('.' + _constant.DATAGRIR_MESSAGE_CONTAINER_CLASS);

	            //信息区域对应的jQuery对象。
	            this._message = this._messageContainer.children("." + _constant.DATAGRIR_MESSAGE_CLASS);

	            //datagrid的内容区域
	            this._content = this.element.children('div[class="' + _constant.DATAGRID_CONTENT_CLASS + '"]');
	            //非锁定的内容区域
	            this._unLockedContent = this._content.children('div[class="' + _constant.UNLOCKED_AREA_CLASS + '"]');
	            //非锁定的内容区域
	            this._lockedContent = this._content.children('div[class~="' + _constant.LOCKED_AREA_CLASS + '"]');

	            //非锁定的内容区域和标题区域
	            this._unLockeds = this.element.find('div[class="' + _constant.UNLOCKED_AREA_CLASS + '"]');
	            //非锁定的内容table和标题table
	            this._unLockedTables = this._unLockeds.children("table");
	            //锁定的内容区域和标题区域
	            this._lockeds = this.element.find('div[class~="' + _constant.LOCKED_AREA_CLASS + '"]');
	            //锁定的内容table和标题table
	            this._lockedTables = this._lockeds.children("table");

	            //数据为空时，隐藏tbody才能显示最小高度
	            this._rowPresenter = this._content.find("." + _constant.CONTENT_ROW_PRESENTER).hide();

	            if (this._frozenColumnCount != 0) {
	                this._lockedRowPresenter = $(this._rowPresenter[0]);
	                this._unlockedRowPresenter = $(this._rowPresenter[1]);
	            }

	            //填充列对应的jQuery对象
	            this._fillColumn = this._unLockedTables.find('col[class="' + _constant.FILL_COLUMN + '"]');
	            //横向滚动条对应的jQuery对象
	            this._horizontalScroll = this.element.find("." + _constant.DATAGRID_HORIZONTAL_SCROLLER_CLASS);

	            return this;
	        },
	        _initEvent: function () {
	            var
	            //
	            self = this,
	            //
	            namespace = this.eventNamespace;

	            if (this._width == 'auto' || this.options.isResponsive == true) {
	                this._window = $(window).on('resize' + namespace, this, this._onWindowResize);
	            }

	            this._rowPresenter.on("keydown" + namespace, this, this._onRowPresenterKeyDown);

	            this._headerCell
	                .on('focus' + namespace, this, this._onHeaderCellFocus)
	                .on('blur' + name, this, this._onHeaderCellBlur)
	                .on('mouseover' + namespace, this, this._onHeaderMouseover)
	                .on('mouseout' + namespace, this, this._onHeaderMouseout)
	                .on('click' + namespace, this, this._onHeaderClick);

	            if (this._hasFilter || this.options.isSortable === true) {
	                //self._headerSorts
	                //    .on('keydown' + namespace, self, self._onSettingKeyDown)
	                //    .on('click' + namespace, self, self._onSettingClick);
	            }

	            if (this._canUserResize) {
	                this._headerDrags.on('mousedown' + namespace, this, this._onDragerMouseDown);
	            }

	            //视区外的元素获得焦点时，移动滚动条
	            this._lockedContent.on('scroll', this, this._onLockedScroll);
	            this._unLockedContent.on('scroll', this, this._onContentScroll);
	            this._headerUnLocked.on('scroll', this, this._onHeaderScroll);
	            if (this.options.filterType == _filter.belt) {
	                this._initBeltFilter();
	            }

	            this._initHeaderSettings();
	            if (this.options.isResponsive == true) {
	                this._initResponsiveSetting();
	            }

	            return this;
	        },
	        _onHeaderClick: function (e) {
	            var
	                self = e.data,
	                cur = $(this);

	            if (!self._isCellFocus && $$.browser.browser == 'msie') {
	                cur.focus();
	            }
	            if ($.isFunction(self._triggerSort)) {
	                self._triggerSort(cur);
	            }
	        },
	        _updateCellFocus: function (cur, isFocus) {
	            if (isFocus) {
	                cur.addClass(_constant.CELL_FOCUS_CLASS);
	            } else {
	                cur.removeClass(_constant.CELL_FOCUS_CLASS);
	            }
	        },
	        _onHeaderCellFocus: function (e) {
	            var
	                self = e.data;
	            self._isCellFocus = true;

	            e.data._updateCellFocus($(this).children(':first'), true);
	        },
	        _onHeaderCellBlur: function (e) {
	            var
	                self = e.data;
	            self._isCellFocus = false;

	            e.data._updateCellFocus($(this).children(':first'), false);
	        },
	        /*
	         * cell获得焦点时，记录当前cell的相关信息
	         */
	        _onCellFocus: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            index = null,
	            //
	            data = $$.Event(),
	            //
	            current = self._currentSelectedCell;
	            self._isCellFocus = true;
	            current.cell = $(this);

	            self._updateCellFocus(($$.browser.browser == 'msie') ? current.cell.children(':first').children(':first') : current.cell.children(':first'), true);

	            index = current.rowIndex = current.cell.attr("rowIndex") - 0;
	            current.columnIndex = current.cell.attr("columnIndex") - 0;
	            current.showPart = $(current.cell.children('div')[0]);
	            current.editingPart = $(current.cell.children('div')[1]);
	            current.bindName = self._columns[current.columnIndex].binding;
	            if (current.bindName != undefined) {
	                current.oldValue = self._getCellValue(current.bindName, index);
	            }
	            current.editingElement = current.editingPart.find('.' + $$.datagrid("cellEditingClass"));

	            current.mode = current.mode === 1 ? 1 : _cellMode.normal;

	            data.oldValue = self._oldRowValue;
	            if (self._selectedIndex != index) {
	                self._onSelectedItemChanging(this.parentElement);
	            }

	            if (self._hasDetails == true && self.options.rowDetailsVisibilityMode == _detailsMode.visibleWhenSelected && self._details[index].style.display == 'none') {
	                data.parameters.isExpanded = $(self._details[index]).is(":hidden");
	                self._showCurrentDetail(index);
	                data.newValue = self._vm.items()[self._selectedIndex];
	                data.parameters.items = self._vm.items();
	                $$.executeEventHandler(self, "riowDetailsVisibilityChanged", self.options.riowDetailsVisibilityChanged, e, data);
	            }
	        },
	        _onCellBlur: function (e) {
	            var
	                self = e.data,
	                cur = $(this);
	            self._isCellFocus = false;
	            self._updateCellFocus(($$.browser.browser == 'msie') ? cur.children(':first').children(':first') : cur.children(':first'), false);
	        },
	        _setOption: function (key, value) {
	            var self = this;
	            $.Widget.prototype._setOption.apply(self, arguments);
	            self.options[key] = value;
	            switch (key) {
	                case 'rowDetailsVisibilityMode':
	                    if (self._updateDetailsVisibilityMode) {
	                        self._updateDetailsVisibilityMode(value);
	                    }
	                    break;
	            }
	        },
	        //获取排序使用的提示语
	        _getAscendingMsg: function (type) {
	            var msg = "";

	            switch (type) {
	                case _sortType.date:
	                    msg = $$.I18N.datagrid.oldToNew;
	                    break;
	                case _sortType.number:
	                    msg = $$.I18N.datagrid.ascending;
	                    break;
	                default:
	                    msg = $$.I18N.datagrid.sortAToZ;
	                    break;
	            }

	            return msg;
	        },
	        //获取排序使用的提示语
	        _getDescendingMsg: function (type) {
	            var msg = "";

	            switch (type) {
	                case _sortType.date:
	                    msg = $$.I18N.datagrid.newToOld;
	                    break;
	                case _sortType.number:
	                    msg = $$.I18N.datagrid.descending;
	                    break;
	                default:
	                    msg = $$.I18N.datagrid.sortZToA;
	                    break;
	            }

	            return msg;
	        },
	        /**
	         * 引发ClickRow事件
	         */
	        _onRowClick: function (e) {
	            var
	                self = e.data,
	                details = self._details,
	                data = {
	                    element: self.element,
	                    parameters: {

	                    }
	                },
	                index = this.getAttribute('index');

	            data.oldValue = self._oldRowValue;
	            self._onSelectedItemChanging(this);

	            data.newValue = self._vm.items()[self._selectedIndex];
	            data.parameters.items = self._vm.items();

	            if (self._hasDetails) {
	                data.parameters.isExpanded = $(details[index]).is(":hidden");
	                if (self.options.rowDetailsVisibilityMode == _detailsMode.visibleWhenClick || self.options.rowDetailsVisibilityMode == _detailsMode.click) {
	                    self._showCurrentDetail(index);

	                    $$.executeEventHandler(self, "riowDetailsVisibilityChanged", self.options.riowDetailsVisibilityChanged, e, data);
	                }
	            }

	            self._trigger("rowClick", null, $$.Event({
	                element: self.element,
	                oldValue: self._oldRowValue,
	                newValue: self._vm.items()[self._selectedIndex],
	                parameters: {
	                    items: self._vm.items()
	                }
	            }));
	        },
	        /**
	         * 引发双击事件
	         */
	        _onDoubleClickRow: function (e) {
	            var
	                self = e.data,
	                data = {
	                    element: self.element
	                },
	            index = this.getAttribute('index');

	            data.oldValue = self._oldRowValue;
	            data.newValue = self._vm.items()[self._selectedIndex];
	            // 执行委托
	            $$.executeEventHandler(self, "rowDoubleClick", self.options.rowDoubleClick, null, data);
	        },
	        /**
	         * 删除指定序号的行。
	         * @method deleteRowByIndex
	         * @param {Int} index 待删除的行号。
	         * @return {Object} 被删除的行数据。 
	         */
	        deleteRowByIndex: function (index) {
	            return ko.mapping.toJS(this._vm.items.splice(index, 1)[0]);
	        },
	        /**
	         * 删除符合特定属性值的所有行。
	         * @method deleteRowsByAttribute
	         * @param {String} attr 属性的名称。
	         * @param {String} value 属性的值。
	         *@return {Array} 被删除的行数据。 
	         */
	        deleteRowsByAttribute: function (attr, value) {
	            var
	            //
	            self = this,
	            //
	            i = self._vm.items().length - 1,
	            //
	            deleted = [],
	            //
	            end = 0;
	            for (; i >= 0; i--) {
	                if (self._vm.items()[i][attr]() === value) {
	                    deleted[deleted.length] = self._vm.items.remove(self._vm.items()[i])[0];
	                }
	            }

	            return ko.mapping.toJS(deleted);
	        },
	        getColumnsSetting: function () {
	            return this.options.columns;
	        },
	        /**
	         * 获取符合特定属性值的,所有行对应的数据。
	         * @method getRowsByAttribute
	         * @param {String} attr 属性的名称。
	         * @param value 属性的值。
	         */
	        getRowsByAttribute: function (attr, value) {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            end = self._vm.items().length,
	            //
	            collection = [];
	            for (; i < end; i++) {
	                if (self._vm.items()[i][attr]() === value) {
	                    collection.push(self._vm.items()[i]);
	                }
	            }

	            return ko.mapping.toJS(collection);
	        },
	        /***
	         * 获取选定项的序号。
	         * @method selectedIndex
	         */
	        selectedIndex: function () {
	            return this._selectedIndex;
	        },
	        /**
	         * 取消选中样式
	         * @param {function} assert 取消断言
	         */
	        unSelectedItem: function (assert) {
	            var
	                self = this;
	            item = self._vm.items()[self._selectedIndex];

	            if (item) {
	                item._isSelected(0);

	                if ($.isFunction(assert)) {
	                    assert(item);
	                }

	                self._selectedIndex = -1;
	            }

	        },
	        /**
	         * 获取选定行对应的数据项。
	         * @method selectedItem
	         */
	        selectedItem: function () {
	            var
	            //
	            self = this,
	            //
	            index = self._selectedIndex,
	            //
	            value,
	            //
	            end = self._item.length;

	            if (index != -1 && index < end) {
	                value = ko.mapping.toJS(self._vm.items()[index]);
	            } else {
	                value = null;
	            }
	            return value;
	        },
	        /**
	         * 更新一行的所有值。
	         * @method updateRowByIndex
	         * @param {Number} index 行号。
	         * @param {Object} data 要更新的值。
	         */
	        updateRowByIndex: function (index, data) {
	            var
	                self = this,
	                pro = '',
	                item = null,
	                max = self._vm.items().length;
	            if (index >= 0 && index < max) {
	                item = self._vm.items()[index];
	                self._setCellValue(item, data);
	            }
	        },
	        _setCellValue: function (item, value) {
	            if ($.isFunction(item)) {
	                item(value);
	            } else {
	                var pro = '';
	                for (pro in item) {
	                    //更新时无需提供完整的行数据，提供需要更新的数据即可。
	                    if (value[pro] !== undefined) {
	                        this._setCellValue(item[pro], value[pro]);
	                    }
	                }
	            }
	        },
	        /**
	         * 更新一列的所有值。
	         * @method updateColumnByAttribute
	         * @param {String} attribute 列绑定的属性名称。
	         * @param value 要更新的值。
	         * @param {Function} assert 更新断言。返回true时，代表执行更新。
	         */
	        updateColumnByAttribute: function (attribute, value, assert) {
	            var
	            //
	            self = this,
	            //
	            i = self._vm.items().length - 1,
	            //
	            isArray = $.isArray(self._vm.items()[i]) && $.isArray(value),
	            //
	            end = 0;
	            for (; i >= 0; i--) {
	                var item = self._vm.items()[i];
	                if (!assert || assert(item)) {
	                    if (isArray) {
	                        item[attribute](value[i]);
	                    } else {
	                        item[attribute](value);
	                    }
	                }
	            }

	        },
	        /**
	         * 清除所有的行。
	         * @method clearItems
	         */
	        clearItems: function () {
	            var
	            //
	            self = this;
	            return ko.mapping.toJS(self._vm.items.removeAll());
	        },
	        //获取指定序号的行对应的数据。
	        getRowByIndex: function (index) {
	            var
	                items = this._vm.items(),
	                max = items.length;

	            if (index > -1 && index < max) {
	                return ko.mapping.toJS(items[index]);
	            }
	        },
	        /**
	         * 通过单元格的子元素，获取单元格所在行的行号。
	         * @method getRowIndex
	         * @param {Element} 单元格的子元素。
	         */
	        getRowIndex: function (child) {
	            var
	            //
	            parents = $(child).parents("." + _constant.CELL_CLASS),
	            //
	            index = -1;

	            if (parents.length > 0) {
	                index = $(parents[0]).attr("rowIndex");
	            }

	            return index;
	        },

	        clickRow: function (handler, isAdd, name) {
	            $$.updateEventHandler(this, "rowClick", handler, isAdd, name);
	        },
	        /**
	         * 设置排序，过滤，搜索条件。
	         * @method setDataStatus
	         * @param  需要更新的数据
	         */
	        setDataStatus: function (data) {
	            var self = this;
	            if (self._createSortMembers) {
	                $.extend(self._sortCache, data.sort);

	            } else if (data.sort != undefined) {
	                $.error('Please add "aui.datagrid.sort.js" when using datagrid sort.');
	            }

	            if (self._createBeltFilter) {
	                if (self._filterType == _filter.belt) {
	                    $.extend(self._BeltAssert, data.filter);
	                } else {
	                    $.extend(self._BlockAssert, data.filter);
	                }
	            } else if (data.filter != undefined) {
	                $.error('Please add "aui.datagrid.filter.js" when using datagrid filter.');
	            }


	            self._searchKey = data.search;
	        },
	        /**
	         * 获取排序，过滤，搜索条件。
	         * @method getDataStatus
	         */
	        getDataStatus: function () {
	            var self = this;
	            return {
	                sort: self._sortCache,
	                filter: self._filterType == _filter.belt ? self._BeltAssert : self._BlockAssert,
	                search: self._searchKey
	            };
	        },
	        /**
	         * 清除所有添加到Dom元素上的修改。
	         * @method _destroy
	         * @private
	         */
	        _destroy: function () {
	            var ns = this.eventNamespace;

	            try {
	                if (this._item) {
	                    this._item.off(ns);
	                }
	                if (this._cells) {
	                    this._cells.off(ns);
	                }

	                this.element.off(ns);

	                this._vm.items.removeAll();

	                if (this.options.isReadOnly === false) {
	                    this._destroyEdit();
	                }

	                if (this._canUserResize === true) {
	                    this._destroyColumnResize();
	                }

	                this._rowPresenter.remove();

	                this._content.remove();

	                this._headerDrags.remove();

	                this._headerSorts.remove();

	                this._headerContent.remove();

	                this._headerCell.remove();

	                this._header.remove();

	            } catch (e) {
	                $$.log('datagrid destroy error: ' + e.message);
	            } finally {
	                this._trigger("destroy", null, $$.Event({
	                    element: this.element
	                }));
	            }
	        }
	    });

	    /**
	     * 创建相关逻辑。
	     */
	    $.extend($.aui.datagrid.prototype, {
	        /**
	         * 创建datagrid。
	         * @method _createDataGrid
	         */
	        _createDataGrid: function () {
	            var
	            //
	            self = this,
	            h = -1,
	            //
	            html = [],
	            //控件高度
	            element = self.element,
	            //加上标题的高度
	            eHeight = self.options.height + 45,
	            //视区宽度
	            width = self._viewWidth;

	            if (self._filterType == _filter.belt) {
	                eHeight += 45;
	            }

	            element.addClass(_constant.DATAGRID_CLASS);

	            //百分比模式下，不能设置宽度。防止element，横向格式化过渡利用margin失效。
	            if ($.isNumeric(width)) {
	                element.css("width", width);
	            }
	            //如果设置options中的height
	            if ($.isNumeric(self.options.height)) {
	                element.height(eHeight);
	            }

	            //创建调整列宽功能的定位标尺
	            if (self._createResizingMembers) {
	                html[++h] = '<div class="' + _constant.DRAG_POPUP_CLASS + '">';
	                html[++h] = '<div class="' + _constant.DRAG_RULER_CLASS + '" tabindex="0"></div>';
	                html[++h] = '</div>';
	            }

	            html[++h] = self._createHeader();

	            if (self._filterType == _filter.belt) {
	                if (self._createBeltFilter) {
	                    html[++h] = self._createBeltFilter();
	                } else {
	                    $.error('Please add "aui.datagrid.filter.js" when using datagrid filter.');
	                }
	            }
	            html[++h] = self._createMessage();
	            html[++h] = self._createRows();

	            element.html(html.join(''));
	            //需要优化
	            self._container = element.wrap('<div style="position:relative;"></div>').parent().prepend(self._createHeaderSettings());
	            if (self.options.isResponsive == true) {
	                self._container.append(self._createResponsiveRows());
	            }

	            return this;
	        },
	        /**
	         * 创建标题。
	         * @method _createHeader
	         * @private
	         */
	        _createHeader: function () {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            count = columns.length,
	            //
	            frozen = self._frozenColumnCount,
	            //
	            cellClass = '',
	            //单元格拖拽部分的样式
	            dragClass = '',
	            //
	            i = 0,
	            //
	            h = -1,
	            //
	            html = [];
	            html[++h] = '<div class="' + _constant.DATAGRID_HEADER_CLASS + '">';

	            if (typeof self.options.width != "string") {
	                html[++h] = '<div class="' + _constant.DATAGRID_SCROLL_CONTAINER + ' ' + _constant.HEADER_CONTAINER_CLASS + '" style="width:' + (self._viewWidth) + 'px;">';
	            } else {
	                html[++h] = '<div class="' + _constant.DATAGRID_SCROLL_CONTAINER + ' ' + _constant.HEADER_CONTAINER_CLASS + '">';
	            }

	            if (frozen != 0 && self._isPercentage == false) {
	                html[++h] = self._createHeaderTable(0, frozen, true);
	                html[++h] = self._createHeaderTable(frozen, count, true);
	            } else {
	                html[++h] = self._createHeaderTable(0, count, false);
	            }

	            html[++h] = '</div>';
	            html[++h] = '</div>';
	            return html.join('');
	        },

	        /**
	         * 创建信息提示区域
	         * @method _createMessage
	         * @private
	         */
	        _createMessage: function () {
	            return '<div class="' + _constant.DATAGRIR_MESSAGE_CONTAINER_CLASS + '" ><div class="' + _constant.DATAGRIR_MESSAGE_CLASS + '">' + this.options.noneMessage + '</div></div>';
	        },
	        /**
	         * 创建行。
	         * @method _createRows
	         * @private
	         */
	        _createRows: function () {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            width = self._viewWidth,
	            //
	            count = columns.length,
	            //
	            rowHeight = self.options.rowHeight == 'auto' ? self.options.rowHeight : self.options.rowHeight + 'px',
	            //
	            frozen = self._frozenColumnCount,
	            //
	            column = null,
	            //单元格的样式
	            cell_class = '',
	            //单元格的宽度
	            cellWidth = '',
	            //
	            i = 0,
	            //
	            h = -1,
	            //
	            html = [];

	            if (typeof self.options.width != "string") {
	                html[++h] = '<div class="' + _constant.DATAGRID_CONTENT_CLASS + '" style="width:' + (self._viewWidth) + 'px;">';
	            } else {
	                html[++h] = '<div class="' + _constant.DATAGRID_CONTENT_CLASS + '">';
	            }
	            if (frozen != 0 && self._isPercentage == false) {
	                html[++h] = self._createRowTable(0, frozen, true);
	                html[++h] = self._createRowTable(frozen, count, true);
	            } else {
	                html[++h] = self._createRowTable(0, count, false);
	            }

	            return html.join('');
	        },
	        //获取Container部分的布局属性
	        _getContainerProperty: function (isFrozen, start) {
	            var
	                self = this,
	                //datagrid的视区宽度
	                viewWidth = self._viewWidth == 'auto' ? self.element.width() : self._viewWidth,
	                //非锁定区域的偏移量
	                frozenWidth = 0,
	                //容器的class
	                containerClass,
	                //容器的宽度
	                width = 0;

	            //开启冻结了后把datagrid分成两部分。
	            if (isFrozen) {
	                if (start == 0) {
	                    width = self._getFrozenWidth();
	                    containerClass = _constant.LOCKED_AREA_CLASS;
	                } else {
	                    frozenWidth = self._getFrozenWidth() + 'px';
	                    width = viewWidth - self._getFrozenWidth() - 17;
	                    containerClass = _constant.UNLOCKED_AREA_CLASS;
	                }

	            } else {
	                containerClass = _constant.UNLOCKED_AREA_CLASS;
	                width = viewWidth - 17;
	            }

	            if (typeof self.options.width == "string" && self.options.width != 'auto') {
	                width += '%';
	            } else {
	                width += 'px';
	            }

	            return { width: width, containerClass: containerClass, frozenWidth: frozenWidth };

	        },
	        _createHeaderTable: function (start, end, isFrozen) {
	            var
	                //
	                self = this,
	                //
	                columns = self._columns,
	                //
	                count = columns.length,
	                //
	                frozen = self._frozenColumnCount,
	                //
	                cellClass = '',
	                //单元格拖拽部分的样式
	                dragClass = '',
	                //
	                i = 0,
	                //布局属性
	                containerProperty = self._getContainerProperty(isFrozen, start),
	                //
	                h = -1,
	                //
	                html = [];

	            html[++h] = '<div class="' + containerProperty.containerClass + '" style="margin-left:' + containerProperty.frozenWidth + ';" >';

	            if (typeof self.options.width == "string" && self.options.width != 'auto') {
	                html[++h] = '<table class="' + _constant.DATAGRID_TABLE_CLASS + '" role="grid" style="width:100%;">';
	            } else {
	                html[++h] = '<table class="' + _constant.DATAGRID_TABLE_CLASS + '" role="grid" style="width:' + containerProperty.width + ';">';
	            }

	            html[++h] = '<colgroup>';
	            for (i = start; i < end; i++) {
	                if (typeof self.options.width == "string" && self.options.width != 'auto') {
	                    html[++h] = '<col class="' + self._getColumnClass(i) + '" style="width: ' + columns[i].width + '%" " />';
	                } else {
	                    html[++h] = '<col class="' + self._getColumnClass(i) + '" style="width: ' + columns[i].width + 'px" data-width="' + columns[i].width + '" />';
	                }

	            }

	            if (!isFrozen) {
	                //添加动态列
	                if (typeof self.options.width == "string" && self.options.width != 'auto') {
	                    html[++h] = '<!-- ko foreach: $root.dynamicColumns -->';
	                    html[++h] = '<col data-bind="style:{width:width()+\'%\'}" >';
	                    html[++h] = '<!-- /ko -->';
	                } else {
	                    html[++h] = '<!-- ko foreach: $root.dynamicColumns -->';
	                    html[++h] = '<col data-bind="style:{width:width()+\'px\'}" >';
	                    html[++h] = '<!-- /ko -->';
	                }
	            }

	            //添加填充列
	            if (!isFrozen || start > 0) {
	                html[++h] = '<col class="' + _constant.FILL_COLUMN + '" />';
	            }

	            if (isFrozen && start == 0) {
	                html[++h] = '<col />';
	            }

	            html[++h] = '</colgroup>';

	            html[++h] = '<thead>';
	            html[++h] = '<tr role="row">';
	            for (i = start; i < end; i++) {
	                cellClass = _constant.HEADER_CELLS_CLASS + ' ' + self._getCellClass(i, true);
	                html[++h] = '<th tabindex="0" role="columnheader" class="' + cellClass + '" columnindex="' + i + '">';

	                html[++h] = '<div class="' + _constant.CELL_BACKGROUND_PANEL_CLASS + '">';
	                if (typeof columns[i].headerBackgroundTemplate == 'string') {
	                    html[++h] = columns[i].headerBackgroundTemplate;
	                }
	                html[++h] = '</div>';

	                html[++h] = '<div class="' + _constant.HEADER_CONTENT_CLASS + '" columnindex="' + i + '" >';

	                if (columns[i].headerTemplate == null) {
	                    html[++h] = '<div class="' + _constant.HEADER_CELLS_CONTENT_CLASS + '">';
	                    html[++h] = columns[i].name;
	                    html[++h] = '</div>';
	                } else {
	                    html[++h] = columns[i].headerTemplate;
	                }
	                /*header options*/
	                if (columns[i].isSortable || columns[i].hasHiddenColumn || columns[i].filterCheckName) {
	                    html[++h] = '<div tabindex="0" role="button" aria-span="sort" class="' + _constant.HEADER_SETTING_CLASS + ' ' + _constant.HEADER_SETTING_ICON_CLASS + '" columnindex="' + i + '"></div>';
	                } else {
	                    html[++h] = '<div style="display:none;" class="' + _constant.HEADER_SETTING_CLASS + '" columnindex="' + i + '"></div>';
	                }
	                // end header options

	                /*drag*/
	                dragClass = _constant.HEADER_DRAG_CLASS;
	                if (self.options.isColumnResizable == false || columns[i].isResizable === false) {
	                    dragClass += ' ' + _constant.HEADER_DRAG_DISABLED_CLASS;
	                }
	                html[++h] = '<div class="' + dragClass + '" data-index="' + i + '"></div>';
	                /*end drag*/
	                html[++h] = '</div>';

	                html[++h] = '</th>';
	            }
	            if (!isFrozen) {
	                html[++h] = '<!-- ko foreach: {data:$root.dynamicColumns,as:\'hItem\'} -->';
	                html[++h] = '<th tabindex="0" role="columnheader"  data-bind="attr:{class:\'' + _constant.HEADER_CELLS_CLASS + ' \'+ $root._getDynamicCellClass($data,$index(),' + i + ',\'' + self._cellClassPre + '\'), columnindex:$index()+' + i + '}">';

	                //背景模板
	                html[++h] = '<!-- ko if: !!hItem.headerBackgroundTemplateName -->';
	                html[++h] = '<div class="' + _constant.CELL_BACKGROUND_PANEL_CLASS + '" data-bind="template:{name:$root._dynamicHeaderBackgroundTemplate,data:$data},attr:{columnIndex:$index()+' + i + '}">';
	                html[++h] = '</div>';
	                html[++h] = '<!-- /ko -->';

	                html[++h] = '<!-- ko if: !hItem.headerBackgroundTemplateName -->';
	                html[++h] = '<div class="' + _constant.CELL_BACKGROUND_PANEL_CLASS + '" data-bind="attr:{columnIndex:$index()+' + i + '}">';
	                html[++h] = '</div>';
	                html[++h] = '<!-- /ko -->';

	                html[++h] = '<!-- ko if: !hItem.headerTemplateName -->';
	                html[++h] = '<div class="' + _constant.HEADER_CONTENT_CLASS + '" columnindex="' + i + '" >';
	                html[++h] = '<div data-bind="text:name"></div>';
	                html[++h] = '</div>';
	                html[++h] = '<!-- /ko -->';

	                html[++h] = '<!-- ko if: !!hItem.headerTemplateName -->';
	                html[++h] = '<div class="' + _constant.DYNAMIC_HEADER_CONTENT_CLASS + '" data-bind="template:{name:$root._dynamicHeaderTemplate,data:$data},attr:{columnIndex:$index()+' + i + '}"></div>';
	                html[++h] = '<!-- /ko -->';

	                html[++h] = '</th>';
	                html[++h] = '<!-- /ko -->';
	            }
	            //添加填充列
	            if (!isFrozen || start > 0) {
	                html[++h] = '<th></th>';
	            }
	            html[++h] = '</tr>';
	            html[++h] = '</thead>';
	            html[++h] = '</table>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        /**
	         * 根据范围（由start 和 end确定）。创建内容区域的表格
	         * @param {number} start 起始列的序号
	         * @param {number} end 结束列的序号
	         * @param {boolean} isFrozen 表示列是否冻结，true表示冻结。
	         */
	        _createRowTable: function (start, end, isFrozen) {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            width = 0,
	            //
	            rowHeight = self.options.rowHeight == 'auto' ? self.options.rowHeight : self.options.rowHeight + 'px',
	            //
	            column = null,
	            //单元格的样式
	            cell_class = '',
	            //单元格的宽度
	            cellWidth = '',
	            //
	            i = 0,
	            //布局属性
	            containerProperty = self._getContainerProperty(isFrozen, start),
	            //
	            h = -1,
	            //
	            html = [];

	            if (typeof self.options.width == "string" && self.options.width != 'auto') {
	                html[++h] = '<div class="' + containerProperty.containerClass + '" style="margin-left:' + containerProperty.frozenWidth + ';overflow-x:hidden;" >';
	                //百分比模式
	                html[++h] = '<table class="' + _constant.DATAGRID_TABLE_CLASS + '" role="grid" style="width:100%;">';
	            } else {
	                html[++h] = '<div class="' + containerProperty.containerClass + '" style="margin-left:' + containerProperty.frozenWidth + ';" >';
	                html[++h] = '<table class="' + _constant.DATAGRID_TABLE_CLASS + '" role="grid" style="width:' + containerProperty.width + ';">';
	            }

	            html[++h] = '<colgroup>';
	            for (i = start; i < end; i++) {
	                if (typeof self.options.width == "string" && self.options.width != 'auto') {
	                    html[++h] = '<col class="' + self._getColumnClass(i) + '" style="width: ' + columns[i].width + '%" />';
	                } else {
	                    html[++h] = '<col class="' + self._getColumnClass(i) + '" style="width: ' + columns[i].width + 'px" />';
	                }

	            }

	            if (!isFrozen) {
	                //添加动态列
	                if (typeof self.options.width == "string" && self.options.width != 'auto') {
	                    html[++h] = '<!-- ko foreach: $root.dynamicColumns -->';
	                    html[++h] = '<col data-bind="style:{width:width()+\'%\'}" >';
	                    html[++h] = '<!-- /ko -->';
	                } else {
	                    html[++h] = '<!-- ko foreach: $root.dynamicColumns -->';
	                    html[++h] = '<col data-bind="style:{width:width()+\'px\'}" >';
	                    html[++h] = '<!-- /ko -->';
	                }
	            }

	            //添加填充列
	            if (!isFrozen || start > 0) {
	                html[++h] = '<col class="' + _constant.FILL_COLUMN + '" />';
	            }

	            if (isFrozen && start == 0) {
	                html[++h] = '<col />';
	            }

	            html[++h] = '</colgroup>';

	            html[++h] = '<tbody class="' + _constant.CONTENT_ROW_PRESENTER + '" data-bind="foreach: {data:items,as:\'item\'}">';

	            // 生成行
	            if (typeof this.options.rowStyle == 'string') {
	                html[++h] = '<tr role="row" class="' + _constant.ROW_CLASS + ' ' + _constant.SELECTED_ROW_CLASS + '" data-bind="attr:{index: $index},css:{\'' + _constant.SELECTED_ROW_CLASS + '\':' + self._isSelected + '()>0,\'' + _constant.ROW_MOUSEOVER_CLASS + '\':' + self._isMouseOver + '()>0},style:{display:' + self._display + ',' + this.options.rowStyle + '}">';
	            } else {
	                html[++h] = '<tr role="row" class="' + _constant.ROW_CLASS + ' ' + _constant.SELECTED_ROW_CLASS + '" data-bind="attr:{index: $index},css:{\'' + _constant.SELECTED_ROW_CLASS + '\':' + self._isSelected + '()>0,\'' + _constant.ROW_MOUSEOVER_CLASS + '\':' + self._isMouseOver + '()>0},style:{display:' + self._display + '}">';
	            }

	            // 生成列
	            for (i = start; i < end; i++) {
	                cell_class = _constant.CELL_CLASS + " " + self._getCellClass(i);
	                cellWidth = self._getCellWidth(i);

	                column = columns[i];
	                html[++h] = '<td role="gridcell" tabindex="0" columnIndex="' + i + '" class="' + cell_class + '" data-bind="attr:{rowIndex: $index}">';

	                if ($$.browser.browser == "msie") {
	                    html[++h] = '<div class="' + _constant.IE_PANEL + '">';
	                }

	                html[++h] = '<div class="' + _constant.CELL_BACKGROUND_PANEL_CLASS + '">';
	                if (typeof column.backgroundTemplate == 'string') {
	                    html[++h] = column.backgroundTemplate;
	                }
	                html[++h] = '</div>';

	                if (rowHeight != 'auto') {
	                    html[++h] = '<div columnIndex="' + i + '"  class="' + _constant.CELL_CONTENT_CLASS + '" data-bind="attr:{rowIndex: $index}" style="height:' + rowHeight + ';line-height:' + rowHeight + '">';
	                } else {
	                    html[++h] = '<div columnIndex="' + i + '"  class="' + _constant.CELL_CONTENT_CLASS + '" data-bind="attr:{rowIndex: $index}">';
	                }
	                switch (column.type) {
	                    case _columnType.title:
	                        html[++h] = '<div data-bind="text:' + column.binding + ',attr:{title:' + column.binding + '}" style="overflow:hidden;text-overflow:ellipsis"  class="' + _constant.CELL_TEXT_CONTENT_CLASS + '"></div>';
	                        break;
	                    case _columnType.ellipsis:
	                        html[++h] = '<div data-bind="text:' + column.binding + ',attr:{title:' + column.binding + '}" style="overflow:hidden;text-overflow:ellipsis; white-space:nowrap;"  class="' + _constant.CELL_TEXT_CONTENT_CLASS + '"></div>';
	                        break;
	                    case _columnType.text:
	                        html[++h] = '<div data-bind="text: ' + column.binding + '"  class="' + _constant.CELL_TEXT_CONTENT_CLASS + '"></div>';
	                        break;
	                    case _columnType.template:
	                        html[++h] = column.columnTemplate;
	                        break;
	                    case _columnType.checkbox:
	                        html[++h] = '<div class="' + _constant.CELL_CHECKBOX_CLASS + '"><input class="' + _constant.CELL_WIDGET_CLASS + '" type="checkbox" data-bind="checked: ' + column.binding + '"/></div>';
	                        break;
	                    default:
	                        html[++h] = '<div data-bind="text: ' + column.binding + '"  class="' + _constant.CELL_TEXT_CONTENT_CLASS + '"></div>';
	                        break;
	                }
	                html[++h] = '</div>';
	                if (self.options.isReadOnly == false && column.cellEditingTemplate != undefined) {
	                    if (!column.binding) {
	                        $.error('The "binding" property for column "' + column.name + '" is undefined.Please check your initialize settings for datagrid.');
	                    }
	                    html[++h] = '<div class="' + _constant.CELL_EDITING_CLASS + '" style="display:none;">' + column.cellEditingTemplate + '</div>';
	                }

	                if ($$.browser.browser == "msie") {
	                    html[++h] = '</div>';
	                }

	                html[++h] = '</td>';
	            }

	            if (!isFrozen) {
	                html[++h] = '<!-- ko foreach: {data:$root.dynamicColumns,as:\'dItem\'} -->';
	                html[++h] = '<td tabindex="0" role="gridcell" data-bind="attr:{class:\'' + _constant.CELL_CLASS + ' \'+ $root._getDynamicCellClass($data,$index(),' + i + ',\'' + self._cellClassPre + '\'), rowIndex:$parentContext.$index,columnIndex:$index()+' + i + '}">';

	                if ($$.browser.browser == "msie") {
	                    html[++h] = '<div class="' + _constant.IE_PANEL + '">';
	                }

	                //背景模板
	                html[++h] = '<!-- ko if: !!dItem.backgroundTemplateName -->';
	                html[++h] = '<div class="' + _constant.CELL_BACKGROUND_PANEL_CLASS + '" data-bind="template:{name:$root._dynamicBackgroundTemplate,data:$data},attr:{rowIndex:$parentContext.$index,columnIndex:$index()+' + i + '}">';
	                html[++h] = '</div>';
	                html[++h] = '<!-- /ko -->';

	                html[++h] = '<!-- ko if: !dItem.backgroundTemplateName -->';
	                html[++h] = '<div class="' + _constant.CELL_BACKGROUND_PANEL_CLASS + '" data-bind="attr:{rowIndex:$parentContext.$index,columnIndex:$index()+' + i + '}">';
	                html[++h] = '</div>';
	                html[++h] = '<!-- /ko -->';

	                if (rowHeight != 'auto') {
	                    html[++h] = '<div data-bind="template:{name:$root._dynamicTemplate,data:$data},attr:{rowIndex:$parentContext.$index,columnIndex:$index()+' + i + '}" class="' + _constant.CELL_CONTENT_CLASS + '" style="height:' + rowHeight + ';line-height:' + rowHeight + '">';
	                } else {
	                    html[++h] = '<div data-bind="template:{name:$root._dynamicTemplate,data:$data},attr:{rowIndex:$parentContext.$index,columnIndex:$index()+' + i + '}" class="' + _constant.CELL_CONTENT_CLASS + '">';
	                }

	                if ($$.browser.browser == "msie") {
	                    html[++h] = '</div>';
	                }
	                html[++h] = '</td>';
	                html[++h] = '<!-- /ko -->';
	            }

	            //添加填充列
	            if (!isFrozen || start > 0) {
	                html[++h] = '<td data-bind="attr:{rowIndex: $index}"></td>';
	            }
	            html[++h] = '</tr>';

	            // 如果开启 了details功能，生成对应的行
	            if (self._hasDetails) {
	                var value = (self.options.rowDetailsVisibilityMode === _detailsMode.visible) ? "block" : "none";
	                html[++h] = '<tr class="' + _constant.DETAILS_ROW_CLASS + '" data-bind="attr:{rowIndex: $index}" style="display:' + value + '"><td colspan="' + self.options.columns.length + '">' + self.options.rowDetailsTemplate + '</td></tr>';
	            }
	            html[++h] = '</tbody>';
	            html[++h] = '</table>';
	            html[++h] = '</div>';

	            return html.join('');
	        }
	    });

	    /**
	     * 布局相关的逻辑。
	     */
	    $.extend($.aui.datagrid.prototype, {
	        /**
	         * 判断设置的width是否是数字。
	         * @method _isWidthNumeric
	         * @private
	         */
	        _isWidthNumeric: function () {
	            var self = this;
	            return $.isNumeric(self._width) && (typeof self._width != 'string');
	        },
	        /**
	         * 获取控件的宽度。
	         * @method _getViewWidth
	         * @private
	         */
	        _getViewWidth: function () {
	            var
	            //
	            self = this,
	            //
	            width = self._width;
	            return self._isWidthNumeric() || self._width == 'auto' ? width : width + '%';
	        },
	        //初始化后获取冻结区域的宽度
	        _getCurrentFrozenWidth: function () {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            width = 0,
	            //
	            columns = self._allTableCols,
	            //冻结列数
	            frozen = self._frozenColumnCount;

	            for (; i < frozen; i++) {
	                width += parseInt(columns[i][0].style.width);
	            }
	            return width;
	        },
	        /**
	         * 初始化获取冻结区域的宽度。
	         */
	        _getFrozenWidth: function () {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            width = 0,
	            //
	            columns = self._columns,
	            //冻结列数
	            frozen = self._frozenColumnCount;

	            for (; i < frozen; i++) {
	                width += columns[i].width;
	            }
	            return width;
	        },
	        _getTotalWidth: function () {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            count = columns.length,
	            //
	            i = 0,
	            //返回值
	            value = 0;

	            for (; i < count; i++) {
	                value += columns[i].width;
	            }
	            return value;
	        },
	        //设置非锁定区域table的宽度
	        _setTableWidth: function () {
	            var
	                self = this,
	                i = 0,
	                cols = self._allTableCols,
	                c = self._columns.length,
	                forzen = self._getCurrentFrozenWidth(),
	                //视区宽度
	                viewWidth = self._viewWidth == 'auto' ? self.element.width() : self._viewWidth,
	                width = self._frozenColumnCount ? viewWidth - forzen : viewWidth,
	                current = 0;

	            width = self._hasVerticalScroll ? width - 17 : width;

	            for (; i < c; i++) {
	                if (!cols[i].hasClass(_constant.HIDE_TD_CLASS)) {
	                    //ie10用width取值会造成最后一列错位
	                    current += cols[i].width();
	                }
	            }
	            current -= forzen;
	            if (current > width) {
	                width = current;
	            }

	            self._unLockedTables.width(width);
	        },
	        /**
	         * 获取cell的宽度
	         * @param {Int} index Cell的序号
	         */
	        _getCellWidth: function (index) {
	            var
	            //
	            self = this,
	            //
	            cell = self._columns[index],
	            //
	            value = 0;
	            if (self._isWidthNumeric() || self._width == 'auto') {
	                value = ($.isNumeric(cell.width)) ? cell.width + 'px' : "auto";
	            } else {
	                value = cell.width + '%';
	            }
	            return value
	        },
	        /**
	         * 获取列的偏移值
	         * @param {int} index 列号
	         */
	        _getColumnLeft: function (index) {
	            var
	            //
	            self = this,
	            //
	            value = 0,
	            //
	            i = 0;

	            if (index > 0) {
	                for (; i < index; i++) {
	                    value += self._columns[i].width;
	                }
	            }
	            value = self._isWidthNumeric() || self._width == 'auto' ? value + 'px' : value + '%';

	            return value;
	        },
	        /**
	         * 更新样式,初始化内部控件。
	         * @private
	         * @method _updateLayout
	         */
	        _updateLayout: function () {
	            var
	                self = this,
	                maxHeight = self.options.maxHeight;

	            self._content.css('height', self.options.height);

	            if (self.options.height == "auto" && maxHeight > 0) {
	                self._lockedContent.css('max-height', maxHeight);
	                self._unLockedContent.css('max-height', maxHeight);
	            }

	            self._scrollableViewWidth = self.element.width() - self._frozenWidth;

	            return this;
	        }
	    });

	    /*
	     * 行相关的逻辑。
	     */
	    $.extend($.aui.datagrid.prototype, {
	        /**
	         * 获取一行中所有的cell。
	         * @method _getRowCells
	         * @private
	         * @param {Object} row 行对应的jQuery对象。
	         */
	        _getRowCells: function (row) {
	            return row.children("div");
	        },
	        /**
	         * 为所有单元格添加必要的属性和事件。
	         * @method _initializeCells
	         * @private
	         * @param {jQuery} items 所有行的jQuery对象。
	         */
	        _initializeCells: function () {
	            var
	            //
	            self = this,
	            //
	            namespace = self.eventNamespace,
	            //
	            cells = self._cells;

	            cells
	            //
	            .off(namespace)
	            //
	            .on('focus' + namespace, self, self._onCellFocus)
	            //
	            .on('blur' + namespace, self, self._onCellBlur)
	            //ie下点击cell时，不触发focus，需要在click事件中记录当前单元格
	            .on('click' + namespace, self, function (e) {
	                if (!self._isCellFocus && $$.browser.browser == 'msie') {
	                    $(this).focus();
	                }
	            });


	            self._cellWidgets
	            //
	            .off(namespace)
	            //
	            .on('click' + namespace, function (e) { e.stopPropagation(); })
	            //
	            .on('keydown' + namespace, function (e) {
	                if (e.which != 27 && e.which != 13) {
	                    e.stopPropagation();
	                }
	                return true;
	            });
	            self._cellEditing.on('blur', self, self._editingCellLostFocus);
	            if (self.options.isReadOnly === false) {
	                cells.on('dblclick' + namespace, self, self._onCellDoubleClick);
	            }
	        },
	        /**
	         * 添加斑马线。
	         * @method _addZebraLists
	         * @private
	         */
	        _addZebraLists: function () {
	            var self = this;
	            if (self._hasZebraCrossing) {
	                if (self._frozenColumnCount > 0) {
	                    self._addZebraListsByItems(self._lockedItem);
	                    self._addZebraListsByItems(self._unLockedItem);
	                } else {
	                    if (self._item) {
	                        self._addZebraListsByItems(self._item);
	                    }
	                }
	            }
	        },
	        /**
	         * 通过items设置斑马线
	         * @param {jQuery对象} 需要添加斑马线的jQuery对象
	         */
	        _addZebraListsByItems: function (items) {
	            //所有显示行
	            items = items.filter(":visible");
	            //所有单数单元格
	            items.filter(":even").removeClass(_constant.SINGLE_ROW_CLASS + " " + _constant.EVEN_ROW_CLASS).addClass(_constant.SINGLE_ROW_CLASS);
	            //所有双数单元格
	            items.filter(":odd").removeClass(_constant.SINGLE_ROW_CLASS + " " + _constant.EVEN_ROW_CLASS).addClass(_constant.EVEN_ROW_CLASS);
	        },

	        /**
	         * 鼠标移入行时触发。
	         * @method _onRowMouseOver
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onRowMouseOver: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            index = this.getAttribute('index'),
	            data = {
	                element: self.element,
	                parameters: {

	                }
	            };

	            data.newValue = (self.index == -1) ? null : self._vm.items()[index];

	            if (self._mouseoverIndex != -1) {
	                _row_vsm.changeVisualStates.call(self._vm.items()[index], _row_vsm.mouseout);
	            }

	            _row_vsm.changeVisualStates.call(self._vm.items()[index], _row_vsm.mouseover);

	            self._mouseoverIndex = index;

	            $$.executeEventHandler(self, "rowMouseover", self.options.rowMouseover, e, data);
	        },
	        /**
	         * 鼠标移出行时触发。
	         * @method _onRowMouseout
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onRowMouseout: function (e) {
	            var
	                self = e.data,
	                data = {
	                    element: self.element,
	                    parameters: {

	                    }
	                },
	                index = this.getAttribute('index');
	            data.newValue = (self.index == -1) ? null : self._vm.items()[index];
	            _row_vsm.changeVisualStates.call(self._vm.items()[this.getAttribute('index')], _row_vsm.mouseout);
	            $$.executeEventHandler(self, "rowMouseout", self.options.rowMouseout, e, data);
	        }
	    });

	    /**
	     * 单元格的相关逻辑
	     */
	    $.extend($.aui.datagrid.prototype, {
	        _createCellMembers: function () {
	            //当前选中的单元格
	            this._currentSelectedCell = {
	                /**
	                 * 获取或设置一个值，该值表示当前获得焦点的单元格
	                 *
	                 * @type {jQuery}
	                 */
	                cell: undefined,

	                /**
	                 * 获取或设置一个值，该值表示cell所在行的行号
	                 *
	                 * @type {Int}
	                 */
	                rowIndex: undefined,

	                /**
	                 * 获取或设置一个值，该值表示cell的序号
	                 *
	                 * @type {Int}
	                 */
	                columnIndex: undefined,

	                /**
	                 * 获取或设置一个值，该值表示cell在通常模式下显示的部分
	                 *
	                 * @type {jQuery}
	                 */
	                showPart: undefined,

	                /**
	                 * 获取或设置一个值，该值表示cell在编辑模式下显示的部分
	                 *
	                 * @type {jQuery}
	                 */
	                editingPart: undefined,

	                /**
	                 * 获取或设置一个值，该值表示cell绑定的数据源的属性名称
	                 *
	                 * @type {String}
	                 */
	                bindName: undefined,

	                /**
	                 * 切换到编辑模式后，cell绑定的数据源的值
	                 */
	                oldValue: undefined,

	                /**
	                 * 获取或设置一个值，该值表示绑定模式对应的编辑元素
	                 */
	                editingElement: undefined,

	                /**
	                 * 获取或设置一个值，该值表示是可以进入编辑模式
	                 *
	                 */
	                isReadOnly: function (self) {
	                    var returnValue = false;
	                    if (this.cell !== undefined) {
	                        if (self.options.isReadOnly === true || self._columns[this.columnIndex].isReadOnly === true || this.editingElement.length === 0) {
	                            returnValue = true;
	                        }
	                    } else {
	                        // Details区域是只读的，触发键盘时isReadOnly设置成true
	                        returnValue = true;
	                    }

	                    return returnValue;
	                },
	                /**
	                 * 获取或设置一个值，该值表示cell的当前状态（通常模式还是编辑模式）
	                 *
	                 * @type {cellMode}
	                 */
	                mode: _cellMode.normal
	            }

	            return this;
	        },
	        _getCellValue: function (name, index) {
	            var
	                self = this,
	                i = 0,
	                propertys = name.split("."),
	                value = self._vm.items()[index],
	                count = propertys.length;
	            for (; i < count; i++) {
	                value = value[propertys[i]];
	                if ($.isFunction(value)) {
	                    value = value();
	                }
	            }

	            return value;
	        },
	        /*
	         * 编辑元素失去焦点时触发
	         *
	         */
	        _editingCellLostFocus: function (e) {
	            e.data._goToShowMode();
	        },
	        //根据index获取col的class
	        _getColumnClass: function (index) {
	            var
	                self = this,
	                visibility = self._columns[index].visibility,
	                cn = self._colClassPre + "_" + index;

	            if (visibility == _visibility.collapsed) {
	                cn += " " + _constant.HIDE_TD_CLASS;
	            }

	            return cn;
	        },
	        /**
	         * 根据index获取cell的class名称
	         *
	         * @param {Int} index 列的序号
	         * @param {Bollean} isHeader 是否是标题
	         */
	        _getCellClass: function (index, isHeader) {
	            var
	            //
	            self = this,
	            //
	            cell = self._columns[index],
	            //
	            cn = self._cellClassPre + "_" + index;
	            if (cell.visibility == _visibility.collapsed) {
	                cn += " " + _constant.HIDE_TD_CLASS;
	            }

	            if (isHeader === true && cell.isSortable !== true) {
	                cn += " " + _constant.HEADER_NOT_SORT_CLASS;
	            }

	            return cn;
	        },

	        _getDynamicCellClass: function (setting, i, fixed, pre, isHeader) {
	            var
	                setting = ko.mapping.toJS(setting),
	                cn = pre + "_" + (i + fixed);
	            if (setting.visibility == _visibility.collapsed) {
	                cn += " " + _constant.HIDE_TD_CLASS;
	            }

	            return cn;
	        }
	    });

	    /**
	     * 滚动条的相关逻辑。
	     */
	    $.extend($.aui.datagrid.prototype, {
	        //设置一个值，该值表示纵向滚动条是否显示。
	        _hasVerticalScroll: false,
	        /**
	         * element大小变化时触发。
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onWindowResize: function (e) {
	            e.data._resizeDatagrid();
	        },
	        _resizeDatagrid: function () {
	            var
	            //
	            self = this;

	            //更新非锁定区域的宽度
	            if (typeof self.options.width != "string" || self.options.width == 'auto') {
	                self._setTableWidth();
	                self._updateLockedHeight()
	            }
	            if (self.options.isResponsive == true) {
	                self._updateSelectAllLocation();
	                if (self.options.height == 'auto') {
	                    self.element.height('auto');
	                    self.element.height(self.element.height() + 15);
	                }
	            }


	            //关闭所有展开的设置窗体。
	            if (self._blockFilters instanceof $) {
	                self._blockFilters.hide();
	            }
	            if (self.options.isResponsive) {
	                self._responsiveSettingSortContainer.dialog('hide');
	                self._responsiveSettingFilterContainer.dialog('hide');
	            }

	            return self;
	        },
	        _onHeaderScroll: function (e) {
	            var self = e.data;
	            self._unLockedContent.scrollLeft(self._headerUnLocked.scrollLeft());
	        },
	        _onLockedScroll: function (e) {
	            var self = e.data;
	            self._unLockedContent.scrollTop(self._lockedContent.scrollTop());
	        },
	        /**
	         * 内容区域滚动时触发
	         */
	        _onContentScroll: function (e) {
	            //屏蔽滚动条区域的滚动条
	            var self = e.data;
	            self._lockedContent.scrollTop(self._unLockedContent.scrollTop());
	            self._headerUnLocked.scrollLeft(self._unLockedContent.scrollLeft());
	        },
	        /*
	         * 更新datagrid的布局
	         */
	        updateLayout: function () {
	            var self = this;
	            self._resizeDatagrid()._resetVerticalScroll();
	        },
	        resetVerticalScroll: function () {
	            this._resetVerticalScroll();
	        },
	        //重新机选非锁定区域的滚动条和高度
	        _resetVerticalScroll: function () {
	            var
	            //
	            self = this,
	            //
	            content = self._unLockedContent,
	            //
	            headerWrapper = self._headerWrapper,
	            //
	            scrollTop = content.scrollTop();

	            //非锁定区域的高度和纵向滚动条,在数据变化和横向滚动条显示隐藏的时候，需要重新计算
	            if (scrollTop > 0) {
	                self._updateHeaderWrapper(17);
	                self._hasVerticalScroll = true;
	            } else {
	                content.scrollTop(1);
	                if (content.scrollTop() > 0) {
	                    self._updateHeaderWrapper(17);
	                    self._hasVerticalScroll = true;
	                } else {
	                    self._updateHeaderWrapper(0);
	                    self._hasVerticalScroll = false;
	                }
	                content.scrollTop(0);
	            }

	            //更新非锁定区域的宽度
	            if (typeof self.options.width != "string" || self.options.width == 'auto') {
	                self._setTableWidth();
	            }

	            self._updateLockedHeight();

	            return self;

	        },

	        //根据横向滚动条的显示状态，更新锁定区域的高度。
	        _updateLockedHeight: function () {
	            var
	                content = this._unLockedContent,
	                scrollLeft = content.scrollLeft(),
	                height = this.options.height,
	                value = 0;

	            if (scrollLeft > 0) {
	                value = 17
	            } else {
	                content.scrollLeft(1);
	                if (content.scrollLeft() > 0) {
	                    value = 17
	                }

	                content.scrollLeft(0);
	            }

	            if (height == 'auto') {
	                height = this._content.height();
	            }
	            this._lockedContent.height(height - value);

	            return this;
	        },
	        _updateHeaderWrapper: function (value) {
	            var
	                self = this,
	                element = self.element,
	                headerWrapper = self._headerWrapper;
	            if (typeof self.options.width != "string") {
	                headerWrapper.children().width(self._viewWidth - value);
	            } else {
	                headerWrapper.css('paddingRight', value);
	            }
	        }
	    });

	    /**
	     * 键盘操作的相关逻辑
	     */
	    $.extend($.aui.datagrid.prototype, {
	        /**
	         * 行区域部件在按键按下时触发
	         *  _onRowPresenterKeyDown
	         * @private
	         * @param {jQuery.Event} e 事件参数
	         */
	        _onRowPresenterKeyDown: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            current = self._currentSelectedCell,
	            //是否能进入编辑模式
	            canEdit = current.isReadOnly(self) === false;
	            // 如果设置了编辑模板，进行相关处理
	            switch (e.which) {
	                case 113:
	                    // F2
	                    if (canEdit) {
	                        self._goToEditingMode();
	                    }

	                    break;
	                case 27:
	                    // ESC
	                    if (canEdit) {
	                        self._goToShowMode(true);
	                    }
	                    break;
	                case 13:
	                    // Enter
	                    if (canEdit) {
	                        self._goToShowMode(false);
	                    }
	                    break;
	                case 33:
	                case 34:
	                case 35:
	                case 36:
	                case 37:
	                case 38:
	                case 39:
	                case 40:
	                    e.preventDefault();
	                    // 下箭头
	                    self._goToNextCell(e.which);
	                    break;
	            }
	        },
	        /**
	         * 使用键盘跳转到下一个单元格。
	         * _goToNextCell
	         * @private
	         * @param {Number} key 按键对应的数值。
	         */
	        _goToNextCell: function (key) {
	            var
	            //
	            self = this,
	            //
	            current = self._currentSelectedCell,
	            //
	            next_rowIndex = current.rowIndex,
	            //
	            next_columnIndex = current.columnIndex,
	            //
	            next_cell = null;

	            switch (key) {
	                case 33:
	                    // 左PgUp键
	                    next_rowIndex = 0;
	                    break;
	                case 34:
	                    // PgDn键
	                    next_rowIndex = self._vm.items().length - 1;
	                    break;
	                case 35:
	                    // End键
	                    next_columnIndex = self._getLastColumnIndex(self._columns.length - 1);
	                    break;
	                case 36:
	                    // Home键
	                    next_columnIndex = self._getFirstColumnIndex(0);
	                    break;
	                case 37:
	                    // 左箭头
	                    next_columnIndex = self._getNextCellIndex(next_columnIndex, false);
	                    break;
	                case 38:
	                    next_rowIndex = self._getNextRowIndex(next_rowIndex, false);
	                    break;
	                case 39:
	                    // 右箭头
	                    next_columnIndex = self._getNextCellIndex(next_columnIndex, true);
	                    break;
	                case 40:
	                    next_rowIndex = self._getNextRowIndex(next_rowIndex, true);
	                    break;
	            }

	            if (next_rowIndex != current.rowIndex || next_columnIndex != current.columnIndex) {
	                next_cell = self._rowPresenter.children('tr[class~="' + _constant.ROW_CLASS + '"][index="' + next_rowIndex + '"]').find('td[class~="' + _constant.CELL_CLASS + '"][columnIndex = "' + next_columnIndex + '"]');
	                next_cell.focus();
	            }
	        },
	        /**
	         * 获取下一个单元格的序号。
	         * _getNextCellIndex
	         * @private
	         * @param {Number} index 当前单元格的序号。
	         * @param {Boolean} isAdd 序号是否增加
	         */
	        _getNextCellIndex: function (index, isAdd) {
	            var
	            //
	            self = this,
	            //列的配置
	            columns = self._columns,
	            //
	            collapsed = _visibility.collapsed,
	            //
	            max = columns.length,
	            //
	            newIndex = index;
	            if (isAdd) {
	                if (++newIndex < max) {
	                    if (columns[newIndex].visibility === collapsed) {
	                        newIndex = self._getNextCellIndex(newIndex, true);
	                    }
	                    index = newIndex;
	                }
	            } else {
	                if (--newIndex >= 0) {
	                    if (columns[newIndex].visibility === collapsed) {
	                        newIndex = self._getNextCellIndex(newIndex, false);
	                    }
	                    index = newIndex;
	                }
	            }

	            return index;
	        },
	        /**
	         * End键点击时，获取最后一个单元格的序号。
	         * _getLastColumnIndex
	         * @private
	         * @param {Number} index 不考虑显示状态的最后一列的序号。
	         */
	        _getLastColumnIndex: function (index) {
	            var self = this;
	            //如果获取的列处于隐藏状态，检查前一列是否是最后一列。
	            if (self._columns[index].visibility === _visibility.collapsed) {
	                index = self._getLastColumnIndex(index - 1)
	            }
	            return index;
	        },
	        /**
	         * Home键点击时，获取第一个单元格的序号。
	         * _getFirstColumnIndex
	         * @private
	         * @param {Number} index 不考虑显示状态的第一列的序号。
	         */
	        _getFirstColumnIndex: function (index) {
	            var self = this;
	            //如果获取的列处于隐藏状态，检查后一列是否是第一列。
	            if (self._columns[index].visibility === _visibility.collapsed) {
	                index = self._getLastColumnIndex(index + 1)
	            }
	            return index;
	        },
	        /**
	         * 使用键盘上下移动时，获取下一个单元格的序号。
	         * _getNextRowIndex
	         * @private
	         * @param {Number} index 当前单元格的序号。
	         * @param {Boolean} isAdd 序号是否增加
	         */
	        _getNextRowIndex: function (index, isAdd) {
	            var
	            //
	            self = this,
	            //
	            newIndex = index;
	            if (isAdd) {
	                if (++newIndex < self._item.length) {
	                    index = newIndex;
	                }
	            } else {
	                if (--newIndex >= 0) {
	                    index = newIndex;
	                }
	            }

	            return index;
	        }
	    });

	    /**
	     * 提示信息相关逻辑。
	     */
	    $.extend($.aui.datagrid.prototype, {
	        /**
	         * 显示提示信息。(如果不传递msg，会根据type类型显示设置的提示语。如果传递msg，显示msg的值，不再进行type区分)。
	         * @method showMessage
	         * @param {Message} msg 提示信息的类型。
	         */
	        showMessage: function (msg) {
	            var self = this;
	            if (self._vm.items().length == 0) {
	                this._showMessage(msg);
	            }
	        },
	        /**
	         * 显示提示信息。
	         * @method _showMessage
	         * @private
	         * @param {String} msg 提示信息。
	         */
	        _showMessage: function (msg) {
	            var
	            //
	            self = this;
	            if (typeof msg == "number") {
	                switch (msg) {
	                    case _message.normal:
	                        msg = self.options.noneMessage || $$.I18N.datagrid.noneMessage;
	                        break;
	                    case _message.search:
	                        msg = self.options.noneSearchMessage;
	                        break;
	                    case _message.filter:
	                        msg = self.options.noneFilterMessage;
	                        break;
	                }
	            }

	            self._message.text(msg);
	            self._messageContainer.show();
	        }
	    })

	    /**
	     * 标题设置区域相关逻辑
	     */
	    $.extend($.aui.datagrid.prototype, {
	        /**
	         * 创建块状过滤。
	         * _createHeaderSettings
	         * @private
	         */
	        _createHeaderSettings: function () {
	            var
	            //
	            self = this,
	            //列设置
	            columns = self._columns,
	            //
	            count = columns.length,
	            //
	            i = 0,
	            //
	            h = -1,
	            //
	            html = [];
	            html[++h] = '<div class="' + _constant.BLOCK_FILTER_POPUP + '"></div>';
	            if (self.options.isResponsive) {
	                html[++h] = '<div class="aui-datagrid-responsive-popup"></div>';
	            }

	            // -30 标题的高度
	            html[++h] = '<div class="' + _constant.HEADER_FILTER_CONTAINER + '" style="position:relative;top:0px;margin-right:1px;">';
	            for (; i < count; i++) {
	                if (columns[i].isSortable || columns[i].hasHiddenColumn || columns[i].filterCheckName) {
	                    html[++h] = '<div role="listbox" tabindex="0" index="' + i + '" class="' + _constant.HEADER_SETTINGS_POPUP_CLASS + '" style="width:100%;" >';
	                    html[++h] = '<div class="' + _constant.BLOCK_FILTER_CONTAINER_CLASS + '" columnindex="' + i + '">';
	                    html[++h] = '<div style="width:230px;height:100%;border: 1px solid #B5B5B5;position:relative;right:0;background:#FFFFFF">';
	                    if (columns[i].isSortable) {
	                        //排序部分
	                        if (columns[i].filterCheckName && self._filterType == _filter.block) {
	                            html[++h] = '<div class="aui-datagrid-header-setting-sort-container" style="border-bottom:1px solid #ABABAB;height:60px;color:#000000;height:50px;">';
	                        } else {
	                            html[++h] = '<div class="aui-datagrid-header-setting-sort-container" style="color:#000000;height:50px;">';
	                        }

	                        html[++h] = '<div role="option" tabindex="0" index="' + i + '" class="' + _constant.BLOCK_FILTER_ACTION_CLASS + ' ' + _constant.SORT_ACTION_CLASS + '"><div class="aui-datagrid-filter-descending fi-datagrid-sort-list-up-as"></div>' + self._getAscendingMsg(columns[i].sortType) + '</div>';
	                        html[++h] = '<div role="option" tabindex="0" index="' + i + '" class="' + _constant.BLOCK_FILTER_ACTION_CLASS + '"><div class="aui-datagrid-filter-ascending fi-datagrid-sort-list-down-as"></div>' + self._getDescendingMsg(columns[i].sortType) + '</div>';
	                        html[++h] = '</div>';
	                    }

	                    //隐藏列和清除过滤区域
	                    if (columns[i].hasHiddenColumn || columns[i].filterCheckName) {
	                        html[++h] = '<div style="border-bottom:1px solid #ABABAB;">';
	                    }

	                    if (columns[i].hasHiddenColumn) {
	                        html[++h] = '<div role="option" tabindex="0" index="' + i + '" class="' + _constant.BLOCK_FILTER_ACTION_CLASS + ' ' + _constant.HEADER_SETTING_HIDDEN_CLASS + '"><div class="' + _constant.HEADER_SETTING_HIDDEN_ACTION_CLASS + ' ' + _constant.HEADER_SETTING_HIDDEN_ICON_CLASS + '"></div>' + $$.I18N.datagrid.hideColumn + '</div>';
	                    }
	                    if (columns[i].filterCheckName && self._filterType == _filter.block) {
	                        html[++h] = '<div role="option" tabindex="0" index="' + i + '" class="' + _constant.BLOCK_FILTER_ACTION_CLASS + ' ' + _constant.HEADER_SETTING_CLEAR_DISABLED_CLASS + ' ' + _constant.HEADER_SETTING_CLEAR_CLASS + '">';
	                        html[++h] = '<div index="' + i + '" class="' + _constant.HEADER_SETTING_CLEAR_ACTION_CLASS + ' ' + _constant.HEADER_SETTING_CLEAR_DISABLED_IMG_CLASS + ' ' + _constant.HEADER_SETTING_CLEAR_ICON_CLASS + '"></div>' + $$.I18N.datagrid.clearFiltersFrom + '' + columns[i].name + '</div>';
	                    }
	                    if (columns[i].hasHiddenColumn || columns[i].filterCheckName) {
	                        //end隐藏列和清除过滤区域
	                        html[++h] = '</div>';
	                    }

	                    //过滤区域
	                    html[++h] = '<div class="aui-datagrid-header-setting-filter-container" index="' + i + '">';

	                    if (columns[i].filterCheckName && self._filterType == _filter.block) {
	                        self.options.columns[i].filterCheckDisplayName = self.options.columns[i].filterCheckDisplayName || "value";
	                        html[++h] = '<div class="aui-datagrid-header-setting-filter-content">';
	                        //search
	                        html[++h] = '<div style="height:24px;margin:7px 0 7px 10px;"><input index="' + i + '" type="text" class="' + _constant.BLOCK_FILTER_SEARCH_CLASS + '" /></div>';
	                        //Select All
	                        html[++h] = '<div index="' + i + '" class="' + _constant.BLOCK_FILTER_SELECT_ALL_CLASS + '">' + $$.I18N.datagrid.selectAllforFilter + '</div>';

	                        //过滤项
	                        html[++h] = '<div class="' + _constant.BLOCK_FILTER_ITEM_CONTAINER_CLASS + '" data-bind="foreach: ' + self.options.columns[i].filterItems + '">';
	                        html[++h] = '<div class="aui-datagrid-block-filter-checkbox" data-bind="style:{display:_display},text:' + self.options.columns[i].filterCheckDisplayName + ',checkbox:{click:_onCheckBoxClick,checked:' + self.options.columns[i].filterCheckName + '}"></div>';
	                        html[++h] = '</div>';
	                        html[++h] = '</div>';
	                        //button区域
	                        html[++h] = '<div class="' + _constant.BLOCK_FILTER_BUTTON_CONTAINER_CLASS + '" style="text-align:right;width:100%"><input index="' + i + '" type="button" value="' + $$.I18N.datagrid.filterOK + '" /><input index="' + i + '" type="button" value="' + $$.I18N.datagrid.filterCancel + '" /></div>';
	                    }

	                    //end 过滤区域
	                    html[++h] = '</div>';

	                    html[++h] = '</div>';
	                    html[++h] = '</div>';
	                    html[++h] = '</div>';
	                }

	            }
	            html[++h] = '</div>';
	            return html.join('');
	        },
	        /**
	         * 初始化块状过滤区域的控件
	         */
	        _initHeaderSettings: function () {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            container = self.element.parent(),
	            //
	            c = self._columns.length;

	            self._filterSearchBoxs = container.find("." + _constant.BLOCK_FILTER_SEARCH_CLASS);
	            self._filterSearchBox = [];
	            self._filterContainer = container.find("." + _constant.HEADER_FILTER_CONTAINER);
	            //标题设置区域的jQuery对象
	            self._blockFilters = container.find("." + _constant.HEADER_SETTINGS_POPUP_CLASS);
	            //标题设置区域的集合
	            self._blockFilter = [];
	            self._blockFilterContainer = [];
	            self._blockFilterContainers = self._blockFilters.find("." + _constant.BLOCK_FILTER_CONTAINER_CLASS);
	            self._blockFilterPopup = container.find("." + _constant.BLOCK_FILTER_POPUP);
	            self._blockFilters.hide();
	            self._blockFilterClears = self._blockFilters.find("." + _constant.HEADER_SETTING_CLEAR_CLASS);
	            self._blockFilterClear = [];
	            self._blockFilterClearImg = [];

	            self._headerSettingHiddens = self._blockFilters.find("." + _constant.HEADER_SETTING_HIDDEN_CLASS);
	            self._blockFilterButtonArea = self._blockFilters.find("." + _constant.BLOCK_FILTER_BUTTON_CONTAINER_CLASS);
	            self._blockFilterSelectAlls = self._blockFilters.find("." + _constant.BLOCK_FILTER_SELECT_ALL_CLASS);
	            self._blockFilterSelectAll = [];
	            self._blockFilterOKs = self._blockFilterButtonArea.children("input[type=button]:even").button({
	                defaultButtonStyle: "red"
	            });

	            self._blockFilterOk = [];
	            self._blockFilterCancels = self._blockFilterButtonArea.children("input[type=button]:odd").button();
	            //标题设置区域所有Cancel按钮的集合
	            self._blockFilterCancel = [];
	            self._blockFilterAction = self._blockFilters.find("." + _constant.BLOCK_FILTER_ACTION_CLASS);

	            self._blockFilterCheckBoxes = self._blockFilters.find(".aui-datagrid-block-filter-checkbox");
	            self._blockFilterCheckBoxes.data('self', self);

	            self._headerSettingSortContainer = self._blockFilters.find(".aui-datagrid-header-setting-sort-container")
	            self._headerSettingDESC = self._headerSettingSortContainer.children('div:odd');
	            self._headerSettingASC = self._headerSettingSortContainer.children('div:even');

	            self._headerSettingFilterContainer = [];
	            self._headerSettingFilterContent = [];
	            for (; i < c; i++) {
	                self._blockFilter[i] = container.find('div[class~=' + _constant.HEADER_SETTINGS_POPUP_CLASS + '][index=' + i + ']');
	                self._blockFilterContainer[i] = container.find('div[class~=' + _constant.BLOCK_FILTER_CONTAINER_CLASS + '][columnindex=' + i + ']');
	                self._blockFilterOk[i] = self._blockFilterButtonArea.children('input[type=button]:even[index=' + i + ']');
	                self._blockFilterCancel[i] = self._blockFilterButtonArea.children('input[type=button]:odd[index=' + i + ']');
	                self._blockFilterClear[i] = self._blockFilter[i].find('div[class~=' + _constant.HEADER_SETTING_CLEAR_CLASS + '][index=' + i + ']');
	                self._blockFilterClearImg[i] = self._blockFilter[i].find('div[class~=' + _constant.HEADER_SETTING_CLEAR_ACTION_CLASS + '][index=' + i + ']');
	                self._blockFilterSelectAll[i] = self._blockFilter[i].find('div[class~=' + _constant.BLOCK_FILTER_SELECT_ALL_CLASS + '][index=' + i + ']');
	                self._headerSettingFilterContainer[i] = self._blockFilter[i].find('div[class~=aui-datagrid-header-setting-filter-container][index=' + i + ']');
	                self._headerSettingFilterContent[i] = self._headerSettingFilterContainer[i].children('div[class~=aui-datagrid-header-setting-filter-content]');
	                self._filterSearchBox[i] = container.find('input[class~=' + _constant.BLOCK_FILTER_SEARCH_CLASS + '][index=' + i + ']');
	            }

	            if (self._filterType == _filter.block) {
	                if (!$.fn.searchbox) {
	                    $.error('Please add "aui.searchbox.js" when using datagrid filter.');
	                }

	                self._filterSearchBoxs.searchbox({
	                    height: 24,
	                    searched: function () {
	                        var
	                        //
	                        columns = self._columns,
	                        //
	                        index = this._mInput.attr("index"),
	                        //
	                        filterItems = self._columns[index].filterItems,
	                        //
	                        items = self._vm[filterItems](),
	                        //
	                        flag = false,
	                        //
	                        count = items.length,
	                        //
	                        key = self._filterSearchBox[index].searchbox("searchKeywords");
	                        for (var i = 0; i < count; i++) {

	                            if (self._vm[filterItems]()[i]._active() === true) {
	                                self._vm[filterItems]()[i]._display('table-row');
	                                if (self.options.isFilterCaseSensitive) {
	                                    flag = self._vm[filterItems]()[i].value().toString().indexOf(key) == -1;
	                                } else {
	                                    flag = self._vm[filterItems]()[i].value().toString().toLowerCase().indexOf(key.toLowerCase()) == -1;
	                                }
	                                if (flag) {
	                                    self._vm[filterItems]()[i]._display('none');
	                                }
	                            }

	                        }
	                    },
	                    stopped: function () {
	                        var
	                        //
	                        columns = self._columns,
	                        //
	                        index = this._mInput.attr("index"),
	                        //
	                        filterItems = self._columns[index].filterItems,
	                        //
	                        items = self._vm[filterItems](),
	                        //
	                        count = items.length;

	                        for (var i = 0; i < count; i++) {
	                            items[i]._display('table-row');
	                        }
	                    }
	                });

	                if (!$.fn.checkbox) {
	                    $.error('Please add "aui.checkbox.js" when using datagrid filter.');
	                }

	                self._blockFilterSelectAlls
	                //
	                .checkbox({
	                    isThreeState: true,
	                    datagrid: self,
	                    checked: true,
	                    click: self._onBlockFilterSelectAllClick
	                })
	                //
	                .css('width', '100%');

	            }

	            self._blockFilters
	            //
	            .on('mousedown', function (e) {
	                e.stopPropagation();
	                var index = this.getAttribute("index");
	                self._blockFilterPopup.trigger('mousedown');
	            })
	            //
	            .on('keydown', self, function (e) {
	                if (e.which == $.ui.keyCode.TAB || e.which == $.ui.keyCode.DOWN || e.which == $.ui.keyCode.UP) {
	                    var
	                    //
	                    self = e.data,
	                    //
	                    tabbables = $(":tabbable", self._blockFilters),
	                    //
	                    first = tabbables.filter(":first"),
	                    //
	                    last = tabbables.filter(":last");

	                    if (e.which == $.ui.keyCode.DOWN) {
	                        //点击下箭头的处理逻辑。
	                        self._settingTabbableIndex++;
	                        if (self._settingTabbableIndex == tabbables.length) {
	                            self._settingTabbableIndex = 0;
	                        }
	                        tabbables[self._settingTabbableIndex].focus();
	                        return false;
	                    } else if (e.which == $.ui.keyCode.UP) {
	                        //点击上箭头的处理逻辑
	                        self._settingTabbableIndex--;
	                        if (self._settingTabbableIndex == -1) {
	                            self._settingTabbableIndex = tabbables.length - 1;
	                        }
	                        tabbables[self._settingTabbableIndex].focus();
	                        return false;
	                    } else {
	                        //点击Tab键的处理逻辑
	                        if (!e.shiftKey) {
	                            self._settingTabbableIndex++;
	                            if (e.target === last[0]) {
	                                self._settingTabbableIndex = 0;
	                                first.focus(1);
	                                return false;
	                            }
	                        } else {
	                            self._settingTabbableIndex--;
	                            if (e.target === first[0]) {
	                                last.focus(1);
	                                self._settingTabbableIndex = tabbables.length - 1;
	                                return false;
	                            }
	                        }
	                    }

	                } else if (e.which == $.ui.keyCode.ESCAPE) {
	                    e.data._closeHeaderSettingByIndex(this.getAttribute("index"));
	                }

	            });

	            self._blockFilterContainers.on('mousedown', function (e) {
	                e.stopPropagation();
	            });
	            self._blockFilterPopup.on('mousedown', self, self._onSettingPopupMouseDown);
	            self._blockFilterOKs.on('click', self, self._onHeaderSettingOKClick);
	            self._blockFilterCancels.on('click', self, self._onHeaderSettingCancelClick);
	            self._blockFilterClears.on('click', self, self._onBlockFilterClearClick);
	            self._headerSettingHiddens.on('click', self, self._onHeaderSettingHiddenClick);
	            self._blockFilterAction
	                .on('mouseenter', self._onBlockFilterMouseEnter)
	                .on('mouseleave', self._onBlockFilterMouseLeave);

	            self._headerSettingDESC
	                .on('keydown', self, self._onDescKeyDown)
	                .on('click', self, self._onDescClick);
	            self._headerSettingASC
	                .on('keydown', self, self._onAscKeyDown)
	                .on('click', self, self._onAscClick);
	        },
	        _onDescKeyDown: function (e) {
	            if (e.which == $.ui.keyCode.ENTER) {
	                e.data._sortActionClick(_sortMode.desc);
	            }
	        },
	        _onDescClick: function (e) {
	            e.data._sortActionClick(_sortMode.desc);
	        },
	        _onAscKeyDown: function (e) {
	            if (e.which == $.ui.keyCode.ENTER) {
	                e.data._sortActionClick(_sortMode.asc);
	            }
	        },
	        _onAscClick: function (e) {
	            e.data._sortActionClick(_sortMode.asc);
	        },
	        _sortActionClick: function (sortMode) {
	            var

	            i = this._openingSettingIndex - 0;

	            if ($(this._headerCell[i]).data('grid-sort') != sortMode) {
	                this._doSort(i, sortMode);
	            }

	            this._closeHeaderSettingByIndex(i);
	        },
	        /**
	         * 标题设置区域
	         */
	        _onHeaderSettingHiddenClick: function (e) {
	            var
	            //
	            self = e.data,
	            //当前展开列的序号
	            index = parseInt(self._filterColumnIndex);

	            self._blockFilterCancel[index].trigger('click');
	            self.setColumnVisibility(index, 1);
	        },
	        /**
	         * 标题设置区域键盘按下时触发
	         */
	        _onSettingKeyDown: function (e) {
	            e.stopPropagation();
	            if (e.which == $.ui.keyCode.ENTER) {
	                $(this).trigger('click');
	            }
	        },
	        /**
	         * 标题设置区域点击时触发
	         */
	        _onSettingClick: function (e) {
	            e.stopPropagation();
	            var
	            //
	            self = e.data,
	            //
	            index = this.getAttribute('columnindex'),
	            //
	            scrollLeft = self._content.scrollLeft(),
	            //
	            left = 0,
	            //
	            offset = 0,
	            //
	            container = self._blockFilterContainer[index];

	            self._settingTabbableIndex = -1;
	            self._openingSettingIndex = index;
	            self._blockFilters.css({
	                "margin-left": self.element.css("margin-left"),
	                left: self.element.position().left
	            });
	            left = self._headerCache[index].cell.offset().left - self.element.offset().left;
	            left = left > 0 ? left : 0;
	            offset = left + 230 - self._blockFilter[index].width();
	            if (offset > 0) {
	                left -= offset;
	            }
	            //show settings popup
	            self._blockFilter[index].show();
	            self._blockFilterPopup.show();
	            self._blockFilter[index].focus();
	            if (self.options.isResponsive) {
	                self._appendFilter(false);
	            }
	            container.css('left', left);
	            if (self.options.columns[index].filterCheckName) {
	                self._saveFilterStatusByIndex(index);
	            }
	        },
	        /**
	         *
	         */
	        _onSettingPopupMouseDown: function (e) {
	            var self = e.data;
	            self._closeHeaderSettingByIndex(self._openingSettingIndex);
	        },
	        /**
	         * 标题设置区域，cancel点击时调用。
	         */
	        _onHeaderSettingCancelClick: function (e) {
	            e.data._closeHeaderSettingByIndex(this.getAttribute("index"));
	        },
	        //关闭指定序号的标题设置区域
	        _closeHeaderSettingByIndex: function (i) {
	            var self = this;
	            if (self.options.columns[i].filterCheckName && self._filterType == _filter.block) {
	                //还原打开时的过滤项的选中情况
	                self._cancelSettingFilter(i, self._currentFilterStatus);
	                self._filterSearchBoxs.searchbox('stopped');
	            }
	            self._blockFilter[i].hide();
	            self._blockFilterPopup.hide();
	            self._headerCell[i].focus();
	        },
	        /**
	         * 将过滤条件还原到打开前的值。
	         */
	        _cancelSettingFilter: function (index, current) {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            filterCheckName = self._columns[index].filterCheckName,
	            //
	            filterItems = columns[index].filterItems;

	            //还原打开设置区域前的值
	            if (filterCheckName) {
	                var
	                //
	                items = self._vm[filterItems](),
	                //
	                count = items.length,
	                //
	                i = 0;
	                for (; i < count; i++) {
	                    items[i][filterCheckName](current[i][filterCheckName]);
	                }
	                self._controlSelectAll({
	                    newValue: true
	                });
	            }
	        },
	        /**
	         * 标题设置区域，OK点击时调用。
	         */
	        _onHeaderSettingOKClick: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            index = this.getAttribute("index"),
	            //
	            columns = self._columns,
	            //
	            filterCheckName = columns[index].filterCheckName,
	            //
	            flag = true,
	            //
	            filterItems = columns[index].filterItems;
	            self._blockFilter[index].hide();
	            self._blockFilterPopup.hide();
	            self._headerCell[index].focus();

	            if (filterCheckName) {
	                self._filterSearchBoxs.searchbox('stopped');
	                flag = self._blockFilterSelectAll[index].checkbox('option', 'checked');
	                if (flag != true) {
	                    if (self.options.isResponsive) {
	                        self._responsiveSettingFilterByItem[index].css('display', 'inline-block');
	                    }
	                    //do filter
	                    self._blockFilterClear[index].removeClass(_constant.HEADER_SETTING_CLEAR_DISABLED_CLASS);
	                    self._blockFilterClearImg[index].removeClass(_constant.HEADER_SETTING_CLEAR_DISABLED_IMG_CLASS);
	                    self._filterItems(false, {
	                        _index: index,
	                        _name: columns[index].filterName,
	                        _filterCheckName: columns[index].filterCheckName,
	                        _filterItems: ko.toJS(self._vm[columns[index].filterItems]),
	                        _caseSensitive: self.options.isFilterCaseSensitive,
	                        _customFilter: columns[index].customFilter,
	                        _assert: self._blockFilterAssert
	                    });
	                } else if (flag == true) {
	                    if (self.options.isResponsive) {
	                        self._responsiveSettingFilterByItem[index].hide();
	                    }
	                    //do clear
	                    self._clearBlockFilter(index);
	                }

	            }
	        },
	        _onBlockFilterMouseEnter: function () {
	            $(this).addClass(_constant.BLOCK_FILTER_ACTION_MOUSEENTER_CLASS);
	        },
	        _onBlockFilterMouseLeave: function () {
	            $(this).removeClass(_constant.BLOCK_FILTER_ACTION_MOUSEENTER_CLASS);
	        }
	    });

	    /**
	     * 数据相关相关逻辑
	     */
	    $.extend($.aui.datagrid.prototype, {
	        _onDynamicColumnsChanged: function () {
	            var
	                self = this.self,
	                dcs = ko.mapping.toJS(self._vm.dynamicColumns()),
	                //定时器，确保在vm更新到DOM后执行筛选操作
	                vmTimer = null;

	            vmTimer = setInterval(function () {
	                clearInterval(vmTimer);
	                self._initHeaderPart()
	                    ._createHeaderCache()
	                    ._initCellPart();
	            });
	        },
	        _onHeaderMouseover: function (e) {
	            var
	                self = e.data,
	                cur = $(this),
	                i = cur.attr('columnindex') - 0;
	            if (self._columns[i].isSortable) {
	                if (!cur.data('grid-sort') || cur.data('grid-sort') == $$.datagrid('sortmode').none) {
	                    self._headerSorts.filter('[columnindex="' + i + '"]').addClass(_constant.HEADER_SORT_ASC_CLASS);
	                }
	            }
	        },
	        _onHeaderMouseout: function (e) {
	            var
	                self = e.data,
	                cur = $(this),
	                i = cur.attr('columnindex') - 0;
	            if (self._columns[i].isSortable) {
	                if (!cur.data('grid-sort') || cur.data('grid-sort') == $$.datagrid('sortmode').none) {
	                    self._headerSorts.filter('[columnindex="' + i + '"]').removeClass(_constant.HEADER_SORT_ASC_CLASS);
	                }
	            }
	        },
	        //删除、添加一行，清空，重新赋值
	        _onVmChanged: function () {
	            var
	            self = this.self,
	            //
	            items = self._vm.items(),
	            //
	            c = items.length,
	            //定时器，确保在vm更新到DOM后执行筛选操作
	            vmTimer = null,
	            //
	            i = 0;

	            if (c > 0) {
	                self._messageContainer.hide();
	            } else {
	                self._showMessage(_message.normal);
	            }

	            //添加布局属性
	            for (; i < c; i++) {
	                if (!items[i][self._isSelected]) {
	                    items[i][self._display] = ko.observable('table-row');
	                    items[i][self._isSelected] = ko.observable(-1);
	                    items[i][self._isMouseOver] = ko.observable(-1);
	                }
	            }

	            if ((self._selectedIndex - 0) >= c) {
	                self._selectedIndex = -1;
	            }

	            self._rowPresenter.hide();
	            vmTimer = setInterval(function () {
	                clearInterval(vmTimer);
	                if (--self._lockConut > 0) {
	                    return;
	                }
	                if (self._item && 'off' in self._item) {
	                    self._item.off(self.eventNamespace);
	                }

	                if (self.options.isResponsive == true && self._responsiveRowHeaders && "off" in self._responsiveRowHeaders) {
	                    self._responsiveRowHeaders.off(self.eventNamespace);
	                    self._responsiveRowHeaderCheckParts.off(self.eventNamespace);
	                }

	                if (self._vm.items().length > 0) {
	                    self.options.initPart();
	                    self._onItemsSourceChanged();
	                } else {
	                    self._resetVerticalScroll();
	                    if (self._itemsCount != self._vm.items().length) {
	                        self._trigger("itemsSourceChanged", null, $$.Event({
	                            element: self.element,
	                            newValue: self._vm.items()
	                        }));
	                    }

	                }
	                self._itemsCount = self._vm.items().length;
	            }, 10);
	        },
	        /**
	         * 设置控件的的数据源。
	         * _setItemsSource
	         * @param {Array} source 需要设置的集合。
	         */
	        _setItemsSource: function (source) {
	            this.options.itemsSource = source;
	            this._lockConut = 1;
	            if (this._vm.items().length == 0 || source.length == 0) {
	                this._vm.items(ko.mapping.fromJS(source)());
	            } else {
	                this._lockConut = Math.abs(this._vm.items().length - source.length);
	                this._synchronousData(this._vm.items(), source, true);
	            }
	        },
	        //同步数据
	        _synchronousData: function (items, sources, update) {
	            var
	                self = this,
	                x,
	                i = 0,
	                ic,
	                c,
	                sc;

	            if ($.isArray(items)) {
	                ic = items.length;
	            } else if (typeof items == "object") {
	                ic = 1;
	            }
	            if ($.isArray(sources)) {
	                sc = sources.length;
	            } else if (typeof sources == "object") {
	                sc = 1;
	            }

	            c = ic > sc ? sc : ic;

	            for (; i < c; i++) {
	                var
	                    item,
	                    source;

	                if ($.isArray(items)) {
	                    item = items[i];
	                } else if (typeof items == "object") {
	                    item = items;
	                }

	                if ($.isArray(sources)) {
	                    source = sources[i];
	                } else if (typeof sources == "object") {
	                    source = sources;
	                }

	                for (x in item) {

	                    //同步数据
	                    if (ko.isObservable(item[x])) {
	                        if ($.isArray(item[x]())) {
	                            if ($.isArray(source[x])) {
	                                item[x](ko.mapping.fromJS(source[x])());
	                            } else {
	                                item[x]([]);
	                            }

	                        } else {
	                            if (source) {
	                                if (ko.isObservable(source[x])) {
	                                    item[x](source[x]());
	                                } else {
	                                    item[x](source[x]);
	                                }

	                            } else {
	                                item[x](null);
	                            }
	                        }
	                    } else {
	                        self._synchronousData(item[x], source[x]);
	                    }

	                }
	            }
	            if (ic <= sc && items && update) {
	                for (i = ic; i < sc; i++) {
	                    var item = ko.mapping.fromJS(sources[i]);
	                    delete item.__ko_mapping__;

	                    self._vm.items.push(item);
	                }
	            } else {
	                for (i = 0; i < ic - sc; i++) {
	                    self._vm.items.pop();
	                }
	            }
	        },
	        /**
	         * 内容变化完成时发生。
	         * @param {Function} handler 需要在委托中添加或者删除的方法。
	         * @param {Boolean} isAdd 是否添加。
	         */
	        itemsSourceChanged: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.itemsSourceChanged, handler, isAdd);
	        },
	        /**
	         * 数据源变化时触发。更新行和单元格的相关信息。
	         * _onItemsSourceChanged
	         */
	        _onItemsSourceChanged: function () {
	            var
	            //
	            self = this,
	            //所有初始化的行
	            items = null,
	            //
	            mainTale = self._rowPresenter,
	            //
	            column = null,
	            //
	            frozen = self._frozenColumnCount,
	            //
	            namespace = self.eventNamespace,
	            //
	            i = 0,
	            //
	            r_count = self._vm.items().length,
	            //列数
	            c_count = self._columns.length;

	            self._rows = [];
	            if (self.options.isResponsive == true) {
	                self._initResponsiveRowMember();
	            }
	            //所有行(包含被冻结的部分)
	            items = self._item = mainTale.children('tr[class~="' + _constant.ROW_CLASS + '"]');

	            if (self._frozenColumnCount != 0) {
	                self._lockedItem = self._lockedRowPresenter.children('tr[class~="' + _constant.ROW_CLASS + '"]');
	                self._unLockedItem = self._unlockedRowPresenter.children('tr[class~="' + _constant.ROW_CLASS + '"]');
	            }


	            //所有单元格对应的jQuery对象
	            self._cells = items.children('td[class~="' + _constant.CELL_CLASS + '"]');
	            //self._cells.children(':first').height(self._cells.parent().height());
	            //单元格中所有控件对应的jQuery对象
	            self._cellWidgets = self._cells.find('[class~="' + _constant.CELL_WIDGET_CLASS + '"]');

	            self._cellPopupWidgets = self._cells.find('[class~="' + _constant.CELL_POPUP_WIDGET_CLASS + '"]').css('position', 'fixed');
	            //所有编辑元素对应的jQuery对象
	            self._cellEditing = self._cells.find('[class~="' + _constant.CELL_EDITING_CLASS + '"]');

	            for (i = 0; i < c_count; i++) {
	                column = self._allColumns[i] = self.element.find("." + self._cellClassPre + "_" + i);
	                if (i < frozen) {
	                    self._frozenColumn[i] = column;
	                }
	            }

	            /* 为itmes添加相关处理 */
	            items
	            //
	            .off(namespace)
	            //
	            .on('click' + namespace, self, self._onRowClick)
	            //
	            .on('dblclick' + namespace, self, self._onDoubleClickRow)
	            //
	            .on('mouseover' + namespace, self, self._onRowMouseOver)
	            //
	            .on('mouseout' + namespace, self, self._onRowMouseout);

	            self._initializeCells();

	            if (self.options.isResponsive == true) {
	                self._responsiveRowHeaders = self._responsiveContainer
	                    .find('.aui-datagrid-responsive-row-header')
	                    .on('click' + namespace, self, self._onResponsiveRowHeaderClick);
	                self._responsiveRowContents = self._responsiveContainer.find('.aui-datagrid-responsive-row-content');
	                self._responsiveRowHeaderCheckParts = self._responsiveContainer.find('.aui-datagrid-responsive-row-header-checkPart').on('click', function (e) { e.stopPropagation() });
	            }

	            /* 为details部分的行添加index */
	            if (self._hasDetails === true) {
	                self._details = mainTale.children('tr[class="' + _constant.DETAILS_ROW_CLASS + '"]');
	                /* 为details部分的行添加index */
	                self._setDetailsRowIndex();
	            }

	            for (i = c_count - 1; i >= 0; i--) {
	                if (self.setColumnVisibility) {
	                    self.setColumnVisibility(i, self._columns[i].visibility || _visibility.visible, !!i);
	                }
	            }

	            self._rowPresenter.show();
	            //添加斑马线
	            self._addZebraLists();
	            self._resetVerticalScroll();
	            self._unLockedContent.scrollTop(0);
	            if (self._isBackground == false && $.isFunction(self._updateFilter)) {
	                self._updateFilter();
	            }
	            if (self._itemsCount != self._vm.items().length) {
	                self._trigger("itemsSourceChanged", null, $$.Event({
	                    element: self.element,
	                    newValue: self._vm.items()
	                }));
	            }
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            if (args) {
	                args.parameters = self.options.parameters[type];
	                args.type = "datagrid";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);

	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        /**
	         * 需要变换SelectedItem时触发。
	         * _onSelectedItemChanging
	         * @private
	         */
	        _onSelectedItemChanging: function (row) {
	            var
	            //
	            self = this,
	            //
	            index = row.getAttribute('index'),
	            //
	            selectedItem = null;

	            if (index != self._selectedIndex) {
	                selectedItem = self._selectedItem = $(row);

	                if (self._selectedIndex != undefined && self._selectedIndex != -1) {
	                    _row_vsm.changeVisualStates.call(self._vm.items()[self._selectedIndex], _row_vsm.unSelected);
	                }

	                self._oldRowValue = (self._selectedIndex == -1) ? null : self._vm.items()[self._selectedIndex];

	                self._selectedIndex = index;
	                if (index != undefined) {
	                    _row_vsm.changeVisualStates.call(self._vm.items()[index], _row_vsm.selected);
	                }
	            }
	        },
	        /**
	         * 获取或设置用于生成控件的内容的集合。
	         * @method itemsSource
	         * @param {Array} source 需要设置的内容集合。
	         */
	        itemsSource: function (source) {
	            var self = this;
	            if (source === undefined) {
	                //获取控件的数据源
	                return ko.mapping.toJS(self._vm.items);
	            } else {
	                self._selectedIndex = -1;
	                self._setItemsSource(source);
	            }
	        }
	    });
	})(AUI, jQuery);


/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * @author fqwu
	 */

	(function ($$, $) {
	    var
		//datagrid的常量
		_constant = null;

	    $.extend($.aui.datagrid.prototype, {
	        /**
			 * 创建自定义列宽时需要的成员。
			 * @method _createResizingMembers
			 */
	        _createResizingMembers: function () {
	            var
				//
				self = this;
	            _constant = $$.datagrid("constant");
	            //自定义列宽时的遮罩
	            self._drag_popup = self.element.find("." + _constant.DRAG_POPUP_CLASS);
	            //标尺
	            self._meter = self.element.find("." + _constant.DRAG_RULER_CLASS);
	            //标尺移动的距离
	            self._distance = 0;
	            //标尺的起始位置
	            self._start = 0;
	            //当前拖拽列的拖拽部分
	            self._dragCell = null;
	            //鼠标左键点击时的时间
	            self._mouseDownResize = 0;
	            //当前窗体
	            self._home = $(document);
	        },
	        /**
			 * 列的可拖拽区域，在鼠标点击时触发。
			 * @method _onDragerMouseDown
			 * @private
			 * @param {jQuery.Event} e 事件参数。
			 */
	        _onDragerMouseDown: function (e) {
	            e.stopPropagation();
	            var
				//
				self = e.data,
				//
				index = this.getAttribute('data-index'),
				//
				cache = self._headerCache[index],
				// 拖拽时的遮罩
				drag_popup = self._drag_popup,
				// 拖拽移动的基准线
				meter = self._meter,
	            //
	            meterHeight = 0,
				// 移动的距离
				distance = self._distance,
				//
				start = 0,
				//
				sender = cache.drag,
				// 触发拖拽的列单元
				cell = cache.cell,
				//滚动容器的高度
				height = self._content.height(),
				//滚动内容的高度
				contentHeight = self._rowPresenter.height(),
				//
				bodyWidth = contentHeight > height ? height : contentHeight;

	            drag_popup.show();

	            self._dragCell = cell;
	            self._mouseDownResize = new Date();

	            // 移动的起始位置
	            self._start = e.clientX + sender.width();

	            if (e.offsetX) {
	                self._start -= e.offsetX;
	            } else if (e.originalEvent && e.originalEvent.layerX) {
	                self._start -= e.originalEvent.layerX;
	            }

	            meter.css({
	                height: self.element.height()
	            }).offset({
	                left: self._start,
	                top: cell.offset().top,
	            });

	            //需要每次拖拽重新注册和注销，避免释放后，仍然触发_onMeterUp
	            self._home
				//
				.on('mousemove' + self.eventNamespace, self, self._onMeterMove)
				//
				.on('mouseup' + self.eventNamespace, self, self._onMeterUp);

	            if (!window.captureEvents) {
	                meter[0].setCapture();
	            } else {
	                window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
	            }
	        },
	        /**
			 * 列的拖拽标尺，在鼠标左键松开时触发。
			 * @method _onMeterUp
			 * @private
			 * @param {jQuery.Event} e 事件参数。
			 */
	        _onMeterUp: function (e) {
	            e.stopPropagation();
	            var
				//
				self = e.data,
	            //
	            minWidth = self.options.minCellWidth,
				// 拖拽的来时到释放的时间间隔
				n = new Date() - self._mouseDownResize,
				//标尺释放时，列的位移，负值表示缩小列宽，正值表示增大列宽
				distance = self._distance,
				//
				cell = self._dragCell,
	            col,
				//被拖拽列的序号
				index = 0,
				//拖拽列将要被设置的列宽
				width = 0;

	            if (n >= 200) {
	                // 点击drager松开时触发
	                if (distance !== 0) {
	                    index = cell.attr("columnIndex") - 0;
	                    col = self._allTableCols[index];
	                    width = col.data("width") + distance;

	                    col.css('width', width);
	                    col.data("width", width);
	                    if (index < self._frozenColumnCount) {
	                        //更新锁定区域                   
	                        self._lockedTables.width(parseInt(self._lockedHeader[0].style.width) + distance);
	                        self._unLockeds.css('marginLeft', self._lockedHeader.width());
	                    }
	                }

	            }
	            //改变列宽可能会出现横向滚动条，在特定高度下，会因为横向滚动条的出现，造成纵向滚动条的出现。
	            self._resetVerticalScroll();
	            self._home.off(self.eventNamespace);

	            if (!window.releaseEvents) {
	                self._meter[0].releaseCapture();
	            } else {
	                window.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP);
	            }
	            cell.focus();
	            self._drag_popup.hide();
	        },
	        /**
			 * 列的拖拽标尺移动时触发。
			 * @method _onMeterMove
			 * @private
			 * @param {jQuery.Event} e 事件参数。
			 */
	        _onMeterMove: function (e) {
	            var
				//
				self = e.data,
				//
				cell = self._dragCell,
				//
				width = parseInt(cell.css('width')) + e.clientX - self._start,

				// meter向左移动的边界
				min = self._start - parseInt(cell.css('width')) + self.options.minCellWidth,
				//
				x = e.clientX,
				// meter向左移动的位移
				left = (x < min) ? min : x;

	            self._distance = left - self._start;

	            self._meter.css({
	                'left': left
	            });
	        },
	        /**
			 * 重置序号大于拖拽列的列的left值。
			 * @method _resetLeft
			 * @private
			 * @param {Number} index 拖拽列的序号。
			 */
	        _resetLeft: function (index) {
	            var
				//
				self = this,
				//
				name = "",
				//
				current = "",
				//
				i = index + 1,
				//
				end = self.options.columns.length,
	            //
	            blockFilter = self._blockFilter,
				//
				left = 0;

	            for (; i < end; i++) {
	                current = self._allColumns[i];
	                left = parseInt(current.css('left')) + self._distance;
	                current.css('left', left);
	                blockFilter[i].css('left', left);
	            }
	        },
	        /**
			 * 清除自定义列宽添加到Dom元素上的修改。
			 * @method _destroyColumnResize
			 * @private
			 */
	        _destroyColumnResize: function () {
	            var self = this;

	            self._home.off(self.eventNamespace);
	            self._meter.remove();
	            self._drag_popup.remove();
	        }
	    });
	})(AUI, jQuery);


/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * @author fqwu
	 */
	(function ($$, $) {
	    "use strict";

	    var
		//datagrid的常量
		_constant = null,
		//visibility枚举(使用下划线，这样会屏蔽掉jsdoc生成注释)
		_visibility = null;

	    $.extend($.aui.datagrid.prototype, {
	        _createColumnVisibilityMembers: function () {
	            _constant = $$.datagrid("constant");
	            _visibility = $$.datagrid("visibility");
	        },
	        /**
			 * 获取列的显示状态。
			 * @method getColumnVisibility
			 * @param {Number} index 列的序号
			 */
	        getColumnVisibility: function (index) {
	            var value;
	            if (index < this._columns.length) {
	                var value = this._columns[index].visibility;
	                value = (value === undefined) ? _visibility.visible : value;
	            }
	            return value;
	        },
	        /**
			 * 设置列的显示状态
			 * @method setColumnVisibility
			 * @param {Number} index 要设置显示状态的列的序号
			 * @param {visibility} value 待改变的显示状态
			 */
	        setColumnVisibility: function (index, value, lock) {
	            var
				//
				self = this,
	            //
	            value = (value == undefined) ? _visibility.visibility : value,
				// 需要隐藏的列
				current = self._allColumns[index],
	            col = self._allTableCols[index],
	            // 标题区域的默认设置宽度
	            viewWidth = self._viewWidth,
	            // 列的显示区域改变后，标题区域的宽度
				futureWidth = viewWidth;
	            if (index >= self._frozenColumnCount) {
	                self._columns[index].visibility = value;

	                if (value == _visibility.visible) {
	                    current.removeClass(_constant.HIDE_TD_CLASS);
	                    col.removeClass(_constant.HIDE_TD_CLASS);
	                    delete self._hiddenColumns[index];
	                } else {
	                    self._hiddenColumns[index] = col;

	                    current.addClass(_constant.HIDE_TD_CLASS);
	                    col.addClass(_constant.HIDE_TD_CLASS);
	                }
	            }
	            if (lock != true) {
	                self._resetVerticalScroll();
	            }
	        }
	    });
	}(AUI, jQuery));


/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * @author Levey
	 */
	(function ($$, $) {
	    "use strict";

	    var
		//datagrid的常量
		_constant = null,

		//
		_detailsMode = null;

	    /**
		 * @class datagrid
		 */
	    $.extend($.aui.datagrid.prototype, {
	        /**
			 * 创建排序需要的成员。
			 * @method _createDetailMembers
			 * @private
			 */
	        _createDetailMembers: function () {
	            /**
				 * 所有行详细信息对应的jQuery对象
				 * @property _details
				 * @private
				 * @type Object
				 */
	            this._details = null;
	            _constant = $$.datagrid("constant");

	            //
	            _detailsMode = $$.datagrid("detailsMode");
	        },
	        /**
			 * 单选模式下(single mode)显示当前选中行的Detail信息。
			 * @method _showCurrentDetail
			 * @private 
			 * @param {Number} index 需要显示的detail行的行号。
			 */
	        _showCurrentDetail: function (index) {
	            var
				//
				self = this,
				//
				mode = self.options.rowDetailsVisibilityMode,
				//
				details = self._details,
				//detail行的数目
				max = details.length - 1;

	            if (index <= max) {
	                switch (mode) {
	                    case _detailsMode.visibleWhenSelected:
	                    case _detailsMode.visibleWhenClick:
	                        //互斥展开。
	                        if (details[index].style.display == 'none') {
	                            details.hide();
	                            details[index].style.display = 'table-row';
	                        } else {
	                            details[index].style.display = 'none';
	                        }
	                        break;
	                    case _detailsMode.click:
	                        if (details[index].style.display == 'none') {
	                            details[index].style.display = 'table-row';
	                        } else {
	                            details[index].style.display = 'none';
	                        }
	                        break;
	                    default:

	                }
	                if (mode !== _detailsMode.visible) {
	                    //detail的显示会改变高度，需要重新计算滚动条
	                    this._resetVerticalScroll();
	                }
	            }
	        },

	        /**
			 * 设置Details部分的行号。
			 * @method _setDetailsRowIndex
			 * @private
			 */
	        _setDetailsRowIndex: function () {
	            var
				//
				j = 0,
				//
				details = this._details,
				//
				count = details.length;
	            for (; j < count; j++) {
	                details[j].setAttribute("index", j);
	            }
	        },
	        _updateDetailsVisibilityMode: function (mode) {
	            var
	                self = this,
	                details = self._details;
	            details.hide();
	            if (_detailsMode.visible == mode) {
	                details.show();
	            }
	            self._resetVerticalScroll();
	        },
	        showDetailRowByIndex: function (index) {
	            var
	                self = this,
	                max = self._vm.items().length;
	            if (index >= 0 && index < max) {
	                self._details[index].style.display = 'table-row';
	            }
	        },
	        hideDetailRowByIndex: function (index) {
	            var
	                self = this,
	                max = self._vm.items().length;
	            if (index >= 0 && index < max) {
	                self._details[index].style.display = 'none';
	            }
	        },
	        showDetails: function () {
	            var self = this;
	            self._details.show();
	        },
	        hideDetails: function () {
	            var self = this;
	            self._details.hide();
	        }
	    });
	}(AUI, jQuery));


/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * @author Levey
	 */
	(function ($$, $) {
	    "use strict";
	    var
		//指定单元格所处的状态
		_cellMode = null;

	    $.extend($.aui.datagrid.prototype, {
	        /**
			 * 创建排编辑要的成员。
			 * @method _createEditMembers
			 * @private
			 */
	        _createEditMembers: function () {
	            _cellMode = $$.datagrid("cellMode");
	        },
	        /**
			 * 转换到显示模式。
			 * @method _goToShowMode
			 * @private
			 * @param {Boolean} isRevert 是否将改变的信息回滚。
			 */
	        _goToShowMode: function (isRevert) {
	            var
				//
				self = this,
				//
				current = self._currentSelectedCell;
	            if (current.mode === _cellMode.editing) {
	                var oldValue = current.oldValue;
	                current.editingPart.css("display", "none");
	                current.showPart.css("display", "block");
	                current.cell.focus();

	                if (isRevert === true) {
	                    self._vm.items()[current.rowIndex][current.bindName](oldValue);
	                } else {
	                    if (self._isBackground) {

	                    } else {
	                        if (self.options.columns[current.columnIndex].isSortable == true) {
	                            self._sortColumn(current.columnIndex, self._sortMode);
	                        }
	                        if (self._hasFilter) {
	                            self._doFilter();
	                        }
	                    }

	                }

	                current.mode = _cellMode.normal;
	            }
	        },
	        /**
			 * 转换到编辑模式。
			 * @method _goToEditingMode
			 * @private
			 */
	        _goToEditingMode: function () {
	            var
				//
				self = this,
				//
				current = self._currentSelectedCell;
	            // $$.log("cell Mode: " + current.mode);
	            if (current.mode == _cellMode.normal && current.isReadOnly(self) == false) {
	                current.showPart.css("display", "none");
	                current.editingPart.css("display", "block");
	                current.editingElement.focus();
	                current.mode = _cellMode.editing;
	            }

	        },
	        /**
			 * 双击单元格时触发。
			 * @method _onCellDoubleClick
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onCellDoubleClick: function (e) {
	            var self = e.data;
	            self._goToEditingMode();
	        },
	        /**
			 * 清除column resize所有添加到Dom元素上的修改
			 * @method _destroyEdit
			 * @private
			 */
	        _destroyEdit: function () {
	            var
				//
				self = this,
				//
				current = self._currentSelectedCell;
	            if (current != null && current.editingElement != null) {
	                current.editingElement.off(self.eventNamespace);
	            }

	        }
	    });
	}(AUI, jQuery));


/***/ },
/* 19 */
/***/ function(module, exports) {

	/**
	 * @author fqwu
	 */

	(function ($$, $) {
	    "use strict";
	    var
		//datagrid的常量
		_constant = null,
		//filter枚举
		_filter = null,
		//message的枚举
		_message = null,
		//Belt枚举
		_belt = null,
		//数字类型带状过滤的枚举
		_numberBelt = null;

	    $.extend($.aui.datagrid.prototype, {
	        /**
			 * 创建过滤需要的成员。
			 * @method _initFilterMembers
			 * @private
			 */
	        _initFilterMembers: function () {
	            var
				//
				self = this,
				//列设置参数
				columns = self._columns;
	            //datagrid的常量
	            _constant = $$.datagrid("constant");
	            //filter枚举
	            _filter = $$.datagrid("filter");
	            //message的枚举
	            _message = $$.datagrid("message");
	            //Belt枚举+
	            _belt = $$.datagrid("filterBelt");
	            //数字类型带状过滤的枚举
	            _numberBelt = $$.datagrid("numberFilterBelt");

	            //缓存应用过滤的列的结果(Belt过滤)
	            self._BeltAssert = [];
	            //缓存应用过滤的列的结果(Block过滤)
	            self._BlockAssert = [];
	            //过滤列的可选值集合中选中项的集合。
	            self._filterValues = [];
	            //过滤列的可选值集合中选中项的集合。
	            self._filterUnCheckedValues = [];
	            //当前展开过滤部分的列号。
	            self._filterColumnIndex = -1;
	            //过滤部分的宽度
	            self._blockFilterWidth = 230;
	            //
	            self._searchAssert = null;
	            //
	            self._searchKey = '';
	            //当前展开filter的过滤状态
	            self._currentFilterStatus = [];
	            //过滤时使用的定时器
	            self._filterTimer = null;
	            if (self._filterType == _filter.block) {
	                self._convertBlockFilterItems();
	            }

	        },
	        /**
			 * 转换块状过滤部分的数据源。添加需要的辅助属性。
			 */
	        _convertBlockFilterItems: function () {
	            var
				//
				self = this,
				//
				i = 0,
				//
				j = 0,
				//过滤项集合在数据源中的属性名称
				name = "",
				//
				vm = self._vm,
				//
				columns = self._columns,
				//
				filterItems = null,
				//
				c = columns.length,
				//
				m = 0;

	            for (; i < c; i++) {
	                name = columns[i].filterItems;
	                if (typeof vm[name] == 'function') {
	                    filterItems = vm[name]();
	                    //注册监听
	                    vm[name].subscribe(self._convertFilterItems, {
	                        self: self,
	                        name: "_" + name + "timer"
	                    });

	                    m = filterItems.length;
	                    for (j = 0; j < m; j++) {
	                        //控制显示隐藏。search时使用
	                        filterItems[j]['_display'] = ko.observable('table-row');
	                        filterItems[j]['_onCheckBoxClick'] = self._blockFilterCheckBoxClick;
	                        filterItems[j]['_active'] = ko.observable(true);
	                    }

	                }

	            }

	        },
	        _convertFilterItems: function (newValue) {
	            var
	                self = this.self,
	                i = 0,
	                name = this.name,
	                c = newValue.length;
	            for (; i < c; i++) {
	                if (!newValue[i].hasOwnProperty('_display')) {
	                    newValue[i]['_display'] = ko.observable('table-row');
	                }
	                if (!newValue[i].hasOwnProperty('_onCheckBoxClick')) {
	                    newValue[i]['_onCheckBoxClick'] = self._blockFilterCheckBoxClick;
	                }
	                if (!newValue[i].hasOwnProperty('_active')) {
	                    newValue[i]['_active'] = ko.observable(true);
	                }
	            }
	            self[name] = setInterval(function () {
	                clearInterval(self[name]);
	                self._onFilterItemsChanged();
	            }, 10);
	        },
	        _onFilterItemsChanged: function () {
	            var self = this

	            self._blockFilterCheckBoxes = self._blockFilters.find(".aui-datagrid-block-filter-checkbox");
	            self._blockFilterCheckBoxes.data('self', self);
	        },
	        /**
			 * 创建带状过滤。
			 * @method _createBeltFilter
			 * @private
			 */
	        _createBeltFilter: function () {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            count = columns.length,
	            //
	            width = self._viewWidth,
	            //
	            i = 0,
	            //
	            html = '';
	            width = (typeof width == 'string') ? '100%' : width + 'px';
	            html += '<div class="' + _constant.DATAGRID_SCROLL_CONTAINER + '" style="background:#dddddd;border: 1px solid #ABABAB;border-top:0;">';
	            html += '<div class="' + _constant.BELT_FILTER_CLASS + '">'
	            for (; i < count; i++) {
	                var
	                //
	                cellClass = self._getCellClass(i),
	                //
	                cellWidth = self._getCellWidth(i),
	                //
	                belt = columns[i].belt;
	                html += '<div class="' + _constant.BELT_FILTER_CELL_CLASS + ' ' + cellClass + '" columnindex="' + i + '" style="width:' + cellWidth + ';left:' + self._getColumnLeft(i) + '">';
	                switch (belt) {
	                    //输入类型的过滤
	                    case _belt.input:
	                        html += '<input type="text" class="' + _constant.BELT_FILTER_INPUT_CLASS + '" columnindex="' + i + '" />';
	                        break;
	                        //下拉框类型的过滤
	                    case _belt.combobox:
	                        html += '<select class="' + _constant.BELT_FILTER_COMBOBOX_CLASS + '" data-bind="options: ' + columns[i].filterItems + ',optionsText: \'name\',optionsValue:\'value\'" columnindex="' + i + '"></select>';
	                        break;
	                        //检查框类型的过滤
	                    case _belt.checkbox:
	                        html += '<div class="' + _constant.BELT_FILTER_CHECKBOX_CLASS + '" columnindex="' + i + '"></div>'
	                        break;
	                        //数值类型的过滤
	                    case _belt.number:
	                        html += '<input class="' + _constant.BELT_FILTER_NUMBER_CLASS + '" columnindex="' + i + '" style="width:40px;" type="text" />';
	                        html += '<select class="' + _constant.BELT_FILTER_NIMBER_COMBOBOX_CLASS + '" columnindex="' + i + '">';
	                        html += '<option value="0">equal</option>';
	                        html += '<option value="1">not equal</option>';
	                        html += '<option value="2">less than</option>';
	                        html += '<option value="3">less than or equal</option>';
	                        html += '<option value="4">greater than</option>';
	                        html += '<option value="5">greater than or equal</option>';
	                        html += '</select>';
	                        // html += '<div class="' + _constant.BELT_FILTER_COMBOBOX_CLASS + '" style="position:absolute;left:50px;top:4px;border:1px solid red"></div>'
	                        break;
	                        //时间类型的过滤
	                    case _belt.DateTime:
	                        html += '<input type="text" />';
	                        break;
	                }
	                html += '</div>';
	            }
	            html += '</div>';
	            html += '</div>';

	            return html;
	        },
	        /**
	         * 初始化带状过滤区域的控件
	         */
	        _initBeltFilter: function () {
	            var self = this;
	            self.element.find('.' + _constant.BELT_FILTER_CHECKBOX_CLASS).checkbox({
	                isthreestate: true,
	                checked: null,
	                click: self._checkboxFilter,
	                tabindex: 1,
	                datagrid: self
	            });
	            self.element.find('.' + _constant.BELT_FILTER_INPUT_CLASS)
	            //
	            .textbox()
	            //
	            .on('keydown', this, self._stringFilter);

	            self.element.find('.' + _constant.BELT_FILTER_NUMBER_CLASS)
	            //
	            .textbox({
	                displayMode: "inline-block"
	            })
	            //
	            .on('keydown', this, self._numberFilter);

	            self.element.find('.' + _constant.BELT_FILTER_NIMBER_COMBOBOX_CLASS)
	            //
	            .on('change', this, self._numberSelectChanged);

	            self.element.find('.' + _constant.BELT_FILTER_COMBOBOX_CLASS)
	            //
	            .on('change', this, self._comboboxChanged);

	        },
	        /**
	         *
	         * @param item {} 没有被过滤掉的项
	         */
	        _updateFilterValues: function (item) {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //过滤属性的名称
	            name = "",
	            //过滤属性在item中的值
	            value = "",
	            //
	            count = columns.length,
	            //
	            i = 0;

	            for (; i < count; i++) {
	                if (columns[i].filterName) {
	                    name = columns[i].filterName;
	                    value = item[name]();
	                    self._filterValues[i] = self._filterValues[i] || [];
	                    //避免重复项添加
	                    if (self._filterValues[i].indexOf(value) == -1) {
	                        self._filterValues[i].push(value);
	                    }
	                }

	            }
	        },
	        _updateFilterStatus: function () {
	            return;
	            if (this._filterColumnIndex == -1) {
	                return;
	            }
	            var
	            //
	            self = this,
	            //当前展开过滤列的序号
	            index = self._filterColumnIndex,
	            //
	            vm = self._vm,
	            //
	            columns = self._columns,
	            //
	            filterCheckName = columns[index].filterCheckName,
	            //过滤集合的属性名称
	            name = "",
	            //过滤属性在item中的值
	            value = "",
	            //
	            filterValue = self._filterValues,
	            //
	            filterItems = "",
	            //需要检查的过滤项
	            checkItem = null,
	            //列数
	            count = columns.length,
	            //
	            i = 0,
	            //
	            j = 0,
	            //
	            m = 0;

	            for (; i < count; i++) {
	                //不能对正在进行过滤的列进行检测，否则可能出现，去掉checkbook勾选，过滤后，选项隐藏并锁定，无法还原的问题。
	                if (i != index) {
	                    name = columns[i].filterItems;
	                    if (typeof vm[name] == 'function') {
	                        filterItems = vm[name]();
	                        m = filterItems.length;
	                        for (j = 0; j < m; j++) {
	                            checkItem = filterItems[j];
	                            self._checkFilterItem(checkItem, filterValue[i], filterCheckName);
	                        }
	                    }
	                }

	            }
	        },
	        _checkFilterItem: function (item, values, checkName) {
	            var
	            //
	            self = this,
	            //
	            value = item.value(),
	            //
	            result = false,
	            //
	            count = values.length,
	            //
	            i = 0;

	            for (; i < count; i++) {
	                if (value == values[i]) {
	                    result = true;
	                    break;
	                }
	            }
	            item._active(result);
	            // item[checkName](result);
	            item._display(result ? "block" : "none");
	        },
	        /**
	         * @param {Int} delay 延迟
	         * @param {Object} 过滤需要的参数
	         */
	        _startTimer: function (delay, src, data) {
	            var self = this;
	            self._clearFilterTimer();

	            self._filterTimer = setInterval(function () {
	                var isClear = false;
	                data._value = src.value;

	                if (data._value == '') {
	                    isClear = true;
	                }
	                self._onFilterTimer(self, isClear, data);
	            }, delay);
	        },
	        /**
	         *
	         */
	        _onFilterTimer: function (self, isClear, data) {
	            if (true) {
	                self._clearFilterTimer();
	                self._filterItems(isClear, data);
	            }
	        },
	        _clearFilterTimer: function () {
	            var self = this;
	            if (self._filterTimer != null) {
	                clearInterval(self._filterTimer);
	                // $$.log('clear filter Interval');
	            }
	        },
	        /**
	         * 输入类型过滤时触发。
	         * @method _inputFilter
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         * @param {Object} data 过滤参数。   
	         * @param {Number} data._index 过滤列的序号。
	         * @param {String} data._name 过滤属性。
	         * @param {Function} data._assert 过滤方法。
	         */
	        _inputFilter: function (e, data) {
	            var
	            //
	            self = e.data,
	            //
	            which = e.which;

	            if ((which == 8) || (which == 229) || (which == 32) || (which >= 48 && which <= 57) || (which >= 65 && which <= 90) || (which >= 96 && which <= 111) || (which >= 186 && which <= 192) || (which >= 219 && which <= 222)) {
	                self._startTimer(300, e.target, data);
	            }
	        },
	        /**
	         * 字符串类型的过滤。
	         * @method _stringFilter
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _stringFilter: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            columns = self._columns,
	            //
	            index = this.getAttribute('columnindex'),
	            //
	            which = e.which,
	            //
	            name = columns[index].filterName;

	            self._inputFilter(e, {
	                _index: index,
	                _name: name,
	                _assert: self._containsAssert
	            });
	        },
	        /**
	         * checkbox类型过滤触发时调用
	         * @method _checkboxFilter
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         * @param {Object} data 过滤参数。
	         * @param {Number} data._index 过滤列的序号。
	         * @param {String} data._name 过滤属性。
	         * @param {Function} data._assert 过滤方法。
	         */
	        _checkboxFilter: function (e, data) {
	            var
	            //
	            element = data.element,
	            //列号
	            index = element.attr('columnindex'),
	            //
	            datagrid = element.checkbox('option', 'datagrid'),
	            //
	            columns = datagrid._columns,
	            //需要过滤的值
	            value = data.newValue,
	            //该值表示是否清除过滤
	            isClear = (value != null) ? false : true;
	            //
	            name = columns[index].filterName;

	            datagrid._filterItems(isClear, {
	                _index: index,
	                _value: value,
	                _name: name,
	                _assert: datagrid._checkBoxAssert
	            });
	        },
	        /**
	         *
	         */
	        _numberFilter: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            columns = self._columns,
	            //
	            index = this.getAttribute('columnindex'),
	            //
	            which = e.which,
	            //
	            type = (self._BeltAssert[index] == null) ? _numberBelt.equal : self._BeltAssert[index]._type,
	            //
	            name = columns[index].filterName;

	            self._inputFilter(e, {
	                _index: index,
	                _name: name,
	                _assert: self._numberAssert,
	                _type: type
	            });
	        },
	        /**
	         *
	         */
	        _numberSelectChanged: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            columns = self._columns,
	            //
	            index = this.getAttribute('columnindex'),
	            //
	            value = (self._BeltAssert[index] == null) ? '' : self._BeltAssert[index]._value,
	            //
	            // isClear = value == '' ? true : false,
	            //
	            type = parseInt(this.value),
	            //
	            name = columns[index].filterName;

	            self._filterItems(false, {
	                _index: index,
	                _value: value,
	                _name: name,
	                _assert: self._numberAssert,
	                _type: type
	            });
	        },
	        /**
	         *
	         */
	        _comboboxChanged: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            columns = self._columns,
	            //
	            index = this.getAttribute('columnindex'),
	            //
	            value = parseInt(this.value),
	            //
	            // isClear = value == '' ? true : false,
	            //
	            name = columns[index].filterName;

	            self._filterItems(false, {
	                _index: index,
	                _value: value,
	                _name: name,
	                _assert: self._comboboxAssert
	            });
	        },
	        /**
	         * 获取过滤条件
	         */
	        _getFilterCondition: function (item) {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //true表示显示，false表示过滤掉
	            value = true,

	            //
	            assert = self._filterType == _filter.belt ? self._BeltAssert : self._BlockAssert,
	            //过滤的列的个数
	            count = assert.length;
	            for (; i < count; i++) {
	                var
	                //
	                current = assert[i];
	                //对每一项数据根据断言进行判断
	                if (current != null && value) {
	                    if (self._filterType == _filter.belt) {
	                        value = value && current._assert(item, current._name, current._value, current._type);
	                    } else {
	                        if ($.isFunction(current._customFilter)) {
	                            value = value && current._customFilter(item, current);
	                        } else {
	                            value = value && current._assert(item, current);
	                        }

	                    }

	                }

	            }
	            if ($.isFunction(self._searchAssert) && value) {
	                value = value && self._searchAssert(item, self._searchKey);
	            }
	            return value;
	        },
	        /**
	         * 选择框类型过滤的断言
	         * @param {ko.Observable} item 待判定的行对应的数据源
	         * @param {String} name 需要判断的属性
	         * @param {} value 过滤值
	         */
	        _checkBoxAssert: function (item, name, value) {
	            return (value != null) ? item[name]() == value : true;
	        },
	        _equalAssert: function (left, right) {
	            return left == right;
	        },
	        /**
	         * 包含断言(字符串类型)
	         */
	        _containsAssert: function (left, right) {
	            return (left.indexOf(right) == -1) ? false : true;
	        },
	        /**
	         * 不包含断言(字符串类型)
	         */
	        _notContainsAssert: function (item, name, value) {
	            return (item[name]().indexOf(value) == -1) ? true : false;
	        },
	        /**
	         * 下拉框类型的过滤的断言
	         */
	        _comboboxAssert: function (item, name, value) {
	            return (item[name]() == value) ? true : false;
	        },
	        /**
	         * 数字类型过滤的断言
	         */
	        _numberAssert: function (item, name, value, type) {
	            if (value == '') {
	                return true;
	            } else {
	                switch (type) {
	                    case _numberBelt.equal:
	                        return (item[name]() == value) ? true : false;
	                        break;
	                    case _numberBelt.notEqual:
	                        return (item[name]() != value) ? true : false;
	                        break;
	                    case _numberBelt.lessThan:
	                        return (item[name]() < value) ? true : false;
	                        break;
	                    case _numberBelt.lessThanOrEqual:
	                        return (item[name]() <= value) ? true : false;
	                        break;
	                    case _numberBelt.greaterThan:
	                        return (item[name]() > value) ? true : false;
	                        break;
	                    case _numberBelt.greaterThanOrEqual:
	                        return (item[name]() >= value) ? true : false;
	                        break;
	                    default:
	                        return (item[name]() == value) ? true : false;
	                        break;

	                }
	            }

	        },
	        /**
	         * 筛选逻辑触发前时发生。
	         * @param {Function} handler 需要在委托中添加或者删除的方法。
	         * @param {Boolean} isAdd 是否添加。
	         */
	        beforeFilter: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.filtering, handler, isAdd);
	        },
	        /**
	         * 更新列的设置状态
	         *
	         */
	        _addFilterStatus: function (index) {
	            var
	            //
	            self = this,
	            //
	            cache = self._headerCache,
	            //
	            current = cache[index],
	            //
	            sort = current.sort;

	            if (self._sortCache && self._sortCache._index == index) {
	                //添加排序和过滤样式
	                if (self._sortCache._mode == $$.datagrid("sortmode").asc) {
	                    sort
	                        .removeClass()
	                        .addClass(_constant.HEADER_SETTING_CLASS + ' ' + _constant.HEADER_SORT_ASC_FILTER_CLASS);
	                } else {
	                    sort
	                        .removeClass()
	                        .addClass(_constant.HEADER_SETTING_CLASS + ' ' + _constant.HEADER_SORT_DESC_FILTER_CLASS);
	                }
	            } else {
	                //添加filter样式。
	                sort
	                    .removeClass()
	                    .addClass(_constant.HEADER_SETTING_CLASS + ' ' + _constant.HEADER_FILTER_CLASS);
	            }
	        },
	        /**
	         * 过滤可选项
	         *
	         * @param {Boolean} isClear,是否清除过滤
	         * @param {Object} data 过滤需要的对象
	         */
	        _filterItems: function (isClear, data) {
	            var
	            //
	            i = 0,
	            //
	            self = this,
	            //
	            index = data._index,
	            //
	            cache = self._headerCache,
	            //
	            current = cache[index],
	            //
	            sort = current.sort;
	            if (self._filterType == _filter.belt) {
	                //删除缓存的过滤条件
	                if (self._BeltAssert[index] != null) {
	                    delete self._BeltAssert[index];
	                }
	                if (!isClear) {
	                    //更新过滤条件
	                    self._BeltAssert[index] = data;
	                }
	            } else {
	                //删除缓存的过滤条件
	                if (self._BlockAssert[index] != null) {
	                    delete self._BlockAssert[index];
	                }
	                if (!isClear) {
	                    //更新过滤条件
	                    self._BlockAssert[index] = data;
	                }

	            }
	            if (!isClear) {
	                self._addFilterStatus(index);
	            }

	            self._trigger("filtering", null, $$.Event({
	                element: self.element,
	                newValue: {
	                    sort: self._sortCache,
	                    filter: (self._filterType == _filter.belt) ? self._BeltAssert : self._BlockAssert,
	                    search: self._searchKey
	                }
	            }));

	            if (!self._isBackground) {
	                self._doFilter(isClear);
	            }
	        },
	        //如果初始化时设置了过滤条件，调用次方法过滤数据，并更新标题的状态
	        _updateFilter: function () {
	            //需要先设置sort在调用本方法。
	            var
	                self = this,
	                i = 0,
	                columns = self._columns,
	                flag = false,
	                c = self._columns.length;

	            for (; i < c; i++) {
	                if (columns[i].filterName) {
	                    var filterItems = ko.toJS(self._vm[columns[i].filterItems]);

	                    if (self._isColumnFiltered(filterItems, columns[i].filterCheckName)) {
	                        self._BlockAssert[i] = {
	                            _index: i,
	                            _name: columns[i].filterName,
	                            _filterCheckName: columns[i].filterCheckName,
	                            _filterItems: filterItems,
	                            _caseSensitive: self.options.isFilterCaseSensitive,
	                            _customFilter: columns[i].customFilter,
	                            _assert: self._blockFilterAssert
	                        };
	                        flag = true;
	                        self._addFilterStatus(i);
	                        //clear
	                        self._blockFilterClear[i].removeClass(_constant.HEADER_SETTING_CLEAR_DISABLED_CLASS);
	                        self._blockFilterClearImg[i].removeClass(_constant.HEADER_SETTING_CLEAR_DISABLED_IMG_CLASS);
	                    }
	                }
	            }

	            if (flag) {
	                self._doFilter();
	            }
	        },
	        //检测列是否
	        _isColumnFiltered: function (options, name) {
	            var
	                self = this,
	                i = 0,
	                value = false,
	                c = options.length;

	            for (; i < c; i++) {
	                if (options[i][name] === false) {
	                    value = true;
	                    break;
	                }
	            }

	            return value;
	        },
	        /**
	         * 筛选数据
	         */
	        _doFilter: function (isClear) {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            items = self._vm.items(),
	            //隐藏行的数目
	            hiddenCount = 0,
	            //当前的datagrid行数
	            count = items.length;
	            //清空可选项过滤集合
	            self._filterValues = [];
	            self._filterUnCheckedValues = [];
	            for (; i < count; i++) {
	                var
	                //
	                item = items[i],
	                //过滤条件
	                flag = self._getFilterCondition(item);
	                item[self._display]('table-row');
	                if (!flag) {
	                    item[self._display]('none');
	                    hiddenCount++
	                } else {
	                    self._updateFilterValues(item);
	                }
	            }
	            self._updateFilterStatus();
	            if (hiddenCount == count) {
	                self._showMessage(_message.filter);
	                self._rowPresenter.hide();
	            } else {
	                self._rowPresenter.show();
	                self._messageContainer.hide();
	            }
	            self._resetVerticalScroll();

	            self._addZebraLists();

	            self._trigger("filtered", null, $$.Event({
	                element: self.element,
	                newValue: self.getRowsByAttribute("_display", "table-row")
	            }));
	        },
	        /**
	         * 搜索数据
	         * @param {String} key 搜索关键字
	         * @param {Function} assert 搜索断言
	         */
	        searchItems: function (assert, key) {
	            var self = this;
	            self._searchAssert = assert;
	            self._searchKey = key;


	            // 执行委托
	            $$.executeEventHandler(self, "searching", self.options.searching, null, $$.Event({
	                element: self.element,
	                newValue: {
	                    sort: self._sortCache,
	                    filter: (self._filterType == _filter.belt) ? self._BeltAssert : self._BlockAssert,
	                    search: self._searchKey
	                }
	            }));

	            if (!self._isBackground) {
	                self._doFilter();
	            }
	        },
	        //设置搜索条件。后台搜索是使用。当触发过滤或者排序时，会将该值传递到回调函数中。
	        setSearchKey: function (key) {
	            this._searchKey = key;
	        }
	    });
	    /**
	     * 块状过滤的相关逻辑
	     */
	    $.extend($.aui.datagrid.prototype, {
	        _blockFilterCheckBoxClick: function (e, data) {
	            e.stopPropagation();
	            var
	            //
	            self = data.element.data('self');
	            self._controlSelectAll(data);
	        },
	        _controlSelectAll: function (data) {
	            var
	            //
	            self = this,
	            //
	            newValue = data.newValue,
	            //
	            index = self._filterColumnIndex,
	            //
	            filterItems = self._columns[index].filterItems,
	            //
	            items = self._vm[filterItems](),
	            //
	            filterCheckName = self._columns[index].filterCheckName,
	            //
	            i = 0,
	            //
	            flag = true,
	            //
	            m = items.length,
	            //
	            count = m,
	            //
	            newValue = data.newValue;

	            for (; i < m; i++) {
	                if (items[i][filterCheckName]() == false) {
	                    flag = false;
	                    count--;
	                }
	            }
	            if (newValue == false) {
	                self._blockFilterSelectAll[index].checkbox('option', 'checked', false);
	            } else {

	                if (flag) {
	                    self._blockFilterSelectAll[index].checkbox('option', 'checked', true);
	                }
	            }
	            if (count == 0) {
	                self._blockFilterOk[index].button('disable');
	            } else {
	                if (count < m) {
	                    self._blockFilterSelectAll[index].checkbox('option', 'checked', null);
	                }

	                self._blockFilterOk[index].button('enable');
	            }
	        },
	        _onBlockFilterSelectAllClick: function (e, data) {
	            var
	            //
	            self = data.element.checkbox("option").datagrid,
	            //
	            oldValue = data.oldValue,
	            //
	            newValue = data.newValue,
	            //
	            columns = self._columns,
	            //
	            index = self._filterColumnIndex,
	            //
	            filterItems = self._columns[index].filterItems,
	            //
	            filterCheckName = self._columns[index].filterCheckName,
	            //
	            items = self._vm[filterItems](),
	            //
	            count = items.length,
	            //
	            i = 0;
	            if (oldValue == null) {
	                data.element.checkbox('option', 'checked', true);
	                newValue = true;
	            }
	            if (newValue == null) {
	                data.element.checkbox('option', 'checked', false);
	                newValue = false;
	                self._blockFilterOk[index].button('disable');
	            } else if (newValue == true) {
	                self._blockFilterOk[index].button('enable');
	            }
	            for (; i < count; i++) {
	                items[i][filterCheckName](newValue);
	            }
	        },
	        /**
	         * 块状过滤使用的断言。
	         */
	        _blockFilterAssert: function (item, args) {
	            var
	            //
	            i = 0,
	            //比较结果
	            value = true,
	            //该值表示过滤结果集时在数据源中进行比较的属性名称
	            name = args._name,
	            //过滤选项的checkbox的checked属性在可过滤选项集合中的属性名称
	            filterCheckName = args._filterCheckName,
	            //可过滤项集合
	            items = args._filterItems,
	            //
	            caseSensitive = args._caseSensitive,
	            //
	            flag = false,
	            //过滤条件的数目
	            count = items.length;

	            if (typeof name !== "string") {
	                $.error('The "filterName" for column ' + args._index + ' is undefined.Please check your initialize settings for datagrid.');
	            }

	            if (item[name] === undefined) {
	                $.error('The "filterName" for column ' + args._index + ' is incorrect.Please check your initialize settings for datagrid.');
	            }
	            for (; i < count; i++) {
	                //验证值是否符合筛选条件
	                if (items[i][filterCheckName] == false) {
	                    if (caseSensitive) {
	                        flag = item[name]() == items[i].value;
	                    } else {
	                        if (typeof item[name]() == "string") {
	                            flag = item[name]().toLowerCase() == items[i].value.toLowerCase();
	                        } else {
	                            flag = item[name]() == items[i].value;
	                        }
	                    }

	                    value = value && flag ? false : true;
	                }
	                if (value == false) {
	                    break;
	                }
	            }
	            //返回false代表在数据集合中过滤掉
	            return value;
	        },
	        /**
	         * 保存filter展开时的过滤状态
	         * @param index {Number} 列号
	         */
	        _saveFilterStatusByIndex: function (index) {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            filterCheckName = columns[index].filterCheckName,
	            //
	            filterItems = columns[index].filterItems;
	            self._filterColumnIndex = index;
	            if (filterCheckName) {
	                self._currentFilterStatus = ko.mapping.toJS(self._vm[filterItems]);
	            }
	        },
	        /**
	         * 清除过滤。
	         */
	        _clearBlockFilter: function (index) {
	            var
	            //
	            self = this,
	            //
	            columns = self._columns,
	            //
	            filterItems = self._columns[index].filterItems,
	            //
	            filterCheckName = self._columns[index].filterCheckName,
	            //
	            items = self._vm[filterItems](),
	            //
	            count = items.length,
	            //
	            i = 0,
	            //
	            cache = self._headerCache,
	            //
	            current = cache[index],
	            //
	            sort = current.sort;
	            for (; i < count; i++) {
	                items[i][filterCheckName](true);
	            }
	            self._blockFilterSelectAll[index].checkbox('option', 'checked', true);
	            self._filterItems(true, {
	                _index: index,
	                _name: columns[index].filterName,
	                _filterCheckName: columns[index].filterCheckName,
	                _filterItems: ko.toJS(self._vm[columns[index].filterItems]),
	                _assert: self._blockFilterAssert
	            });
	            self._removeFilterStatus(index);

	            $(self._blockFilter[index]).hide();
	            self._blockFilterPopup.hide();

	        },
	        /**
	         * 移除过滤样式
	         */
	        _removeFilterStatus: function (index) {
	            var
	            //
	            self = this,
	            //
	            cache = self._headerCache,
	            //
	            current = cache[index],
	            //
	            sort = current.sort;

	            if (self._sortCache && self._sortCache._index == index) {
	                if (self._sortCache._mode == 2) {
	                    //desc
	                    sort
	                    //
	                    .removeClass()
	                    //
	                    .addClass(_constant.HEADER_SETTING_CLASS + ' ' + _constant.HEADER_SETTING_ICON_CLASS + ' ' + _constant.HEADER_SORT_DESC_CLASS);
	                } else {
	                    //asc
	                    sort
	                    //
	                    .removeClass()
	                    //
	                    .addClass(_constant.HEADER_SETTING_CLASS + ' ' + _constant.HEADER_SETTING_ICON_CLASS + ' ' + _constant.HEADER_SORT_ASC_CLASS);
	                }

	            } else {
	                sort
	                //
	                .removeClass()
	                //
	                .addClass(_constant.HEADER_SETTING_CLASS + ' ' + _constant.HEADER_SETTING_ICON_CLASS);
	            }
	            //清除对应的filter by
	            if (self.options.isResponsive) {
	                self._responsiveSettingFilterByItem[index].hide();
	            }

	        },
	        _onBlockFilterClearClick: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            disabledClass = _constant.HEADER_SETTING_CLEAR_DISABLED_CLASS,
	            //
	            index = this.getAttribute("index");
	            if (!self._blockFilterClear[index].hasClass(disabledClass)) {
	                self._clearBlockFilter(index);
	                self._blockFilterClear[index].addClass(disabledClass);
	                self._blockFilterClearImg[index].addClass(_constant.HEADER_SETTING_CLEAR_DISABLED_IMG_CLASS);
	            }

	            if (self.options.isResponsive) {
	                self._responsiveSettingFilterByItem[index].hide();
	            }
	        }
	    });
	}(AUI, jQuery));


/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 * @author Levey
	 */

	(function ($$, $) {
	    "use strict";
	    var
		//常量
		_constant = $$.datagrid("constant"),
		//filter枚举
		_filter = $$.datagrid("filter"),
		//排序模式
		_sortMode = $$.datagrid("SortMode");

	    /**
		 * @class datagrid
		 */
	    $.extend($.aui.datagrid.prototype, {
	        /**
			 * 创建排序需要的成员。
			 * @method _createSortMembers
			 * @private
			 */
	        _createSortMembers: function () {
	            this._sortCache = {};
	            this._sortedIndex = -1;
	        },
	        /**
			 * 排序。
			 * @method _sortData
			 * @private
			 * @param {Function} assert 排序方法。
			 */
	        _sortData: function (assert) {
	            var
				//
				self = this,
				//
				main = self._rowPresenter;
	            if ($.isFunction(assert)) {
	                //排序会触发vm的items的变更
	                self._isItemsChanged = true;
	                self._vm.items.sort(assert);
	            }
	            //更新奇数行的集合
	            self._singleItem = main.children('div[class~="' + _constant.ROW_CLASS + '"]:even');
	            //更新偶数行的集合
	            self._evenItem = main.children('div[class~="' + _constant.ROW_CLASS + '"]:odd');

	            self._details = main.children('div[class="' + _constant.DETAILS_ROW_CLASS + '"]');

	            //更新选中项。
	            if (self._selectedIndex != -1) {
	                self._onSelectedItemChanging(self._item[self._selectedIndex]);
	            }

	            self._addZebraLists();

	            self._trigger("sorted", null, $$.Event({
	                element: self.element,
	                newValue: {
	                    newValue: self.getRowsByAttribute("_display", "table-row")
	                }
	            }));
	        },
	        //标题的click事件触发时，进行排序
	        _triggerSort: function (cur) {
	            var index = parseInt(cur.attr('columnindex'));
	            if (this._columns[index].isSortable === true) {
	                this._doSort(index, cur.data('grid-sort') != _sortMode.asc ? _sortMode.asc : _sortMode.desc);
	            }
	        },
	        _doSort: function (index, sortMode) {
	            var
				    cache = this._headerCache,
				    //触发排序的列
				    current = cache[index],
				    //
				    sortPart = $(this._headerSorts[index]),
				    //排序方法
				    sortMethod = null,
				    //待排序列的初始化参数
				    column = this._columns[index];

	            if (index > this._columns.length) {
	                $.error("Sort index is more than columns length.");
	            }

	            if (index != this._sortedIndex) {
	                this._removeColumnSort(this._sortedIndex);
	            }

	            this._sortedIndex = index;

	            if (sortMode == _sortMode.asc) {
	                this._toASC(index);
	                sortMethod = column.sortASC;
	            } else {
	                this._toDESC(index);
	                sortMethod = column.sortDESC;
	            }

	            this._sortCache = {
	                _index: index,
	                _name: this._columns[index].name,
	                _mode: sortMode
	            };

	            this._trigger("sorting", null, $$.Event({
	                element: this.element,
	                newValue: {
	                    sort: this._sortCache,
	                    filter: (this._filterType == _filter.belt) ? this._BeltAssert : this._BlockAssert,
	                    search: this._searchKey
	                }
	            }));

	            if (!this._isBackground) {
	                this._sortData(sortMethod);
	            }
	        },
	        _removeColumnSort: function (i) {
	            $(this._headerSorts[i])
	                .removeClass(_constant.HEADER_SORT_ASC_CLASS + ' ' + _constant.HEADER_SORT_DESC_CLASS)

	            $(this._headerCell[i])
	                .removeClass(_constant.HEADER_SORT_CLASS)
	                .data('grid-sort', $$.datagrid('sortmode').none)
	                .removeAttr('aria-sort');
	        },
	        //将列的可视化状态更新到升序状态
	        _toASC: function (i) {
	            $(this._headerSorts[i])
	                .removeClass(_constant.HEADER_SORT_DESC_CLASS)
	                .addClass(_constant.HEADER_SORT_ASC_CLASS);

	            $(this._headerCell[i])
	                .addClass(_constant.HEADER_SORT_CLASS)
	                .data('grid-sort', $$.datagrid('sortmode').asc)
	                .attr('aria-sort', 'ascending');
	        },
	        //将列的可视化状态更新到降序
	        _toDESC: function (i) {
	            $(this._headerSorts[i])
	                .removeClass(_constant.HEADER_SORT_ASC_CLASS)
	                .addClass(_constant.HEADER_SORT_DESC_CLASS);

	            $(this._headerCell[i])
	                .addClass(_constant.HEADER_SORT_CLASS)
	                .data('grid-sort', $$.datagrid('sortmode').desc)
	                .attr('aria-sort', 'descending');
	        },
	        //数据变化时，更新排序结果 (编辑模式到普通模式使用该方法)
	        _sortColumn: function (i) {
	            var sortMode = this._headerCell[i].data('grid-sort');
	            if (this._columns[index].isSortable === true && !!sortMode) {
	                this._doSort(index, sortMode);
	            }
	        },
	        /**
			 * 筛选逻辑触发前时发生。
			 */
	        beforeSort: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.sorting, handler, isAdd);
	        },
	        //设置列的排序状态
	        setColumnSortStatus: function (index, sortMode) {
	            this._removeColumnSort(this._sortedIndex);

	            if (sortMode == $$.datagrid('sortMode').asc) {
	                this._toASC(index);
	            } else if (sortMode == $$.datagrid('sortMode').desc) {
	                this._toDESC(index);
	            }
	            this._sortedIndex = index;
	        },
	        /**
			 * 清除列的排序状态。
			 * @method clearSort
			 */
	        clearSort: function () {
	            var self = this;
	            //清除排序状态。
	            self._removeColumnSort(self._sortedIndex);
	            //清楚排序条件。
	            self._sortCache = {};
	        }
	    });
	}(AUI, jQuery));


/***/ },
/* 21 */
/***/ function(module, exports) {

	(function ($, $$) {
	    "use strict";

	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.datepicker = {
	            init: function (element, valueAccessor, allBindings, viewModel) {
	                var
	                    element = $(element),
	                    data = valueAccessor(),
	                    disabled = data.disabled,
	                    selectedDate = data.selectedDate,
	                    selectedTimeZone = data.selectedTimeZone,
	                    isDisabledObservable = ko.isObservable(disabled),
	                    isSelectedDateObservable = ko.isObservable(selectedDate),
	                    isSelectedTimeZoneObservable = ko.isObservable(selectedTimeZone),
	                    value = ko.toJS(ko.unwrap(data)),
	                    executeEventHandler = $$.executeEventHandler,
	                    timeZoneChanged = value.timeZoneChanged,
	                    selectionChanged = value.selectionChanged,
	                    isEnabledChanged = value.isEnabledChanged;

	                element.datepicker(value);

	                if (isSelectedDateObservable) {
	                    element.datepicker("option", "selectionChanged", function (e, args) {
	                        selectedDate(args.newValue);
	                        executeEventHandler(null, "selectionChanged", selectionChanged, e, args);
	                    });
	                    selectedDate.subscribe(function () {
	                        element.datepicker("option", "selectedDate", selectedDate());
	                    });
	                }

	                if (isSelectedTimeZoneObservable) {
	                    element.datepicker("option", "timeZoneChanged", function (e, args) {
	                        selectedTimeZone(args.newValue);
	                        executeEventHandler(null, "timeZoneChanged", timeZoneChanged, e, args);
	                    });
	                    selectedTimeZone.subscribe(function () {
	                        element.datepicker("option", "selectedTimeZone", selectedTimeZone());
	                    });
	                }

	                if (isDisabledObservable) {
	                    element.datepicker("option", "isEnabledChanged", function (e, args) {
	                        disabled(args.newValue);
	                        executeEventHandler(null, "isEnabledChanged", timeZoneChanged, e, args);
	                    });
	                    disabled.subscribe(function () {
	                        element.datepicker("option", "disabled", disabled());
	                    });
	                }
	            }
	        };
	    }

	    var
	        uuid = -1,
	        _constant = {
	            DATE_PICKER_WRAP: 'aui-datepicker-wrap',
	            DATE_PICKER: "aui-datepicker",
	            //datepicker 不可用状态时使用的样式
	            DATE_PICKER_DISABLED: "aui-datepicker-disabled",
	            //遮罩部件对应的样式
	            POPUP_CLASS: "aui-datepicker-popup",
	            //calendar部件对应的样式
	            CALENDAR_CLASS: "aui-datepicker-calendar",
	            //内容区域的样式
	            CONTENT_CLASS: "aui-datepicker-content",
	            //icon部件对应的样式
	            ICON_CLASS: "aui-datepicker-icon",
	            //icon部件对应的font字体样式
	            ICON_FONT_CLASS: "fi-calendar-a",
	            //扩展区域的样式
	            EXTEND_CLASS: "aui-datepicker-extend",
	            //分钟部件的样式
	            MINUTE_CLASS: "aui-datepicker-minute",
	            TODAY_CONTAINER_CLASS: 'aui-datepicker-today-container',
	            //today部件对应的样式
	            TODAY_CLASS: "aui-datepicker-extend-today",
	            //timezone标题对应的样式
	            TIMEZONE_HEADER_CLASS: "aui-datepicker-timezone-header",
	            //ok button部件对应的样式
	            OK_CLASS: "aui-datepicker-ok",
	            //cancel button部件对应的样式
	            CANCEL_CLASS: "aui-datepicker-cancel",
	            //validation部件对应的样式
	            VALIDATION_CLASS: "aui-datepicker-validation",
	            INLINE_BLOCK_CLASS: 'aui-datepicker-ib',
	            //月视图中上个月的样式
	            MONTH_ITEM_PAST_CLASS: "aui-gcalendar-past-item",
	            MONTH_ITEM_FEATURE_CLASS: "aui-gcalendar-month-feature-item"
	        };

	    $.widget("aui.datepicker", {
	        validationId: "aui-datepicker-validation-",
	        //遮罩部件对应的id
	        popupId: "aui-datepicker-popup-",
	        //calendar部件对应的Id
	        calenarId: "aui-datepicker-calendar-",
	        //gcalendar部件对应的id
	        gCalendarId: "aui-datepicker-gcalendar-",
	        //content部件对应的id
	        contentId: "aui-datepicker-today-content-",
	        //toady部件对应的id
	        todayId: "aui-datepicker-today-",
	        //hour部件对应的id
	        hourId: "aui-datepicker-hour-",
	        //冒号部件对应的id
	        colonId: "aui-datepicker-colon-",
	        //分钟部件对应的id
	        minuteId: "aui-datepicker-minute-",
	        //timezone区域对应的id
	        timezoneContainerId: "aui-datepicker-timezone-container-",
	        //timezone combobox部件对应的id
	        timezoneId: "aui-datepicker-timezone-",
	        //saving time部件对应的id
	        savingTimeId: "aui-datepicker-saving-time-",
	        //window对应的jQuery对象
	        $window: null,
	        //body对应的jQuery对象
	        $body: null,
	        //popup部件对应的jQuery对象
	        $popup: null,
	        //calendar部件对应的jQuery对象
	        $calendar: null,
	        //g calendar部件对应的jQuery对象
	        $gcalendar: null,
	        //content部件对应的jQuery对象
	        $content: null,
	        //today部件对应的jQuery对象
	        $today: null,
	        //template列对应的jQuery对象
	        $todayTd: null,
	        //timezone区域对应的jQuery对象
	        $timezoneContainer: null,
	        //timezone combobox部件对应的jQuery对象
	        $timezone: null,
	        //saving time部件对应的jQuery对象
	        $savingTime: null,
	        //hour部件对应的jQuery对象
	        $hour: null,
	        //冒号部件对应的jQuery对象
	        $colon: null,
	        //minute部件对应的jQuery对象
	        $minute: null,
	        //left部件对应的jQuery对象
	        $left: null,
	        //validation部件对应的jQuery对象
	        $validation: null,
	        //年视图月部件对应的jQuery对象
	        $yearItem: null,
	        //月视图天部件对应的jQuery对象
	        $monthItem: null,
	        //世纪视图年部件对应的jQuery对象
	        $decadeItem: null,
	        //12小时制对应的hour数据
	        hour12Items: null,
	        //24小时制对应的hour数据
	        hour24Items: null,
	        //time 总额对应的数据
	        timezones: null,
	        //该值表示g calendar是否显示，true表示显示。默认值false
	        isShow: false,
	        //
	        iFormat: null,
	        options: {
	            //获取或设置一个值，该值表示选中日期后，在content区域显示的日期采用的格式。只在控件初始化时设置有效。
	            dateTimeFormat: "dd-MM-yy",
	            //获取或设置一个值，该值指示用户是否可以与控件交互。
	            disabled: false,
	            //获取或设置一个值，该值表示是否启用timepicker部件。启用后可以进行小时和分钟的选择。默认值false，表示禁用。
	            hasTimePicker: false,
	            //获取或设置一个值，该值表示是否启用timezone部件。启用后可以进行时区的选择。默认值false，表示禁用。
	            hasTimeZone: false,
	            //获取或设置一个值，该值表示是否启用calendar部件。启用后可以进行日历选择。默认值true，表示启用日历。
	            hasCalendar: true,
	            //获取或设置一个值，该值表示是否支持24小时。默认值false，表示采用12小时制。
	            is24HourSupported: true,
	            //获取或设置一个值，该值表示选中的日期。优先级高于selectedStartDate。类型:Date
	            //获取或设置一个值，该值指示控件的值是否是只读的
	            isReadOnly: true,
	            parameters: {},
	            selectedDate: null,
	            //old api 相当于selectedDate
	            selectedStartDate: null,
	            //获取或设置一个值，该值表示选中的timezone，类型
	            selectedTimeZone: null,
	            //获取或设置一个值，该值表示可选的时区。默认值null，表示使用全局定义的时区集合。
	            timezones: null,
	            //获取或设置一个值，该值表示是否使用浏览器默认的时间格式。只在控件初始化时设置有效。
	            useBrowserFormat: false,
	            //获取或设置一个值，该值表示是否对选中的日期进行验证。
	            validateTime: false,
	            //获取或设置一个值，该值表示calendar的z-index。该值只在控件初始化时有效。
	            zIndex: 1,
	            //获取或设置一个方法，该方法在选择的日期变化时触发。
	            selectionChanged: $.noop,
	            //获取或设置一个方法，该方法在时区变化时触发。用户点击OK时可能发生时区变化
	            timeZoneChanged: $.noop,
	            //获取或设置一个方法，该方法在today部件点击时触发。
	            todayClick: $.noop,
	            //获取或设置一个方法，该方法在日历区域打开时触发。
	            shown: $.noop,
	            //获取或设置一个方法，该方法在日历区域关闭时触发
	            hidden: $.noop
	        },
	        _create: function () {
	            this._initMembers()
	                ._createDatePicker()
	                ._initCalendar()
	                ._loaded()
	                ._initWidget()
	                ._initEvent();
	        },
	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;

	            switch (key) {
	                case "disabled":
	                    self._setDisabled(oldValue, value);
	                    break;
	                case "selectedDate":
	                case "selectedStartDate":
	                    var i = 0;
	                    self._isChangeLock = true;
	                    if (self._setSelectedDate(oldValue, value)) { ++i }
	                    if (self._selectedHour(oldValue, value)) { ++i; }
	                    if (self._selectedMinute(oldValue, value)) { ++i }
	                    if (i > 0) {
	                        self._onSelectionChanged(oldValue, value);
	                    }
	                    self._isChangeLock = false;
	                    break;
	                case "selectedTimeZone":
	                    self._setSelectedTimeZone(value);
	                    break;
	                case "timezones":
	                    self._setTimeZones(value);
	                    self._onTimeZoneSelected(oldValue, value);
	                    break;
	                case "hasTimePicker":
	                    self._updateTimeArea(value);
	                    break;
	                default:
	                    break;
	            }
	        },
	        _selectedHour: function (old, value) {
	            var changed = false;
	            if (value) {
	                if (this._newHour != value.getHours()) {
	                    changed = true;
	                    this.$hour.combobox("selectedValue", value.getHours());
	                }
	            } else {
	                changed = true;
	                this.$hour.combobox("selectedIndex", -1);
	            }


	            return changed;
	        },
	        _selectedMinute: function (old, value) {
	            var changed = false;

	            if (value) {
	                if (this._newMinute != value.getMinutes()) {
	                    changed = true;
	                    this.$minute.combobox("selectedValue", value.getMinutes());
	                }
	            } else {
	                changed = true;
	                this.$minute.combobox("selectedIndex", -1);
	            }

	            return changed;
	        },
	        /**
	         * 设置控件的可用性
	         */
	        _setDisabled: function (old, value) {
	            var self = this;

	            if (value == true) {
	                //disabled
	                self.$content.prop("disabled", true);
	                self.element
	                    .addClass(_constant.DATE_PICKER_DISABLED)
	                    .removeAttr("tabindex");
	                self.$hour.combobox("option", 'disabled', true);
	                self.$minute.combobox("option", 'disabled', true);
	            } else {
	                //enable
	                self.$content.prop("disabled", false);
	                self.element
	                    .removeClass(_constant.DATE_PICKER_DISABLED)
	                    .attr("tabindex", 0);
	                self.$hour.combobox("option", 'disabled', false);
	                self.$minute.combobox("option", 'disabled', false);
	            }

	            if (old != value) {
	                $$.executeEventHandler(self, "isEnabledChanged", self.options.isEnabledChanged, null, $$.Event({
	                    element: self.element,
	                    oldValue: old,
	                    newValue: value
	                }));
	            }
	        },
	        _updateTimeArea: function (value) {
	            var self = this;
	            if (value) {
	                self.$hour.show();
	                self.$colon.show();
	                self.$minute.show();
	            } else {
	                self.$hour.hide();
	                self.$colon.hide();
	                self.$minute.hide();
	            }
	        },
	        //设置timezone
	        _setTimeZones: function (value) {
	            var self = this;

	            self.$timezone.combobox("itemsSource", value);
	        },
	        _initMembers: function () {
	            var
	                self = this,
	                i;
	            ++uuid;
	            self._initId();

	            self.iFormat = {
	                i: 0,
	                f: self.options.dateTimeFormat
	            };
	            this._hasTimePicker = this.options.hasTimePicker;
	            self.hour12Items = [];
	            self.hour24Items = [];
	            self._newHour = null;
	            self._newMinute = null;

	            self.timezones = [];
	            self.minuteItems = [];

	            self.$body = $("body");
	            self.element
	                .attr("unselectable", "on")
	                .addClass(_constant.DATE_PICKER);

	            for (i = 0; i < 60; i++) {
	                var name = i;
	                if (i < 10) {
	                    name = "0" + name;
	                }
	                self.minuteItems[i] = {
	                    name: name,
	                    value: i
	                }
	            }

	            self.hour12Items[0] = {
	                name: "12 " + $$.I18N.gcalendar.am,
	                value: 0
	            };

	            for (i = 1; i < 12; i++) {
	                self.hour12Items[i] = {
	                    name: i + " " + $$.I18N.gcalendar.am,
	                    value: i
	                };
	            }

	            self.hour12Items[12] = {
	                name: "12 " + $$.I18N.gcalendar.pm,
	                value: 12
	            };

	            for (i = 13; i < 24; i++) {
	                self.hour12Items[i] = {
	                    name: (i - 12) + " " + $$.I18N.gcalendar.pm,
	                    value: i
	                };
	            }

	            for (i = 0; i < 24; i++) {
	                self.hour24Items[i] = {
	                    name: i,
	                    value: i
	                };
	            }

	            self.timezones = self.options.timezones || $$.I18N.timezones;

	            return self;
	        },
	        //初始化Id
	        _initId: function () {
	            var self = this;
	            self.popupId += uuid;
	            self.calenarId += uuid;
	            self.gCalendarId += uuid;
	            self.contentId += uuid;
	            self.todayId += uuid;
	            self.hourId += uuid;
	            self.colonId += uuid;
	            self.minuteId += uuid;
	            self.timezoneContainerId += uuid;
	            self.timezoneId += uuid;
	            self.savingTimeId += uuid;
	            self.okId += uuid;
	            self.cancelId += uuid;
	            self.validationId += uuid;
	        },
	        //创建datepicker
	        _createDatePicker: function () {
	            var
	                self = this,
	                h = -1,
	                html = [];

	            html[++h] = '<input id="' + self.contentId + '" class="' + _constant.CONTENT_CLASS + '" readonly="true" role="combobox" aria-expanded="false" aria-disabled="false" aria-readonly="true" />';
	            html[++h] = '<div class="' + _constant.ICON_CLASS + '"><div class="' + _constant.ICON_FONT_CLASS + '"></div></div>';

	            self.element.html(html.join(''));
	            return self;
	        },
	        //初始化gcalendar
	        _initCalendar: function () {
	            var self = this;
	            self.$body.append(self._createPopup());

	            this.element
	                .addClass(_constant.INLINE_BLOCK_CLASS)
	                .wrap('<div class="' + _constant.DATE_PICKER_WRAP + '"></div>');
	            this.$container = this.element.parent();
	            if (this._hasTimePicker) {
	                this.$container.append(this._createTimePicker());
	            }
	            self.$popup = $("#" + self.popupId).css("z-index", self.options.zIndex);
	            self.$calendar = $("#" + self.calenarId).css("z-index", self.options.zIndex);
	            self.$gcalendar = $("#" + self.gCalendarId)
	                .gcalendar({
	                    selectionChanged: self._onCalendarSelectionChanged,
	                    enterDown: self._onMonthViewEnterDown,
	                    parameters: {
	                        selectionChanged: self,
	                        enterDown: self
	                    }
	                });

	            return self;
	        },
	        _createPopup: function () {
	            var
	                self = this,
	                h = -1,
	                html = [];

	            html[++h] = '<div class="' + _constant.POPUP_CLASS + '" id="' + self.popupId + '" style="display:none;"></div>';
	            //calendar
	            html[++h] = '<div class="' + _constant.CALENDAR_CLASS + '" id="' + self.calenarId + '">';
	            html[++h] = '<div id="' + self.gCalendarId + '"></div>';
	            html[++h] = '<div class="' + _constant.TODAY_CONTAINER_CLASS + '"><input id="' + self.todayId + '" class="' + _constant.TODAY_CLASS + '" type="button" value="' + $$.I18N.datepicker.today + '"></div>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        /**
	         * 更新popup部件的位置
	         * @param {number} index 选中项的序号
	         */
	        _updatePopupPosition: function () {
	            var
	                self = this,
	                my = "left top+";

	            if (self.isShow) {
	                self.$popup.show();
	                self.$calendar
	                    .attr("aria-hidden", false)
	                    .show();
	                self.$savingTime.checkbox("refresh");
	            }

	            my = my + self.element.height();
	            self.$calendar.position({
	                my: my,
	                at: "left top+2",
	                of: self.element,
	                collision: "flipfit flipfit",
	                within: self.options.within
	            });

	            return self;
	        },
	        _createTimePicker: function () {
	            var
					h = -1,
					html = [];

	            html[++h] = '<div id="' + this.hourId + '" class="' + _constant.INLINE_BLOCK_CLASS + '"></div>';
	            html[++h] = '<div id="' + self.colonId + '" class="' + _constant.INLINE_BLOCK_CLASS + '" style="height:38px;line-height:38px;">:</div>';
	            html[++h] = '<div id="' + this.minuteId + '" class="' + _constant.INLINE_BLOCK_CLASS + '"></div>';

	            return html.join('');

	        },
	        //创建time部件
	        _createTime: function () {
	            var
	                self = this,
	                h = -1,
	                i = 0,
	                j = 1,
	                html = [];
	            html[++h] = '<div style="margin-left:5px;margin-right:5px;">';
	            html[++h] = '<table class="' + _constant.EXTEND_CLASS + '" cellspacing="0" cellpadding="0">';
	            html[++h] = '<colgroup><col style="width:71px"><col style="width:7px;"><col><col></colgroup>';
	            html[++h] = '<tbody>';
	            html[++h] = '<tr>';
	            html[++h] = '<td><div id="' + self.hourId + '"></div></td>';
	            html[++h] = '<td><span id="' + self.colonId + '">:</span></td>';
	            html[++h] = '<td><div class="' + _constant.MINUTE_CLASS + '" id="' + self.minuteId + '"></div></td>';
	            html[++h] = '<td style="text-align:right;"></td>';
	            html[++h] = '</tr>';
	            html[++h] = '</tbody>';

	            html[++h] = '</table>';
	            //validation
	            html[++h] = '<div id="' + self.validationId + '" class="' + _constant.VALIDATION_CLASS + '">' + $$.I18N.datepicker.earlierTime + '</div>'
	            //time zone
	            html[++h] = '<div id="' + self.timezoneContainerId + '">';
	            html[++h] = '<div class="' + _constant.TIMEZONE_HEADER_CLASS + '">' + $$.I18N.datepicker.timeZone + '</div>';
	            html[++h] = '<div id="' + self.timezoneId + '"></div>';
	            html[++h] = '<div id=' + self.savingTimeId + ' type="checkbox">' + $$.I18N.datepicker.savingTime + '</div>';
	            html[++h] = '</div>';

	            html[++h] = '</div>';

	            return html.join('');
	        },
	        _loaded: function () {
	            var
	                self = this,
	                calendar = self.$calendar;

	            self.$window = $(window);

	            self.$content = self.element.find("#" + self.contentId)
	                .attr("aria-owns", self.calenarId);

	            self.$today = calendar.find("#" + self.todayId);

	            self.$hour = this.$container.children("#" + self.hourId);
	            //废弃
	            self.$colon = calendar.find("#" + self.colonId);
	            self.$minute = this.$container.children("#" + self.minuteId);

	            self.$validation = calendar.find("#" + self.validationId);

	            self.$timezoneContainer = calendar.find("#" + self.timezoneContainerId);
	            self.$timezone = calendar.find("#" + self.timezoneId);
	            self.$savingTime = calendar.find("#" + self.savingTimeId);

	            self.$left = calendar.find("#" + self.$gcalendar.gcalendar("getId", "left"));

	            self.$yearItem = self.$gcalendar.gcalendar("getViewItem").yearItem;
	            self.$monthItem = self.$gcalendar.gcalendar("getViewItem").monthItem;
	            self.$decadeItem = self.$gcalendar.gcalendar("getViewItem").decadeItem;

	            if (self.options.selectedDate) {
	                self.options.selectedStartDate = self.options.selectedDate;
	                self._setSelectedDate(null, self.options.selectedDate);
	            } else if (self.options.selectedStartDate) {
	                self.options.selectedDate = self.options.selectedStartDate;
	                self._setSelectedDate(null, self.options.selectedDate);
	            }

	            if (!self.options.hasCalendar) {
	                this.element.hide();
	            }

	            self._updateTimeArea(self.options.hasTimePicker);

	            return self;
	        },
	        _initEvent: function () {
	            var
	                self = this,
	                ns = self.eventNamespace;

	            self.$window.on("resize" + ns, self, self._onWindowResize)

	            self.element
	                .on("keydown" + ns, self, self._onElementKeydown)
	                .on("mousedown" + ns, self, function () {
	                    $$.closeExcept(self.element, true);
	                })
	                .on("click" + ns, self, self._onElementClick);

	            //time
	            self.$today.on("click" + ns, self, self._onTodayClick);

	            self.$calendar
	                .on("mousedown" + ns, self, function () {
	                    $$.closeExcept(self.element, true);
	                })
	                .on("mousewheel", self, function (e) {
	                    $$.closeExcept(self.element, true);
	                })
	                .on("keydown" + ns, self, self._onCalendarKeyDown);

	            self.$gcalendar.on("click" + ns, self, self._onCalendarClick)


	            self.$yearItem.on("keydown" + ns, self, self._onViewItemKeydown);
	            self.$monthItem
	                .on("click" + ns, self, self._onMonthItemClick)
	                .on("mousedown" + ns, self, self._onMonthItemDown)
	                .on("keydown" + ns, self, self._onViewItemKeydown);
	            self.$decadeItem.on("keydown" + ns, self, self._onViewItemKeydown);

	            $$.close(self.element, "datepicker", "close");

	            return self;
	        },
	        _onMonthItemDown: function (e, args) {
	            var item = $(e.target.parentNode);
	            self._isPaging = true;
	            if (!item.hasClass(_constant.MONTH_ITEM_PAST_CLASS) && !item.hasClass(_constant.MONTH_ITEM_FEATURE_CLASS)) {
	                self._isPaging = false;
	            }
	        },
	        _onMonthItemClick: function (e, args) {
	            var item = $(e.target.parentNode);
	            if (!self._isPaging) {
	                e.data._clickOk();
	            }
	        },
	        //年或月视图中的元素在键盘按下时触发
	        _onViewItemKeydown: function (e) {
	            var self = e.data;
	            if (e.shiftKey && e.which == $.ui.keyCode.TAB) {
	                e.preventDefault();
	            }
	        },
	        //窗体大小改变时触发
	        _onWindowResize: function (e) {
	            e.data._updatePopupPosition();
	        },
	        //calendar点击时触发
	        _onCalendarClick: function (e) {
	            e.stopPropagation();
	        },
	        //calendar在键盘按下时触发
	        _onCalendarKeyDown: function (e) {
	            var self = e.data;

	            switch (e.which) {
	                case $.ui.keyCode.ESCAPE:
	                    self._showOrHide();
	                    self.$content.focus();
	                    break;
	                case $.ui.keyCode.UP:
	                case $.ui.keyCode.DOWN:
	                case $.ui.keyCode.LEFT:
	                case $.ui.keyCode.RIGHT:
	                    e.preventDefault();
	                    break;
	            }
	        },
	        //element在键盘按下时触发
	        _onElementKeydown: function (e) {
	            var self = e.data;
	            if (e.which == $.ui.keyCode.ENTER) {
	                self._showOrHide();
	            }
	        },
	        //element点击时触发
	        _onElementClick: function (e) {
	            var self = e.data;
	            if (self.options.disabled != true) {
	                e.data._showOrHide();
	            }
	        },
	        //控制gcalendar的显示状态
	        _showOrHide: function () {
	            var self = this;
	            if (self.isShow) {
	                $$.closeVisibility(self.element, false);
	                self.isShow = false;
	                self.$content.attr("aria-expanded", false);
	                self.$popup.hide();
	                self.$calendar
	                    .attr("aria-hidden", true)
	                    .hide();
	                self.$content.focus();
	                self.$gcalendar.gcalendar("option", "displayMode", $$.gcalendar("view").month);

	                self._trigger("hidden", null, $$.Event({
	                    element: self.element
	                }));
	            } else {
	                self.isShow = true;
	                $$.closeVisibility(self.element, true);
	                self.$content.attr("aria-expanded", true);
	                self._updatePopupPosition()
	                    ._setSelectedDayFocus();
	                self.$gcalendar.gcalendar('option', 'selectedDate', new Date());
	                self._trigger("shown", null, $$.Event({
	                    element: self.element
	                }));
	            }
	        },
	        //
	        _setSelectedDayFocus: function () {
	            var self = this;
	            self.$gcalendar.gcalendar("getSelectedDayItem").focus();
	        },
	        //calendar展开时触发
	        _onShow: function () {
	            var self = this;

	            if (self._hasTimePicker) {
	                self._setSelectedTimeZone(self.options.selectedTimeZone);
	            }

	            return self;
	        },
	        //初始化控件
	        _initWidget: function () {
	            var
	                self = this,
	                hourItems = self.hour12Items;

	            self.$hour
	                .on("shown", self, self._onComboboxShow)
	                .on("hidden", self, self._onComboboxHidden)
	                .on("selectionChanged", self, self._onHourChanged)
	                .combobox({
	                    width: this.options.is24HourSupported ? 60 : 75,
	                    waterMark: '',
	                    dataTextField: "name",
	                    dataValueField: "value"
	                });

	            self.$minute
	                .on("selectionChanged", self, self._onMinuteChanged)
	                .combobox({
	                    width: 60,
	                    waterMark: '',
	                    dataTextField: "name",
	                    dataValueField: "value"
	                });

	            if (self.options.disabled === true) {
	                self._setDisabled(false, true);
	            }

	            if (self.options.is24HourSupported) {
	                hourItems = self.hour24Items;
	            }
	            self.$hour.combobox("itemsSource", hourItems);
	            self.$minute.combobox("itemsSource", this.minuteItems);

	            self.$timezone
	                .on("shown", self, self._onComboboxShow)
	                .on("hidden", self, self._onComboboxHidden)
	                .combobox({
	                    width: "198",
	                    dataTextField: "displayName",
	                    dataValueField: "id",
	                    selectionChanged: self._onTimeZoneChanged,
	                    parameters: {
	                        selectionChanged: self
	                    }
	                });
	            self.$timezone.combobox("itemsSource", self.timezones);

	            self.$savingTime.checkbox({
	                contentWidth: 189
	            });

	            if (self.options.hasTimeZone) {
	                self.$timezoneContainer.show();
	            } else {
	                self.$timezoneContainer.hide();
	            }

	            self._setTime(self.options.selectedDate)

	            self._onShow();

	            return self;
	        },
	        _onComboboxShow: function (e) {
	            $$.closeLock(e.data.element, true);
	        },
	        _onComboboxHidden: function (e) {
	            $$.closeLock(e.data.element, false);
	        },
	        _updateTime: function (d) {
	            var isValid = true;
	            if (this.$hour.combobox("selectedIndex") != -1 && this.$minute.combobox("selectedIndex") != -1) {
	                d.setHours(this.$hour.combobox("selectedIndex"));
	                d.setMinutes(this.$minute.combobox("selectedIndex"));
	            } else {
	                isValid = false;
	            }

	            return isValid;
	        },
	        _onTimeChanged: function (old, d) {
	            var isValid = true;

	            if (!this._isChangeLock && !isNaN(d)) {
	                isValid = this._updateTime(d);

	                if (isValid) {
	                    this.options.selectedDate = d;
	                    this._newHour = d.getHours();
	                    this._validateDate();
	                    this._onSelectionChanged(old, d);
	                }
	            }
	        },
	        //分钟部件的值，改变时触发
	        _onMinuteChanged: function (e, args) {
	            var
	                self = e.data,
	                d = new Date(Date.parse(self.options.selectedDate)),
	                old = self.options.selectedDate;

	            self._onTimeChanged(old, d);
	        },
	        //小时部件的值，改变时触发
	        _onHourChanged: function (e, args) {
	            var
	                self = e.data,
	                d = new Date(Date.parse(self.options.selectedDate)),
	                isValid = true,
	                old = self.options.selectedDate;

	            self._onTimeChanged(old, d);
	        },
	        //month View区域 enter键
	        _onMonthViewEnterDown: function (e, args) {
	            args.parameters._clickOk()
	        },
	        //calendar选择日期变化时触发
	        _onCalendarSelectionChanged: function (e, args) {
	            args.parameters._validateDate();
	        },
	        //验证日期是否小于当前日期
	        _validateDate: function () {
	            var
	                self = this,
	                selected = self.$gcalendar.gcalendar("option", "selectedDate"),
	                now = new Date();

	            selected = new Date(selected.getFullYear(), selected.getMonth(), selected.getDate(), self.$hour.combobox("selectedIndex"), self.$minute.combobox('selectedIndex'));
	            if (self.options.validateTime) {
	                if (Date.parse(selected) <= Date.parse(now)) {
	                    self.$validation.show();
	                } else {
	                    self.$validation.hide();
	                }
	            }

	            return self;
	        },
	        //timezone部件选项变化时触发
	        _onTimeZoneChanged: function (e, args) {
	            var self = args.parameters;
	            if (self.$timezone.combobox("option", "selectedItem").supportsDaylightSavingTime) {
	                self._showSavingTime();
	            } else {
	                self.$savingTime.hide();
	            }
	        },
	        //today部件点击时触发
	        _onTodayClick: function (e) {
	            var
	                self = e.data,
	                old = self.options.selectedDate,
	                d = new Date();
	            self.$gcalendar.gcalendar("option", "selectedDate", d);

	            self._trigger("todayClick", null, $$.Event({
	                element: self.element,
	                oldValue: old,
	                newValue: d
	            }));
	        },
	        //打开日期选择区域
	        open: function () {
	            var self = this;
	            if (!self.isShow) {
	                self._showOrHide();
	            }
	        },
	        close: function () {
	            var self = this;
	            if (self.isShow) {
	                self._showOrHide();
	            }
	        },
	        //销毁
	        _destroy: function () {
	            var self = this;
	            self.element.empty();
	            self.$popup.remove();
	            self.$calendar.empty().remove();

	            self._trigger("destroy", null, $$.Event({
	                element: self.element
	            }));
	        }
	    });

	    //time区域相关逻辑
	    $.extend($.aui.datepicker.prototype, {
	        /**
	         * 选中日期变化时更新time区域对应部件的值。
	         */
	        _setSelectedDate: function (old, date) {
	            var
	                self = this,
	                changed = false;
	            if (date && !isNaN(Date.parse(date))) {
	                if (!old || (old.getFullYear() != date.getFullYear()) || (old.getMonth() != date.getMonth()) || (old.getDate() != date.getDate())) {
	                    self.$content.val($$.gcalendar("formatDate", {
	                        date: date,
	                        iFormat: self.iFormat,
	                        useBrowserFormat: self.options.useBrowserFormat,
	                        hasTimePicker: self.options.hasTimePicker
	                    }));
	                    changed = true;
	                }
	            } else {
	                changed = true;
	                self.$content.val("");
	            }

	            return changed;
	        },
	        _onSelectionChanged: function (old, date) {
	            if ((Date.parse(old) != Date.parse(date))) {
	                this._trigger("selectionChanged", null, $$.Event({
	                    element: this.element,
	                    oldValue: old,
	                    newValue: date
	                }));
	            }
	        },
	        //更新时间
	        _setTime: function (date) {
	            var
	                self = this,
	                d = date || new Date();

	            self.$gcalendar.gcalendar("option", "selectedDate", date);
	            if (self.options.hasTimePicker) {
	                self.$hour.combobox("selectedValue", d.getHours());
	                self.$minute.combobox("selectedValue", d.getMinutes());
	            }

	            return self;
	        },
	        _getBrowserFormatDate: function (date) {
	            var
	                self = this,
	                value;
	            if (self.options.hasTimePicker) {
	                value = date.toLocaleString();
	            } else {
	                value = date.toLocaleDateString();
	            }

	            return value;
	        }
	    });
	    //time zone区域相关逻辑
	    $.extend($.aui.datepicker.prototype, {
	        //显示夏令时区域
	        _showSavingTime: function () {
	            var self = this;
	            self.$savingTime.show();
	            self.$savingTime.checkbox("refresh");
	            return self;
	        },
	        _setSelectedTimeZone: function (timezone) {
	            return;
	            var self = this;

	            if (self.options.hasTimeZone) {
	                if (timezone) {
	                    self.$timezone.combobox("option", "selectedItem", timezone);
	                    self.$savingTime.checkbox("option", "checked", timezone.autoAdjustClock);
	                } else {
	                    self.$timezone.combobox("option", "selectedItem", null);
	                    self.$savingTime.hide();
	                    self.$savingTime.checkbox("option", "checked", false);
	                }

	            }

	            return self;
	        }
	    });
	    //today部件相关逻辑
	    $.extend($.aui.datepicker.prototype, {

	    });
	    //button区域的相关逻辑
	    $.extend($.aui.datepicker.prototype, {
	        _clickOk: function () {
	            var
	                self = this,
	                d,
	                oldDate = new Date(Date.parse(self.options.selectedDate)),
	                isValid = true,
	                oldTimeZone = {};

	            d = self.$gcalendar.gcalendar("option", "selectedDate");

	            if (this._hasTimePicker) {
	                isValid = self._updateTime(d);
	            }
	            //及时日期无效，年月日部分也要更新
	            self.options.selectedDate = self.options.selectedStartDate = d;

	            if (self.options.hasTimeZone) {
	                $.extend(true, oldTimeZone, self.options.selectedTimeZone);

	                self.options.selectedTimeZone = self.$timezone.combobox("option", "selectedItem");
	                if (self.options.selectedTimeZone) {
	                    self.options.selectedTimeZone.autoAdjustClock = self.$savingTime.checkbox("option", "checked");
	                }
	                self._onTimeZoneSelected(oldTimeZone, self.options.selectedTimeZone);
	            }
	            self._setSelectedDate(oldDate, d);

	            if (isValid) {
	                self._onSelectionChanged(oldDate, d);
	            }

	            self._showOrHide();
	        },
	        //选中时区时事触发
	        _onTimeZoneSelected: function (old, timezone) {
	            var self = this;

	            if (!Object.equals(old, timezone)) {
	                $$.executeEventHandler(self, "timeZoneChanged", self.options.timeZoneChanged, null, $$.Event({
	                    element: self.element,
	                    oldValue: old,
	                    newValue: timezone
	                }));
	            }
	        },
	        _trigger: function (type, event, args) {
	            var self = this;
	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            if (args) {
	                args.parameters = self.options.parameters[type] || {};
	                args.type = "datepicker";
	            }
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        }
	    });
	})(jQuery, AUI);

/***/ },
/* 22 */
/***/ function(module, exports) {

	/**
	 * @author Administrator
	 */

	/**
	 * <p>将DIV元素转化为dialog控件。</p> 此控件的button区域完全自定义</p>
	 * HTML文件中的代码：
		 
		 	<div id="dialog" title="dialog" style="display: none;"> 
	            dialog
	        </div>
		 	
		 * 相关Javascript代码：
		 
		 	var a = $("#dialog").dialog({
	        buttons: {
	            "Delete all items": function () {
	               $(this).dialog("hide");
	           },
	            "Cancel": function () {
	                $(this).dialog("hide");
	            }
	            },
	           theme: {
	                  "Delete all items": "red"
	             }
	        });

		 * 可以使用show，hide方法控制dialog的显示和隐藏：

	         $('#dialog').dialog("show");
	         $('#dialog').dialog("hide");


	 * @class dialog
	 * @constructor
	 * @author Bing.Han
	 * @requires <a href="button.html">aui.button.js</a>
	 * @requires <a href="overlay.html">aui.overlay.js</a>
	 *
	 * @param {Object} options 控件配置信息。
	 * @param {String} options.title  获取或设置标题。
	 * @param {String} options.content  获取或设置显示消息。该值只有在控件初始化时设置有效。
	 * @param {String} options.height  获取或设置高度， 默认"auto"。该值只有在控件初始化时设置有效。
	 * @param {String} options.width   获取或设置宽度，默认400。该值只有在控件初始化时设置有效。
	 * @param {Object} options.buttons  获取设置Button显示内容。该值只有在控件初始化时设置有效。
	 * @param {Object} options.theme  获取Button样式，默认为white。该值只有在控件初始化时设置有效。
	 * @param {Number} options.zIndex  获取或设置控件z-index值，遮罩z-index比控件小1。该值只有在控件初始化时设置有效。
	 * @param {Boolean} options.resizable  获取或设置一个值，该值表示是否可以拖动边框放大，如果为true，表示可拖动边框改变大小，反之，表示不可以拖动边框改变大小。默认为false。该值只有在控件初始化时设置有效。
	 * @param {Boolean} options.draggable  获取或设置一个值，该值表示title部位按住左键是否可以拖动窗体，如果为true，表示可以拖动窗体，反之，表示不可以拖动窗体。默认为false。该值只有在控件初始化时设置有效。
	 * @param {Number} options.maxHeight  获取或设置最大化的高度，默认600。该值只有在控件初始化时设置有效。
	 * @param {Number} options.maxWidth  获取或设置最大化的宽度，默认800。该值只有在控件初始化时设置有效。
	 * @param {Boolean} options.closeOnEscape  获取或设置一个值，该值表示是否按Esc键退出，如果为true，表示按Esc键退出，反之，表示不能按Esc键退出。 默认为true。该值只有在控件初始化时设置有效。
	 * @param {Number} options.minHeight   获取或设置拖拽最小高度，默认180。该值只有在控件初始化时设置有效。
	 * @param {Number} options.minWidth  获取或设置拖拽最小宽度，默认260。该值只有在控件初始化时设置有效。
	 * @param {String} options.minimizeZoneElementId  获取或设置最小化后存放位置。该值只有在控件初始化时设置有效。
	 * @param {Object} options.captionButtons  获取或设置设置title区域是否显示最大，最小，隐藏，还原button。该值只有在控件初始化时设置有效。
	 * @param {Boolean} options.hasOverlay  获取或设置一个值，该值表示是否有遮罩，如果为true，表示有遮罩，反之，表示没有。默认为true。该值只有在控件初始化时设置有效。
	 * @param{Selector | Element | String} 获取或设置一个值，该值表示控件在拖拽或改变大小时，所受到的边界约束。默认值"document"
	 */

	(function ($) {
	    "use strict"

	    var
	        zonCSS = "aui-dialog-defaultdockingzone",
	        lastIndex = -1,
	        overlayStack = [],
	        overlayIndex = [],
	        indexAssert = function (left, right) {
	            return left > right;
	        },
	        overlayAssert = function (left, right) {
	            return left.index > right.index;
	        };
	    /**
	     * 显示遮罩
	     * @param {object} data 需要更新的overlay参数
	     */
	    function showOverlay(data) {
	        var
	            body = $("body"),
	            index = data.overlayZIndex;
	        if (overlayIndex.indexOf(index) == -1) {
	            //已经存在的不入栈
	            overlayStack.push({
	                index: index,
	                data: data
	            });
	            overlayStack.sort(overlayAssert);

	            overlayIndex.push(index);
	            overlayIndex.sort(indexAssert);

	            if (index > lastIndex) {
	                lastIndex = index;
	                body.overlay(data);
	                body.overlay("hide");
	                body.overlay("show", index);
	            }

	        }

	    }

	    function hideOverlay() {
	        var
	            body = $("body"),
	            index = overlayIndex.pop();
	        overlayStack.pop();
	        if (overlayIndex.length > 0) {
	            //以为排序过，所以显示的一定是最大的zindex
	            lastIndex = index = overlayIndex.length - 1;
	            body.overlay(overlayStack[index].data);
	            body.overlay("hide");
	            body.overlay("show", overlayIndex[index]);
	        } else {
	            lastIndex = -1;
	            body.overlay("hide");
	        }
	    }

	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.dialog = {
	            init: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).dialog(value);

	            },
	            update: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).dialog(value);
	            }
	        };
	    }


	    $.widget("aui.dialog", {
	        //获取或设置一个值
	        $window: null,
	        options: {
	            height: "auto",
	            width: 400,
	            title: "",
	            extendTitleClass: "",
	            content: "",
	            resizable: false,
	            draggable: false,
	            maxHeight: 600,
	            maxWidth: 800,
	            closeOnEscape: true,
	            containment: 'document',
	            minHeight: 180,
	            minWidth: 260,
	            minimizeZoneElementId: "",
	            buttons: {},
	            theme: {},
	            captionButtons: {},
	            overlayBackground: "#000000",
	            overlayOpacity: 0.25,
	            hasOverlay: true,
	            zIndex: "",
	            opened: $.noop,
	            closed: {},
	            hidden: $.noop
	        },
	        _create: function () {
	            this.originalTitle = this.element.attr("title");
	            if (typeof this.originalTitle !== "string") {
	                this.originalTitle = "";
	            }
	            this.$window = $(window).on("resize", this, this._resizeLayout);
	            this.oldPosition = {
	                parent: this.element.parent(),
	                index: this.element.parent().children().index(this.element)
	            };

	            this.options.title = this.options.title || this.originalTitle;
	            var that = this, options = this.options, title = options.title || "&#160;";

	            var uiDialog, uiDialogTitleTable, uiDialogTitlebar, uiDialogContent, uiDialogTitlebarClose, uiDialogTitle, uiDialogButtonPane;

	            if (options.content) {
	                this.element.html(options.content);
	            }
	            if (!options.zIndex || options.zIndex == "") {
	                var z_index = 0;
	                $("*:visible").filter(function () { return this.style.zIndex }).each(function () {
	                    if (this.style.zIndex < 200) z_index = Math.max(z_index, this.style.zIndex);
	                });
	                if (z_index == 0) z_index = 100;
	                options.zIndex = z_index;
	            }
	            uiDialog = (this.uiDialog = ((this.element.show()
	                                .removeAttr("title").wrap("<div></div>").addClass("aui-dialog-content-div")
	                                .parent().addClass("aui-dialog-content")
	                             ).wrap("<div></div>")).parent()
	                    .addClass("aui-dialog")
	                    .css({
	                        display: "none",
	                        outline: 0, // TODO: move to stylesheet
	                        zIndex: options.zIndex,
	                        width: options.width,
	                        height: options.height
	                    })
	                    .attr("tabindex", 0)
	                    .keydown(function (event) {
	                        if (options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
	                                event.keyCode === $.ui.keyCode.ESCAPE) {
	                            that.hide(event);
	                            event.preventDefault();
	                        }
	                    }));



	            uiDialogTitlebar = (this.uiDialogTitlebar = $("<tr>"))
	                .addClass("aui-dialog-titlebar")
	                .bind("mousedown", function () {
	                    uiDialog.focus();
	                });

	            uiDialogTitleTable = $('<table class="aui-dialog-title-container" style="width:100%;">').prependTo(uiDialog).append(uiDialogTitlebar);

	            uiDialogTitle = $("<div>")
	                .uniqueId()
	                .addClass("aui-dialog-title")
	                .addClass(options.extendTitleClass)
	                .html(title);
	            //.prependTo(uiDialogTitlebar);

	            uiDialogTitlebar.append($('<td>').append(uiDialogTitle));

	            uiDialogButtonPane = (this.uiDialogButtonPane = $("<div>"))
	                .addClass("aui-dialog-buttonpane");

	            (this.uiButtonSet = $("<div>"))
	                .addClass("aui-dialog-buttonset")
	                .appendTo(uiDialogButtonPane);

	            uiDialog.attr({
	                role: "dialog",
	                "aria-labelledby": uiDialogTitle.attr("id")
	            });

	            that._createCaptionButtons();

	            uiDialogTitlebar.find("*").add(uiDialogTitlebar).disableSelection();

	            if (options.draggable) {
	                that._makeDraggable();
	            } else {
	                uiDialogTitlebar.css("cursor", "auto");
	            }
	            if (options.resizable) {
	                that._makeResizable();
	            }

	            that._createButtons();

	            this._on(uiDialog, {
	                keydown: function (event) {
	                    if (!options.hasOverlay || event.keyCode !== $.ui.keyCode.TAB) {
	                        return;
	                    }

	                    var tabbables = $(":tabbable", uiDialog),
	                        first = tabbables.filter(":first"),
	                        last = tabbables.filter(":last");

	                    if (event.target === last[0] && !event.shiftKey) {
	                        first.focus(1);
	                        return false;
	                    } else if (event.target === first[0] && event.shiftKey) {
	                        last.focus(1);
	                        return false;
	                    }
	                }
	            });
	        },
	        _resizeLayout: function (e) {
	            var
	                self = e.data,
	                current = self.uiDialog;
	            current.css("top", (self.$window.height() - current.height()) / 2);
	            current.css("left", (self.$window.width() - current.width()) / 2);
	        },
	        _createButtons: function () {
	            var _self = this, options = this.options, hasButtons = false, buttons = options.buttons;

	            if (typeof buttons === "object" && buttons !== null) {
	                $.each(buttons, function () {
	                    return !(hasButtons = true);
	                });
	            }

	            if (hasButtons) {
	                $.each(buttons, function (name, props) {
	                    var button, click, theme = "white";
	                    props = $.isFunction(props) ? { click: props, text: name } : props;
	                    // Default to a non-submitting button
	                    props = $.extend({ type: "button" }, props);
	                    // Change the context for the click callback to be the main element
	                    click = props.click;
	                    props.click = function () {
	                        click.apply(_self.element[0], arguments);
	                    };
	                    button = $("<button></button>", props)
	                        .appendTo(_self.uiButtonSet);
	                    $.each(options.theme, function (x, style) {
	                        if (x == name) {
	                            theme = style;
	                            return;
	                        }
	                    });
	                    if ($(button).button) {
	                        $(button).button({
	                            disabled: false,
	                            theme: theme
	                        }).css('margin-left', '10px');
	                    }
	                });
	                this.uiDialog.addClass("aui-dialog-buttons");
	                this.uiDialogButtonPane.appendTo(this.uiDialog);
	            } else {
	                this.uiDialog.removeClass("aui-dialog-buttons");
	            }
	        },
	        _init: function () {

	        },

	        _destroy: function () {
	            var next, oldPosition = this.oldPosition;
	            if (this.overlay) {
	                $("body").overlay("hide");
	            }
	            this.uiDialog.hide();
	            this.element
	            .removeClass("aui-dialog-content")
	            .hide()
	            .appendTo("body");
	            this.uiDialog.remove();

	            if (this.originalTitle) {
	                this.element.attr("title", this.originalTitle);
	            }

	            next = oldPosition.parent.children().eq(oldPosition.index);
	            if (next.length && next[0] !== this.element[0]) {
	                next.before(this.element);
	            } else {
	                oldPosition.parent.append(this.element);
	            }
	        },

	        _makeDraggable: function () {
	            var that = this,
	                options = this.options;

	            function filteredUi(ui, dialog) {
	                return {
	                    position: ui.position,
	                    offset: ui.offset,
	                    size: {
	                        height: dialog.height(),
	                        width: dialog.width()
	                    }
	                };
	            }

	            this.uiDialog.draggable({
	                cancel: ".aui-dialog-content, .aui-dialog-titlebar-close",
	                handle: ".aui-dialog-titlebar",
	                containment: this.options.containment,
	                start: function (event, ui) {
	                    $(this)
	                        .addClass("aui-dialog-dragging");
	                    that._trigger("dragStart", event, filteredUi(ui, $(this)));
	                },
	                drag: function (event, ui) {
	                    that._trigger("drag", event, filteredUi(ui, $(this)));
	                },
	                stop: function (event, ui) {
	                    options.position = [
	                        ui.position.left - that.document.scrollLeft(),
	                        ui.position.top - that.document.scrollTop()
	                    ];
	                    $(this)
	                        .removeClass("aui-dialog-dragging");
	                    that._trigger("dragStop", event, filteredUi(ui, $(this)));
	                    //$.ui.dialog.overlay.resize();
	                }

	            });
	        },

	        _makeResizable: function (handles) {
	            handles = (handles === undefined ? this.options.resizable : handles);
	            var that = this,
	                options = this.options,
	                position = this.uiDialog.css("position"),
	                resizeHandles = typeof handles === 'string' ?
	                handles :
	                    "n,e,s,w,se,sw,ne,nw";
	            function filteredUi(ui) {
	                return {
	                    originalPosition: ui.originalPosition,
	                    originalSize: ui.originalSize,
	                    position: ui.position,
	                    size: ui.size
	                };
	            }

	            this.uiDialog.resizable({
	                cancel: ".aui-dialog-content",
	                containment: this.options.containment,
	                alsoResize: this.element,
	                maxWidth: options.maxWidth,
	                maxHeight: options.maxHeight,
	                minWidth: options.minWidth,
	                minHeight: this._minHeight(),
	                handles: resizeHandles,
	                start: function (event, ui) {
	                    $(this).addClass("aui-dialog-resizing");
	                    that._trigger("resizeStart", event, filteredUi(ui));
	                },
	                resize: function (event, ui) {
	                    that._trigger("resize", event, filteredUi(ui));
	                },
	                stop: function (event, ui) {
	                    $(this).removeClass("aui-dialog-resizing");
	                    options.height = $(this).height();
	                    options.width = $(this).width();
	                    that._trigger("resizeStop", event, filteredUi(ui));
	                }
	            })
	            .css("position", position)
	            .find(".aui-resizable-se")
	                .addClass("aui-icon aui-icon-grip-diagonal-se");
	        },
	        _minHeight: function () {
	            var options = this.options;

	            if (options.height === "auto") {
	                return options.minHeight;
	            } else {
	                return Math.min(options.minHeight, options.height);
	            }
	        },
	        _createCaptionButtons: function () {
	            var captionButtons = [], self = this, o = self.options, i,
	                buttons = {
	                    pin: {
	                        visible: false,
	                        click: self.pin,
	                        position: { left: "-48px", top: "0px" }
	                    },
	                    //refresh: {
	                    //    visible: true,
	                    //    click: function () { },
	                    //    position: { left: "-80px", top: "-126px" }
	                    //},
	                    toggle: {
	                        visible: false,
	                        click: self.toggle,
	                        position: { left: "-84px", top: "0px" }
	                    },
	                    minimize: {
	                        visible: false,
	                        click: self.minimize,
	                        position: { left: "-12px", top: "0px" }
	                    },
	                    maximize: {
	                        visible: false,
	                        click: self.maximize,
	                        position: { left: "-24px", top: "0px" }
	                    },
	                    close: {
	                        visible: true,
	                        click: self.close,
	                        position: { left: "0px", top: "0px" }
	                    }
	                },
	                oCaptionButtons = o.captionButtons, uiDialogTitlebar = self.uiDialogTitlebar;
	            $.each(buttons, function (name, value) {
	                if (oCaptionButtons && oCaptionButtons[name]) {
	                    $.extend(value, oCaptionButtons[name]);
	                }
	                captionButtons.push({ button: name, info: value });
	            });
	            for (i = 0; i < captionButtons.length; i++) {
	                self._createCaptionButton(captionButtons[i], uiDialogTitlebar);
	            }
	        },

	        _createCaptionButton: function (buttonHash, uiDialogTitlebar, notAppendToHeader) {
	            var self = this, buttonObject,
	                buttonCSS = "aui-dialog-titlebar-" + buttonHash.button,
	                button = uiDialogTitlebar.children("." + buttonCSS),
	                info = buttonHash.info;
	            if (info.visible) {
	                if (button.size() === 0) {
	                    buttonObject = $('<button></button>')
	                    .addClass(buttonCSS + " aui-dialog-captionbutton fi-close-bs")
	                    .attr("role", "button")
	                    .click(function (event) {
	                        if ($.isFunction(info.click)) {
	                            info.click.apply(self, arguments);
	                        }
	                        return false;
	                    });
	                    if (notAppendToHeader) {
	                        return buttonObject;
	                    }
	                    else {
	                        uiDialogTitlebar.append($('<td style="width:30px">').append(buttonObject));
	                    }
	                }
	                self[buttonHash.button + "Button"] = buttonObject;
	            } else {
	                button.remove();
	            }
	        },

	        pin: function () {
	            var drag = this.isPin, buttonIcon = this.pinButton.children("img");
	            if (!drag) {
	                if (buttonIcon.length) {
	                    if (!buttonIcon.hasClass("pin-s")) {
	                        buttonIcon.addClass("pin-s")
	                        var top1 = buttonIcon.hasClass("aui-dialog-buttons-hover") ? "-12px" : "0px";
	                        buttonIcon.css({ left: "-60px", top: top1 });
	                    }
	                }
	            } else {
	                buttonIcon.removeClass("pin-s");
	                var top1 = buttonIcon.hasClass("aui-dialog-buttons-hover") ? "-12px" : "0px";
	                buttonIcon.css({ left: "-48px", top: top1 });
	            }
	            this._enableDisableDragger(!drag);
	            this.isPin = !drag;
	        },
	        toggle: function () {
	            var self = this, buttonIcon = self.toggleButton.children("img");

	            if (!self.minimized) {
	                if (self.collapsed === undefined || !self.collapsed) {
	                    self.collapsed = true;
	                    if (!buttonIcon.hasClass("fi-carat-1-s")) {
	                        buttonIcon.addClass("fi-carat-1-s");
	                        var top1 = buttonIcon.hasClass("aui-dialog-buttons-hover") ? "-12px" : "0px";
	                        buttonIcon.css({ left: "-72px", top: top1 });
	                    }
	                    self._collapseDialogContent(true);
	                }
	                else {
	                    self.collapsed = false;
	                    if (buttonIcon.hasClass("fi-carat-1-s")) {
	                        buttonIcon.removeClass("fi-carat-1-s");
	                        var top1 = buttonIcon.hasClass("aui-dialog-buttons-hover") ? "-12px" : "0px";
	                        buttonIcon.css({ left: "-84px", top: top1 });
	                    }
	                    self._expandDialogContent(true);
	                }
	            }
	        },
	        minimize: function () {

	            var self = this, dlg = self.uiDialog, o = self.options, miniZone = null,
	            $from = $("<div></div>"), $to = $("<div></div>"), defaultZone, scrollTop, top,
	            originalPosition, originalSize = {}, position, size = {},
	            content = "uiDialog", originalState;

	            if (!self.minimized) {

	                originalPosition = self.uiDialog.position();
	                originalSize.width = self.uiDialog.width();
	                originalSize.height = self.uiDialog.height();
	                originalState = self.getState();
	                if (self.maximized) {
	                    self.maximized = false;
	                    self.restoreButton.remove();
	                    //fixed bug can't minimize window when it's maximized
	                    self.$window.unbind(".onWinResize");
	                }
	                else { // minimize from normal state
	                    if (self.collapsed) {
	                        self._expandDialogContent(false);
	                    }
	                    self._saveNormalState();
	                }
	                // disable resizer
	                self._enableDisableResizer(true);
	                //hide content

	                if (self.collapsed) {
	                    self._collapseDialogContent(false);
	                }

	                $from.appendTo(document.body)
	                .css({
	                    top: self.uiDialog.offset().top,
	                    left: self.uiDialog.offset().left,
	                    height: self.uiDialog.innerHeight(),
	                    width: self.uiDialog.innerWidth(),
	                    position: "absolute"
	                });

	                self.element.hide();
	                if (self.uiDialogButtonPane.length) {
	                    self.uiDialogButtonPane.hide();
	                }
	                // remove size restriction
	                dlg.height("auto");
	                dlg.width("auto");

	                self._doButtonAction(self.minimizeButton, "hide");
	                self._restoreButton(true, self.minimizeButton, "After");
	                self._doButtonAction(self.pinButton, "hide");
	                self._doButtonAction(self.refreshButton, "hide");
	                self._doButtonAction(self.toggleButton, "hide");
	                self._doButtonAction(self.maximizeButton, "show");


	                if (o.minimizeZoneElementId.length > 0) {
	                    miniZone = $("#" + o.minimizeZoneElementId);
	                }
	                if (miniZone !== null && miniZone.size() > 0) {
	                    miniZone.append(self[content]);
	                } else {
	                    defaultZone = $("." + zonCSS);
	                    if (defaultZone.size() === 0) {
	                        defaultZone = $('<div class="' + zonCSS + '"></div>');
	                        $(document.body).append(defaultZone);
	                    }
	                    defaultZone.append(self[content])
	                        .css("z-index", dlg.css("z-index"));
	                }
	                self[content].addClass("aui-dialog-docking");
	                self[content].css("float", "left");

	                $to.appendTo(document.body)
	                .css({
	                    top: self[content].offset().top,
	                    left: self[content].offset().left,
	                    height: self[content].innerHeight(),
	                    width: self[content].innerWidth(),
	                    position: "absolute"
	                });
	                self.uiDialog.hide();

	                $from.effect("transfer", {
	                    to: $to,
	                    className: "aui-widget-content"
	                }, 100, function () {
	                    $from.remove();
	                    $to.remove();
	                    self[content].show();
	                    self.minimized = true;
	                    position = self.uiDialog.position();
	                    size.width = self.uiDialog.width();
	                    size.height = self.uiDialog.height();
	                    self._enableDisableDragger(true);
	                    self._trigger('resize', null, {
	                        originalPosition: originalPosition,
	                        originalSize: originalSize,
	                        position: position,
	                        size: size
	                    });
	                    self._trigger("stateChanged", null, {
	                        originalState: originalState,
	                        state: "minimized"
	                    });
	                });
	            }
	        },
	        maximize: function () {
	            var self = this, w = self.$window, originalPosition,
	            originalSize = {}, position, size = {}, state;

	            if (!self.maximized) {
	                self._enableDisableDragger(false);
	                originalPosition = self.uiDialog.position();
	                originalSize.width = self.uiDialog.width();
	                originalSize.height = self.uiDialog.height();
	                // maximized from minimized state
	                if (self.minimized) {
	                    self.restore(); //bug in IE when minimize -> maximize -> restore
	                }
	                else {
	                    if (self.collapsed) {
	                        self._expandDialogContent(false);
	                    }
	                    self._saveNormalState();
	                    state = "normal";
	                }
	                self.maximized = true;
	                if (self.maximizeButton !== undefined) {
	                    self.maximizeButton.hide();
	                    self._restoreButton(true, self.maximizeButton, "Before");
	                }

	                self._onWinResize(self, w);
	                if (self.collapsed) {
	                    self._collapseDialogContent(false);
	                }

	                if (!self.collapsed) {
	                    self._enableDisableDragger(true);
	                }
	                self.uiDialog.resizable({ disabled: true });
	                self.uiDialog.removeClass("ui-state-disabled");
	                self.uiDialog.removeClass("aui-dialog-docking");

	                position = self.uiDialog.position();
	                size.width = self.uiDialog.width();
	                size.height = self.uiDialog.height();
	                self._trigger('resize', null, {
	                    originalPosition: originalPosition,
	                    originalSize: originalSize,
	                    position: position,
	                    size: size
	                });

	                if (state === "normal") {
	                    self._trigger("stateChanged", null, {
	                        originalState: "normal",
	                        state: "maximized"
	                    });
	                }
	            }
	        },
	        close: function () {
	            var self = this, o = self.options;
	            self.hide();

	            // 执行委托
	            $$.executeEventHandler(self, "closed", self.options.closed, null, $$.Event({
	                element: self.element
	            }));
	        },
	        restore: function () {
	            var self = this, dlg = self.uiDialog, originalPosition, originalSize = {},
	            position, size = {}, $from = $("<div></div>"), $to = $("<div></div>"),
	            content = "uiDialog", state;

	            if (self.minimized) {
	                self.minimized = false;
	                self._enableDisableDragger(false);

	                originalPosition = self[content].position();
	                originalSize.width = self[content].width();
	                originalSize.height = self[content].height();
	                $from.appendTo(document.body)
	                .css({
	                    top: self[content].offset().top,
	                    left: self[content].offset().left,
	                    height: self[content].innerHeight(),
	                    width: self[content].innerWidth(),
	                    position: "absolute"
	                });

	                //dlg.css("position", "absolute");
	                dlg.removeClass("aui-dialog-docking");
	                dlg.css("float", "");

	                self._appendToBody(dlg);

	                self._enableDisableResizer(false);
	                if (!self.isPin) {
	                    self._enableDisableDragger(false);
	                }
	                self._restoreToNormal();
	                self.element.show();
	                if (self.uiDialogButtonPane.length) {
	                    self.uiDialogButtonPane.show();
	                }
	                $to.appendTo(document.body)
	                .css({
	                    top: self.uiDialog.offset().top,
	                    left: self.uiDialog.offset().left,
	                    height: self.uiDialog.innerHeight(),
	                    width: self.uiDialog.innerWidth(),
	                    position: "absolute"
	                });

	                self.uiDialog.hide();
	                $from.effect("transfer", {
	                    to: $to,
	                    className: "aui-widget-content"
	                }, 150, function () {
	                    self.uiDialog.show();
	                    position = self.uiDialog.position();
	                    size.width = self.uiDialog.width();
	                    size.height = self.uiDialog.height();
	                    $from.remove();
	                    $to.remove();
	                    if (self.copy) {
	                        self.copy.remove();
	                    }
	                    self._trigger('resize', null, {
	                        originalPosition: originalPosition,
	                        originalSize: originalSize,
	                        position: position,
	                        size: size
	                    });

	                    state = self.getState();

	                    self._trigger("stateChanged", null, {
	                        originalState: "minimized",
	                        state: state
	                    });
	                });

	                if (self.collapsed) {
	                    self._collapseDialogContent();
	                }
	                self._doButtonAction(self.minimizeButton, "show");
	                self._doButtonAction(self.restoreButton, "remove");
	                self._doButtonAction(self.pinButton, "show");
	                self._doButtonAction(self.refreshButton, "show");
	                self._doButtonAction(self.toggleButton, "show");

	            } else if (self.maximized) {
	                self.maximized = false;
	                originalPosition = self.uiDialog.position();
	                originalSize.width = self.uiDialog.width();
	                originalSize.height = self.uiDialog.height();
	                $(window).unbind(".onWinResize");
	                if (self.collapsed) {
	                    self._expandDialogContent();
	                }
	                self._enableDisableResizer(false);
	                if (!self.isPin) {
	                    self._enableDisableDragger(false);
	                }
	                self._restoreToNormal();
	                self.element.show();
	                if (self.collapsed) {
	                    self._collapseDialogContent();
	                }
	                if (self.maximizeButton !== undefined) {
	                    self.maximizeButton.show();
	                    self._restoreButton(false, self.maximizeButton, "before");
	                }
	                position = self.uiDialog.position();
	                size.width = self.uiDialog.width();
	                size.height = self.uiDialog.height();
	                self._trigger('resize', null, {
	                    originalPosition: originalPosition,
	                    originalSize: originalSize,
	                    position: position,
	                    size: size
	                });
	                state = self.getState();

	                self._trigger("stateChanged", null, {
	                    originalState: "maximized",
	                    state: state
	                });
	            }
	        },
	        getState: function () {
	            var self = this;
	            return self.minimized ? "minimized" :
	            (self.maximized ? "maximized" : "normal");
	        },
	        _doButtonAction: function (button, action) {
	            if (button !== undefined) {
	                button[action]();
	            }
	        },
	        _expandDialogContent: function (fireEvent) {
	            var self = this, o = self.options;
	            self.uiDialog.height("auto");
	            self.element.show();
	            if (self.uiDialogButtonPane.length) {
	                self.uiDialogButtonPane.show();
	            }
	            if (o.resizable) {
	                self._enableDisableResizer(false);
	            }
	            self.uiDialog.css("height", self.toggleHeight);
	        },
	        _saveNormalState: function () {
	            var self = this, dialog = self.uiDialog, ele = self.element;
	            if (!self.maximized) {
	                self.normalWidth = dialog.css("width");
	                self.normalLeft = dialog.css("left");
	                self.normalTop = dialog.css("top");
	                self.normalHeight = dialog.css("height");

	                self.normalInnerHeight = ele.css("height");
	                self.normalInnerWidth = ele.css("width");
	                self.normalInnerMinWidth = ele.css("min-width");
	                self.normalInnerMinHeight = ele.css("min-height");
	            }
	        },
	        _onWinResize: function (self, w) {
	            self.uiDialog.css("top", w.scrollTop());
	            self.uiDialog.css("left", w.scrollLeft());
	            self.uiDialog.width(w.width());
	            self.uiDialog.height(w.height());
	            self.options.width = self.uiDialog.width();
	            self.options.height = self.uiDialog.height();
	            self._size();
	            if (self.collapsed) {//fixed bug when resize on maxmize and collapse state.
	                self.uiDialog.height("auto");
	                self.element.hide();
	            }
	        },
	        _size: function () {
	            var t, n, r, i = this.options, s = this.uiDialog.is(":visible");
	            this.element.show().css({
	                width: "auto",
	                minHeight: 0,
	                height: 0
	            }), i.minWidth > i.width && (i.width = i.minWidth), t = this.uiDialog.css({
	                height: "auto",
	                width: i.width
	            }).outerHeight(), n = Math.max(0, i.minHeight - t), i.height === "auto" ? e.support.minHeight ? this.element.css({
	                minHeight: n,
	                height: "auto"
	            }) : (this.uiDialog.show(), r = this.element.css("height", "auto").height(), s || this.uiDialog.hide(), this.element.height(Math.max(r, n))) : this.element.height(Math.max(i.height - t, 0)), this.uiDialog.is(":data(resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight())
	        },
	        _restoreButton: function (show, button, position) {
	            var self = this,
	            buttonHash = {
	                button: "restore", info: {
	                    visible: show,
	                    click: self.restore,
	                    position: { left: "-36px", top: "0px" }
	                }
	            },
	            restore = self._createCaptionButton(buttonHash, self.uiDialogTitlebar, true);
	            if (show) {
	                restore["insert" + position](button);
	                self.restoreButton = restore;
	            }
	        },
	        _appendToBody: function (dlg) {
	            this.uiDialogTitlebar.prependTo(dlg);
	            dlg.show();
	        },

	        _collapseDialogContent: function (fireEvent) {
	            var self = this, o = self.options;
	            if (o.resizable) {
	                self._enableDisableResizer(true);
	            }
	            self._toggleHeight = self.uiDialog[0].style.height;
	            self.uiDialog.height("auto");

	            self.element.hide();
	            if (self.uiDialogButtonPane.length) {
	                self.uiDialogButtonPane.hide();
	            }
	            self._enableDisableDragger(self.isPin);
	        },
	        _enableDisableResizer: function (disabled) {
	            var dlg = this.uiDialog;
	            dlg.resizable({ disabled: disabled });
	            if (disabled) {
	                dlg.removeClass("ui-state-disabled");
	            }
	        },
	        _enableDisableDragger: function (disabled) {
	            var dlg = this.uiDialog;
	            if (!this.options.draggable) {
	                return;
	            }
	            dlg.draggable({ disabled: disabled });
	            if (disabled) {
	                dlg.removeClass("ui-state-disabled");
	            }
	        },
	        _restoreToNormal: function () {
	            var self = this, dialog = self.uiDialog, ele = self.element;
	            dialog.css("width", self.normalWidth);
	            dialog.css("left", self.normalLeft);
	            dialog.css("top", self.normalTop);
	            dialog.css("height", self.normalHeight);

	            ele.css("height", self.normalInnerHeight);
	            ele.css("width", self.normalInnerWidth);
	            ele.css("min-width", self.normalInnerMinWidth);
	            ele.css("min-height", self.normalInnerMinHeight);

	            self.options.width = self.uiDialog.width();
	            self.options.height = self.uiDialog.height();
	        },
	        _setOption: function (key, value) {
	            if ("title" == key) {
	                $(".aui-dialog-title", this.uiDialogTitlebar)
	                    .html("" + (value || "&#160;"));
	            }
	        },
	        /**
	         * 显示dialog控件。
	         * @param {Number} pos_t 设置控件的向上定位距离。
	         * @param {Number} pos_l 设置控件的向左定位距离。
	         * @method show
	         * @example
	            $(element).dialog("show", 100, 100);
	         */
	        show: function (pos_t, pos_l) {
	            var self = this, win = self.$window;
	            if (arguments.length == 0) {
	                this.uiDialog.css({
	                    top: ((window.innerHeight - this.uiDialog.height()) / 2),
	                    left: ((win.width() - this.uiDialog.width()) / 2)
	                }).show();
	            } else {
	                this.uiDialog.css({
	                    top: pos_t == undefined ? ((window.innerHeight - this.uiDialog.height()) / 2) : pos_t,
	                    left: pos_l == undefined ? ((win.width() - this.uiDialog.width()) / 2) : pos_l
	                }).show();
	            }

	            if (self.options.hasOverlay) {
	                showOverlay({
	                    enabledElement: self.uiDialog,
	                    overlayBackground: self.options.overlayBackground,
	                    overlayOpacity: self.options.overlayOpacity,
	                    overlayZIndex: +self.options.zIndex - 1
	                });
	            }
	            $$.executeEventHandler(self, "opened", self.options.opened, null, $$.Event({
	                element: self.element
	            }));
	            setTimeout(function () {
	                self.uiDialog.focus(1);
	            }, 200);
	        },
	        /**
	         * 隐藏dialog控件。
	         * @method hide
	         */
	        hide: function () {
	            var self = this;
	            this.uiDialog.hide();//.css({ top: 0, left: 0 });
	            if (this.options.hasOverlay) {
	                if ($("body").data('overlay') || $("body").data('auiOverlay')) {
	                    hideOverlay();
	                }
	            }
	            // 执行委托
	            $$.executeEventHandler(self, "hidden", self.options.hidden, null, $$.Event({
	                element: self.element
	            }));
	        }
	    });
	})(jQuery);

/***/ },
/* 23 */
/***/ function(module, exports) {

	(function ($) {

	    var $doc = $(document.documentElement),
	        $window = $(window);

	    $.widget("aui.dropdown", {
	        options: {
	            dropdownClass: 'aui-dropdown',

	            of: null,
	            my: 'left top',
	            at: 'left bottom',
	            within: window,

	            autoOpening: true,

	            isLazy: false,
	            isWidthFrozen: false
	        },

	        _create: function () {
	            var self = this,
	                el = self.element;

	            if (!(this.options.of instanceof jQuery)) {
	                throw 'The "of" option can not be null.'
	            }

	            el.addClass(self.options.dropdownClass);
	            if (self.options.isLazy) {
	                self.toggle();
	            }
	            self.element.addClass('aui-dropdown')
	                .attr('role', 'alert')
	                .focusloop()
	                .off('keyup' + self.eventNamespace)
	                .on('keyup' + self.eventNamespace, el, function (e) {
	                    if (e.keyCode === af.Utils.KeyCode.ESC) {
	                        el.dropdown('close');
	                    }
	                });
	            if (self.options.of) {
	                self.accessibilityElement = self.options.of.find('[aria-expanded]');
	            }

	            $(window).off('scroll' + self.eventNamespace)
	                .on('scroll' + self.eventNamespace, self, function (e) {
	                    if (e.data.isOpening() && !(af.Utils.Device.ipad || af.Utils.Device.iphone)) e.data.close();
	                });

	            self.options.of.off('touchstart' + self.eventNamespace)
	                .on('touchstart' + self.eventNamespace, function (e) {
	                    e.stopPropagation();
	                });
	        },
	        _mousedown: function (e) {
	            var self = this,
	                $target = $(e.target);

	            if (self.element[0] == $target[0]) return;

	            if (!$.contains(self.element[0], $target[0]) && (self.options.of && !$.contains(self.options.of[0], $target[0])) && self.options.of[0] !== e.target) {
	                self.close();
	            }
	        },

	        toggle: function () {
	            var self = this,
	                el = self.element;
	            if (el.hasClass('aui-dropdown-visible')) {
	                self.close();
	            }
	            else {
	                self.open();
	            }
	        },
	        show: function () {
	            this.open();
	        },
	        open: function () {
	            var self = this,
	                el = self.element;
	            el.trigger('opening');
	            el.addClass('aui-dropdown-visible')
	                .position({
	                    of: self.options.of,
	                    my: self.options.my,
	                    at: self.options.at,
	                    collision: 'flipfit flipfit',
	                    within: self.options.within
	                });

	            if (self.options.of) {
	                el.css(self.options.isWidthFrozen ? 'width' : 'min-width', $(self.options.of).outerWidth());
	            }

	            if (self.accessibilityElement) self.accessibilityElement.attr('aria-expanded', true);

	            $doc.off("mousedown" + self.eventNamespace + ' touchstart' + self.eventNamespace)
	                .on("mousedown" + self.eventNamespace + ' touchstart' + self.eventNamespace, function (e) {
	                    self._mousedown(e);
	                });

	            $window.off("resize" + self.eventNamespace)
	                .on("resize" + self.eventNamespace, function (e) {
	                    el.position({
	                        of: self.options.of,
	                        my: self.options.my,
	                        at: self.options.at,
	                        collision: 'flipfit flipfit',
	                        within: self.options.within
	                    })
	                });

	            el.trigger('opened');
	        },
	        hide: function () {
	            this.close();
	        },
	        close: function () {
	            var self = this,
	                el = self.element;
	            el.trigger('closing');
	            el.removeClass('aui-dropdown-visible');
	            $doc.off("mousedown" + self.eventNamespace);

	            if (self.accessibilityElement) self.accessibilityElement.attr('aria-expanded', false);
	            el.trigger('closed');
	        },
	        isOpening: function () {
	            return this.element.hasClass('aui-dropdown-visible');
	        },
	        reposition: function () {
	            var self = this,
	                el = self.element;
	            el.trigger('opening');
	            el.position({
	                of: self.options.of,
	                my: self.options.my,
	                at: self.options.at,
	                collision: 'flipfit flipfit',
	                within: self.options.within
	            })
	        }
	    });
	} (jQuery));

/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * @author fqwu
	 */
	(function ($$, $) {
	    "use strict";
	    var
		//
		_window = $(window),
		//分页区域的高度
		_pagingHeight = 30,
		//常量
		_constant = {
		    DYNAMICGRID_CLASS: 'aui-dynamicgrid',
		    DYNAMICGRID_CONTAINER_CLASS: 'aui-dynamicgrid-container',
		    DYNAMICGRID_SCROLL_CONTAINER_CLASS: 'aui-dynamicgrid-scroll-container',
		    DYNAMICGRID_ITEM_CONTAINER_CLASS: 'aui-dynamicgrid-item-container',
		    DYNAMICGRID_ITEM_CLASS: 'aui-dynamicgrid-item',
		    DYNAMICGRID_PREV_CONTAINER_CLASS: 'aui-dynamicgrid-prev-container',
		    DYNAMICGRID_PREV_ARROW_CLASS: 'aui-icon-carousel-arrow-left',
		    DYNAMICGRID_NEXT_CONTAINER_CLASS: 'aui-dynamicgrid-next-container',
		    DYNAMICGRID_NEXT_ARROW_CLASS: 'aui-icon-carousel-arrow-right',
		    HIDE_CLASS: 'aui-display-none',
		    //拖拽样式
		    UI_DRAGGBLE: 'ui-draggable'
		},
	    _sortMode = {
	        //交换src和target的位置
	        exchange: 0,
	        //将src和target直接的所有tile，重新排序。
	        reorder: 1
	    };

	    /**
		 * 获取datagrid控件的常量
		 */
	    $$.dynamicgrid = function (type) {
	        var value;
	        type = type.toLowerCase();
	        switch (type) {
	            case 'tileclass':
	                value = _constant.DYNAMICGRID_ITEM_CLASS;
	                break;
	            case 'sortmode':
	                value = $.extend(true, value, _sortMode);
	                break;
	        }
	        return value;
	    };
	    /**
		* <div style="font-weight:600">表示可包含其他tile的容器。为tile提供布局，分页，拖拽等功能。</div>
		*html：

		 	<div id="test">456</div>
		    
		*js：
			
		 	//common.css提供了一套tile的公共样式，需要的请使用
		 	var template = '<div class="tile">';
		 	//headers
		 	template += '<div data-bind="{text:title}" class="title"></div>';
		 	//图标
		 	template += '<div data-bind="style:{background:background}"  class="background"></div>';
		 	//detail
		 	template += '<div class="detail"></div>';
		 	template += '</div>';

		 	$('#test').dynamicgrid({
		 		contentTemplate : template,
		 		tileWidth : 200,
		 		tileHeight : 200,
		 		extraHeight : 30,
		 		padding : 35,
		 		random : true
		 	});
		 * @class dynamicgrid
		 * @author Fengqiang.Wu
		 * @constructor
		 * @param {object} options 控件配置信息。
	     * @param {number} options.width 获取或设置控件的宽度。该值只有在控件初始化时设置有效。
	     * @param {number} options.height 获取或设置控件的高度。该值只有在控件初始化时设置有效。
		 * @param {number} options.tileWidth 获取或设置滑块的宽度。该值只有在控件初始化时设置有效。
		 * @param {number} options.tileHeight 获取或设置滑块的高度。该值只有在控件初始化时设置有效。
		 * @param {number} options.padding 获取或设置滑块的间距。该值只有在控件初始化时设置有效。
		 * @param {boolean} options.draggable  获取或设置tile是否可以进行拖拽。如果为true，表示tile可以进行拖拽，反之，则表示不可以进行拖拽。该值只有在控件初始化时设置有效。
		 * @param {string} options.contentTemplate 获取或设置滑块的内容模板。该值只有在控件初始化时设置有效。
		 * @param {number} options.extraHeight 获取或设置控件以外区域的高度。该值只有在控件初始化时设置有效。
		 * @param {boolean} options.random 获取或设置是否可以拖拽到空白区域。如果为true，表示tile可以拖拽到空白区域，反之，则表示不可以拖拽到空白区域。该值只有在控件初始化时设置有效。
		 * @param {boolean} options.hasAnimatation 获取或设置是否禁用动画。如果为true，则表示禁用动画，反之，为启用动画。该值只有在控件初始化时设置有效。
		 * @param {object} options.viewModel 获取或设置滑块的view module。该值只有在控件初始化时设置有效。
		 */
	    $.widget("aui.dynamicgrid", {
	        options: {
	            //获取或设置一个值，该值表示tile交换位置时如何排列。只在控件初始化时触发。
	            sortMode: null,
	            //获取或设置一个值，该值表示控件的宽度。
	            width: null,
	            //获取或设置一个值，该值表示控件的高度。
	            height: 'auto',
	            //设置一个值，该值表示tile的宽度。
	            tileWidth: 200,
	            //设置一个值，该值表示tile的高度。
	            tileHeight: 200,
	            //tile的间距。
	            padding: 10,
	            //设置一个值，该值表示tile是否可以进行拖拽。
	            draggable: false,
	            //设置一个值，该值表示tile的内容模板。
	            contentTemplate: '',
	            //控件以外区域的高度。
	            extraHeight: 0,
	            //设置一个值，该值表示是否可以拖拽到空白区域
	            random: false,
	            //设置一个值，该值表示是否启用动画
	            hasAnimatation: true,
	            //设置控件的水平对齐方式。
	            align: "left",
	            //设置一个方法，该方法在磁贴交互完成时触发。
	            interchanged: $.noop,
	            /**
				 * 设置一个值，该值表示滑块的view module
				 */
	            viewModel: {
	                items: ko.observableArray()
	            }
	        },
	        _convertAlign: function () {
	            var
				//
				self = this,
	            //
	            align = self.options.align.split(" ");

	            self._horizontalAlign = align[0];
	            self._verticalAlign = align[1];
	        },
	        /**
			 * 创建内部变量
			 */
	        _createMembers: function () {
	            var
				//
				self = this,
				//
				element = self.element,
	            //
	            align = self.options.align.split(" "),
				//
				padding = self.options.padding;

	            self._sortMode = _sortMode;
	            self.options.sortMode = self.options.sortMode || self._sortMode.exchange;
	            self._currentSortMode = self.options.sortMode;

	            self._viewModel = self.options.viewModel;

	            self._convertAlign();

	            self._delay = 500;
	            self._pageNo = 1;
	            self._hasAnimatation = self.options.hasAnimatation;
	            //tile是否可以进行拖拽
	            self._draggable = self.options.draggable;
	            //
	            self._random = self.options.random;
	            //模板
	            self._contentTemplate = self.options.contentTemplate;
	            //单元格的位置集合
	            self._gridPositions = [];
	            //单元格对应jQuery对象的集合
	            self._grids = [];
	            //可拖拽项的宽度
	            self._itemWidth = self.options.tileWidth;
	            //可拖拽项的高度
	            self._itemHeight = self.options.tileHeight;
	            //单元格的宽度
	            self._gridWidth = self._itemWidth + padding;
	            self.element.css('minWidth', self._gridWidth);
	            //单元格的高度
	            self._gridHeight = self._itemHeight + padding;
	            //拖拽项居中的水平补正
	            self._itemX = (self._gridWidth - self._itemWidth) / 2;
	            //拖拽项居中的水平补正
	            self._itemY = (self._gridHeight - self._itemHeight) / 2;
	            //单元格的总行数
	            self._row = Math.floor(element.height() / self._gridHeight) || 1

	            //每页显示的列数
	            self._pageColumn = Math.floor(element.width() / self._gridWidth) || 1;

	            //每页的空白区域
	            self._pageUnfilled = element.width() - self._pageColumn * self._gridWidth;

	            //单元格的总数
	            self._itemsCount = self._viewModel.items().length;
	            //总页数
	            self._pageCount = Math.ceil(self._itemsCount / (self._pageColumn * self._row));
	            //最大单元格式
	            self._max = self._pageColumn * self._row * self._pageCount;

	            //单元格的总列数
	            self._column = Math.ceil(self._max / self._row);

	            //tile对应的jQuery对象
	            self._tileItem = null;
	            self._items = [];
	            self._items.length = self._max;

	            //记录字典序位置与排列位置的映射关系，值是排列顺序
	            self._positionMapping = [];
	            //正在拖拽的元素
	            self._draggingItem = null;

	        },
	        _create: function () {
	            var
				//
				i = 0,
				//
				self = this,
				//
				element = self.element;

	            self._extraHeight = self.options.extraHeight;

	            //最外层的容器
	            self._parent = element
				//
				.wrap('<div class="' + _constant.DYNAMICGRID_CONTAINER_CLASS + '"></div>')
				//
				.parent();

	            self._container = self._parent.wrap('<div class="' + _constant.DYNAMICGRID_CLASS + '"></div>').parent();

	            element
				//
				.addClass(_constant.DYNAMICGRID_SCROLL_CONTAINER_CLASS);

	            self._container.append('<div class="' + _constant.DYNAMICGRID_PREV_CONTAINER_CLASS + '"><div class="' + _constant.DYNAMICGRID_PREV_ARROW_CLASS + '"></div></div>');

	            self._container.append('<div class="' + _constant.DYNAMICGRID_NEXT_CONTAINER_CLASS + '"><div class="' + _constant.DYNAMICGRID_NEXT_ARROW_CLASS + '"></div></div>');

	            self._createMembers();

	            //设置视区宽度(正好显示一页的宽度)
	            self._parent
				//
				.css('minHeight', self._gridHeight);

	            self._container.css('minWidth', self._gridWidth);

	            //创建tile的容器
	            element.append(self._tileContainerTemplate());
	            self._tileContainer = element.children('div[class="' + _constant.DYNAMICGRID_ITEM_CONTAINER_CLASS + '"]');

	            //设置绑定
	            ko.applyBindings(self._viewModel, element[0]);

	            self._prevArrowContainer = self
				//
				._container.find('div[class="' + _constant.DYNAMICGRID_PREV_CONTAINER_CLASS + '"]')
				//
				.addClass(_constant.HIDE_CLASS);
	            self._nextArrowContainer = self._container.find('div[class="' + _constant.DYNAMICGRID_NEXT_CONTAINER_CLASS + '"]');

	            self._initEvent();
	        },
	        _setOption: function (key, value) {
	            var self = this;
	            self.options[key] = value;
	            switch (key) {
	                case "align":
	                    self._convertAlign();
	                    self._setContainerOffset();
	                    break;
	                case "draggable":
	                    self.draggable(value);
	                    break
	            }
	        },
	        _initEvent: function () {
	            var
				//
				self = this,
				//
				method = self._method,
				//
				name = self.eventNamespace;

	            _window.on('resize' + name, self, method._onResize);

	            self._nextArrowContainer
				//
				.on('click' + name, this, method.nextArrowClick);

	            self._prevArrowContainer.on('click' + name, this, method.prevArrowClick);
	        },
	        /**
			 * 获取tile的容器模板
			 * @method _tileContainerTemplate
			 * @private
			 */
	        _tileContainerTemplate: function () {
	            var h = '';
	            h += '<div class="' + _constant.DYNAMICGRID_ITEM_CONTAINER_CLASS + '" data-bind="foreach: items">';
	            h += '<div class="' + _constant.DYNAMICGRID_ITEM_CLASS + '" data-bind="attr:{index: $index}">' + this._contentTemplate + '</div>';
	            h += '</div>'
	            return h;
	        },
	        _method: {
	            prevArrowClick: function (e) {
	                var self = e.data;
	                self._doPaging(false);
	            },
	            nextArrowClick: function (e) {
	                var self = e.data;
	                self._doPaging(true);
	            },
	            _onResize: function (e) {
	                var self = e.data;
	                self._updateItemsLayout(self._viewModel.items().length);
	            }
	        },
	        /**
			 * 清除所有添加到Dom元素上的修改。
			 * @method _destroy
			 * @private
			 */
	        _destroy: function () {
	            var
				//
				self = this,
				//
				name = self.eventNamespace;

	            _window.off(name);

	            self._viewModel.items = ko.observableArray();

	            self._tileContainer.remove();

	            self._prevArrowContainer.remove();

	            self._nextArrowContainer.remove();

	            self.element
				//
				.removeClass(_constant.DYNAMICGRID_SCROLL_CONTAINER_CLASS)
				//
				.unwrap();

	            self._parent
				//
				.removeClass()
				//
				.unwrap();

	            self._container.remove();
	        }
	    });
	    /**
		 * 布局相关逻辑
		 */
	    $.extend($.aui.dynamicgrid.prototype, {
	        /**
			 * 更新内容内容区域的布局。
			 * @method _updateItemsLayout
			 * @param {Number} count tile的数目
			 * @private
			 */
	        _updateItemsLayout: function (count) {
	            var
				//
				self = this,
				//虚拟列号
				column = -1,
				//虚拟行号
				row = -1,
				//虚拟页号
				page = -1,
				//每页的列数
				pageColumn = 1,
				//
				item = null,
				//
				i = 0;
	            self._updateLayoutMember(count);
	            pageColumn = self._pageColumn;
	            self._setContainerOffset();
	            self._tileItem = self._tileContainer.children();
	            for (; i < self._max; i++) {
	                if (i % pageColumn == 0) {
	                    row++;
	                    if (row % self._row == 0) {
	                        //进入新一页
	                        row = 0;
	                    } else {
	                        //本页row变化时循环递增column
	                        column -= pageColumn;
	                    }
	                }
	                column++;

	                //更新items列表
	                if (i < self._itemsCount) {
	                    self._items[i] = self._tileItem.filter('[index="' + i + '"]');
	                }
	                item = self._items[i];
	                //为没有初始化拖拽的tile进行初始化,优化生产效率
	                if (item != null && !item.hasClass(_constant.UI_DRAGGBLE)) {
	                    item
						    .css({
						        'width': self._itemWidth,
						        'height': self._itemHeight
						    })
	                        .draggable({
	                            containment: self._parent,
	                            zIndex: 2
	                        });

	                    if (item.touchdrag) {
	                        item.touchdrag();
	                    }

	                    item.on('dragstart', self, self._onDragStart)
	                        .on('dragstop', self, self._onDragStop)
	                        .on('start', self, self._onDragStart)
	                        .on('drag', self, self._drag)
	                        .on("stop", self, self._onDragStop);

	                    if (!self._draggable) {
	                        item.draggable('disable');
	                    }

	                }

	                self._measure(i, column, row);
	                self._arrange(i);
	            }
	        },
	        _setContainerOffset: function () {
	            var
	                self = this,
	                left = 0;
	            switch (self._horizontalAlign) {
	                case "center":
	                    left = (self._container.width() - self.element.width()) / 2;
	                    break;
	                case "right":
	                    left = self._container.width() - self.element.width();
	                    break;
	            }
	            left = left < 0 ? 0 : left;
	            self._parent.css('left', left);
	        },
	        /**
	         * 测量元素的布局信息。
	         * @method _measure
	         * @private
	         * @param {Number} index 待测量的序号
	         * @param {Number} column 带测量的列号
	         * @param {Number} row 带测量的行号
	         */
	        _measure: function (index, column, row) {
	            var
	            //
	            self = this,
	            //
	            x = column * self._gridWidth,
	            //
	            y = row * self._gridHeight;

	            self._gridPositions[index] = {
	                //grid起点的横坐标
	                x: x,
	                //grid起点的纵坐标
	                y: y

	            };

	            //记录字典序位置与排列位置的映射关系
	            self._positionMapping[index] = column + row * self._column;
	        },
	        /**
	         * 排列单元格的位置。
	         * @method _arrange
	         * @private
	         * @param {Number} index 待排列的序号
	         */
	        _arrange: function (index) {
	            var
	            //
	            self = this,
	            //
	            grid = self._grids[index],
	            //
	            item = self._items[index],
	            //
	            position = self._gridPositions[index];

	            if (item != null) {
	                item.css({
	                    left: position.x + self._itemX,
	                    top: position.y + self._itemY
	                });
	            }

	        },
	        /**
	         * 根据排列顺序的序号获取字典顺序的序号。
	         * @method _getPosition
	         * @private
	         * @param {Number} index 排列顺序的序号
	         */
	        _getPosition: function (index) {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            mapping = self._positionMapping,
	            //
	            count = mapping.length;

	            for (; i < count; i++) {
	                if (mapping[i] == index) {
	                    break;
	                }
	            }

	            return i;
	        },
	        /**
	         * 获取排列位置。
	         * @method _getArrangeIndex
	         * @private
	         *
	         */
	        _getArrangeIndex: function () {
	            var
	            //
	            self = this,
	            //
	            value = [],
	            //
	            i = 0,
	            //
	            items = self._items,
	            //
	            count = self._itemsCount;

	            for (; i < count; i++) {
	                value[i] = self._tileItem[i].getAttribute('index') - 0;
	            }

	            return value
	        }
	    });
	    /**
	     * 数据相关逻辑。
	     */
	    $.extend($.aui.dynamicgrid.prototype, {
	        /**
	         * 设置数据源
	         * @method _setItemsSource
	         * @param {Array} source 需要设置的内容集合
	         * @private
	         */
	        _setItemsSource: function (source) {
	            var
	            //
	            self = this;
	            self._viewModel.items(ko.mapping.fromJS(source)());

	            self._updateItemsLayout(source.length);

	        },
	        /**
	         * 更新与布局相关的控件成员。
	         * @method
	         * @private
	         * @param {Number} count tile的数量
	         */
	        _updateLayoutMember: function (count) {
	            var
	            //
	            self = this,
	            //一页的宽度
	            pageWidth = 0,
	            //单元格的总行数
	            row = 0,
	            //每页显示的列数
	            pageColumn = 0,
	            //
	            gridWidth = self._gridWidth,
	            //
	            pageCount = self._pageCount,
	            //
	            hideClasss = _constant.HIDE_CLASS,
	            //
	            container = self._container;

	            self._itemsCount = count;

	            if (self.options.height == 'auto') {
	                self._parent.height(_window.height() - _pagingHeight - self._extraHeight);
	            } else {
	                self._parent.height(self.options.height);
	            }
	            if (self.options.width) {
	                container.width(self.options.width);
	            }

	            row = self._row = Math.floor(container.height() / self._gridHeight);
	            pageColumn = self._pageColumn = Math.floor(container.width() / gridWidth);
	            pageWidth = gridWidth * pageColumn;

	            //将视区设置第一页
	            self._pageNo = 1;
	            self.element.scrollLeft(0);
	            self._prevArrowContainer.addClass(hideClasss);
	            pageCount = self._pageCount = Math.ceil(self._itemsCount / (pageColumn * row));
	            if (self._pageCount == 1) {
	                self._nextArrowContainer.addClass(hideClasss);
	            } else {
	                self._nextArrowContainer.removeClass(hideClasss);
	            }

	            //最大单元格式
	            self._max = pageColumn * row * pageCount;
	            //单元格的总列数
	            self._column = Math.ceil(self._max / row);

	            self._items.length = self._max;

	            self._parent.width(pageWidth);
	            //设置总宽度
	            self._tileContainer.width(pageWidth * pageCount);

	            self._pageUnfilled = self._container.width() - pageColumn * gridWidth;
	            self._nextArrowContainer.css('right', self._pageUnfilled - 40);
	            self._nextArrowContainer.css('right', -40);
	        },
	        //按照排列顺序对内容集合排序
	        _sortItems: function (src) {
	            var
	                self = this,
	                i = 0,
	                data = [],
	                tiles = self._tileItem,
	                c = tiles.length;

	            for (; i < c; i++) {
	                data[tiles[i].getAttribute('index')] = src[i];
	            }

	            return data;
	        },
	        /**
	         * 获取或设置用于生成控件的内容的集合。
	         * @method itemsSource
	         * @param {Array} source 需要设置的内容集合。
	         */
	        itemsSource: function (source) {
	            var self = this;
	            if (source == null) {
	                //获取控件的数据源
	                return self._sortItems(ko.mapping.toJS(self._viewModel.items));
	            } else {
	                self._setItemsSource(source);
	            }
	        }
	    });
	    /**
	     * 分页相关的逻辑
	     */
	    $.extend($.aui.dynamicgrid.prototype, {
	        /**
	         * 获取当前页的编号。
	         * @method pageCount
	         */
	        pageCount: function () {
	            return this._pageNo;
	        },
	        /**
	         * 启动分页定时器。
	         * @method _startTimer
	         * @private
	         * @param {Boolean} isAdd 。
	         * @param {Number} left 拖拽元素，相对于控件原点的横向位移。
	         * @param {Number} start 拖拽元素，拖拽元素，相对于控件原点，横向可移动范围的起点。
	         */
	        _startTimer: function (isAdd, left, start) {
	            var self = this;
	            self._clearTimer();
	            self._timer = setInterval(function () {
	                var
	                //
	                width = self.element.width(),
	                //拖拽项
	                item = self._draggingItem,
	                //
	                pageNo = 0,
	                //
	                amendment = 0;

	                if (self._wiiPaging) {
	                    self._doPaging(isAdd);
	                    pageNo = self._pageNo;
	                    if (item) {
	                        if (isAdd) {
	                            amendment = Math.floor(left / width) + 1;
	                            left = left + (pageNo - amendment) * width;

	                        } else {
	                            amendment = Math.floor(left / width) + 1;
	                            left = left - (amendment - pageNo) * width;

	                        }
	                        item.css('left', left);
	                    }
	                } else {
	                    self._clearTimer();
	                }
	            }, self._delay);

	        },
	        /**
	         * 关闭分页定时器。
	         * @method _clearTimer
	         * @private
	         */
	        _clearTimer: function () {
	            var
	            //
	            self = this,
	            //
	            timer = self._timer;
	            self._isRepeat = false;

	            if (timer != null) {
	                clearInterval(timer);
	            }
	        },
	        /**
	         * 分页。
	         * @method _doPaging
	         * @private
	         * @param {Boolean} isAdd 是否增加页数。
	         */
	        _doPaging: function (isAdd) {
	            var
	            //
	            self = this,
	            //
	            element = self.element,
	            //
	            pageNo = self._pageNo,
	            //总页数
	            _maxPage = self._pageCount,
	            //倒数第二页
	            penultimate = _maxPage - 1,
	            //
	            left = parseInt(element.scrollLeft()),
	            //前一页按钮的实例
	            _prevBtu = self._prevArrowContainer,
	            //后一页按钮的实例
	            _nextBtu = self._nextArrowContainer,
	            //单元格的宽度
	            pageWidth = self._pageColumn * self._gridWidth;

	            if (isAdd) {
	                if (pageNo < _maxPage) {
	                    pageNo = ++self._pageNo;
	                    element.scrollLeft(left + pageWidth);
	                    if (pageNo == 2) {
	                        _prevBtu.removeClass(_constant.HIDE_CLASS);
	                    }
	                    if (pageNo == _maxPage) {
	                        _nextBtu.addClass(_constant.HIDE_CLASS);
	                    }
	                }

	            } else {
	                if (pageNo > 1) {
	                    pageNo = --self._pageNo;
	                    element.scrollLeft(left - pageWidth);

	                    if (pageNo == penultimate) {
	                        _nextBtu.removeClass(_constant.HIDE_CLASS);
	                    }
	                    if (pageNo == 1) {
	                        _prevBtu.addClass(_constant.HIDE_CLASS);
	                    }
	                }
	            }
	        },
	    });
	    /**
	     * 拖拽相关的逻辑。
	     */
	    $.extend($.aui.dynamicgrid.prototype, {
	        /**
	         * 获取或设置一个值，该值表示是否可以进行拖拽。
	         * @method draggable
	         * @param {Boolean} value 需要设置的可见性。
	         */
	        draggable: function (value) {
	            var self = this;
	            if (value == null) {
	                return self._draggable;
	            } else {
	                self._draggable = self.options.draggable = value;
	                self._changeDraggable(value);
	            }
	        },
	        /**
	         * 改变所有tile的可拖拽性。
	         * @method _changeDraggable
	         * @private
	         */
	        _changeDraggable: function (draggable) {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            max = self._itemsCount;

	            for (; i < max; i++) {
	                if (self._items[i]) {
	                    if (draggable === true) {
	                        if (self._items[i].draggable) {
	                            self._items[i].draggable('enable');
	                        }
	                        if (self._items[i].touchdrag) {
	                            self._items[i].touchdrag('enable');
	                        }
	                    } else {
	                        if (self._items[i].draggable) {
	                            self._items[i].draggable('disable');
	                        }
	                        if (self._items[i].touchdrag) {
	                            self._items[i].touchdrag('disable');
	                        }
	                    }
	                }
	            }
	        },
	        /**
	         * 处理元素在拖拽时的翻页。
	         * @method _drag
	         * @private
	         * @param {jQuery.Event} e 事件参数
	         * @param {Object} ui 保存拖拽元素和相关位置信息的对象
	         */
	        _drag: function (e, ui) {
	            var self = e.data;

	            if (self._currentSortMode == _sortMode.exchange) {
	                self._exchangeDrag(self, ui);
	            } else {
	                self._reorderDrag(self, ui);
	            }
	        },
	        _reorderDrag: function (self, ui) {
	            if (ui) {
	                var
	                    //滚动容器的宽度(每页的实际宽度)
	                    width = self.element.width(),
	                    //拖拽元素，相对于控件原点，横向可移动范围的起点
	                    start = width * (self._pageNo - 1),
	                    //拖拽元素，相对控件原点，横向可移动范围的终点
	                    end = width * self._pageNo - self._itemWidth,
	                    //拖拽过程中，触发第一次翻页的页号
	                    amendment = 0,
	                    //拖拽元素，相对于控件原点，的横向位移
	                    left = ui.position.left;

	                //拖拽过程中，如果触发翻页时对位移进行补正
	                if (left < start) {
	                    //减一页
	                    left = ui.position.left = left + start;
	                } else if (left >= end) {
	                    //加一页
	                    amendment = Math.floor(left / width) + 1;
	                    left = ui.position.left = left - (amendment - self._pageNo) * width;
	                }
	                //如果拖拽元素移动到页的边界，进行翻页处理
	                if (self._tileLeft == left) {
	                    if (left == start) {
	                        //表示定时器是否可以进行翻页页，fasle时终止定时器
	                        self._wiiPaging = true;
	                        //减一页
	                        self._startTimer(false, left, start);
	                    } else if (left == end) {
	                        self._wiiPaging = true;
	                        //加一页
	                        self._startTimer(true, left, start);
	                    }
	                } else {
	                    self._wiiPaging = false;
	                }
	                self._tileLeft = left;
	            }
	        },
	        _exchangeDrag: function (self, ui) {
	            if (ui) {
	                var
	                    //滚动容器的宽度(每页的实际宽度)
	                    width = self.element.width(),
	                    //拖拽元素，相对于控件原点，横向可移动范围的起点
	                    start = width * (self._pageNo - 1),
	                    //拖拽元素，相对控件原点，横向可移动范围的终点
	                    end = width * self._pageNo - self._itemWidth,
	                    //拖拽过程中，触发第一次翻页的页号
	                    amendment = 0,
	                    //拖拽元素，相对于控件原点，的横向位移
	                    left = ui.position.left;

	                //拖拽过程中，如果触发翻页时对位移进行补正
	                if (left < start) {
	                    //减一页
	                    left = ui.position.left = left + start;
	                } else if (left >= end) {
	                    //加一页
	                    amendment = Math.floor(left / width) + 1;
	                    left = ui.position.left = left - (amendment - self._pageNo) * width;
	                }
	                //如果拖拽元素移动到页的边界，进行翻页处理
	                if (self._tileLeft == left) {
	                    if (left == start) {
	                        //表示定时器是否可以进行翻页页，fasle时终止定时器
	                        self._wiiPaging = true;
	                        //减一页
	                        self._startTimer(false, left, start);
	                    } else if (left == end) {
	                        self._wiiPaging = true;
	                        //加一页
	                        self._startTimer(true, left, start);
	                    }
	                } else {
	                    self._wiiPaging = false;
	                }
	                self._tileLeft = left;
	            }
	        },
	        /**
	         * 拖拽开始时触发。
	         * @method _onDragStart
	         * @private
	         * @param {jQuery.Event} e 事件参数
	         */
	        _onDragStart: function (e) {
	            var
	                self = e.data,
	                item = $(e.target);

	            if (item) {
	                item.css('zIndex', 2);
	                self._draggingItem = item;
	                self._dragIndex = item.attr('index');

	                self._updateItemsArray();
	            }
	        },

	        //拖拽开始时，更新tiles对应的数组
	        _updateItemsArray: function () {
	            var
	                self = this,
	                items = self._items,
	                //删除操作后，剩余的tiles的数目
	                i = self._itemsCount,
	                c;

	            if (items[i] !== undefined) {
	                c = items.length;
	                for (; i < c; i++) {
	                    items[i] = undefined;
	                }
	            }
	        },
	        /**
	         * 拖拽结束时触发。
	         * @method _onDragStop
	         * @private
	         * @param {jQuery.Event} e 事件参数
	         * @param {Object} ui 保存拖拽元素和相关位置信息的对象
	         */
	        _onDragStop: function (e, ui) {
	            var self = e.data;
	            if (self._currentSortMode == _sortMode.exchange) {
	                self._exchangeDragStop(e, ui);
	            } else {
	                self._reorderDragStop(e, ui);
	            }
	        },
	        /**
	         * 左移动序号在区间范围内的tile
	         */
	        _shiftLeft: function (i, c) {
	            var
	                self = this,
	                items = self._items,
	                mapping = self._gridPositions,
	                max = ++c - ++i;
	            for (; i < c; i++) {
	                self._moveToPosition(items[i], mapping[i - 1], i - 1);
	            }
	        },
	        /**
	         * 右移动序号在区间范围内的tile
	         */
	        _shiftRight: function (i, c) {
	            var
	                self = this,
	                items = self._items,
	                mapping = self._gridPositions,
	                max = --i - --c;

	            for (; i > c; i--) {
	                self._moveToPosition(items[i], mapping[i + 1], i + 1);
	            }
	        },
	        /**
	         * 将滑块移动到指定的坐标点
	         * @param {jQuery} item 常量名称。
	         * @param {object} 需要移动到的坐标
	         * @param {number} 交换后的序号
	         */
	        _moveToPosition: function (item, position, index) {
	            var self = this;
	            if (item) {
	                self.draggable(false);
	                item.animate({
	                    left: position.x + self._itemX,
	                    top: position.y + self._itemY
	                }, function () {
	                    self.draggable(true);
	                }).attr('index', index);

	                //交换tile数组中的位置
	                self._items[index] = item;
	            }
	        },
	        _reorderDragStop: function (e, ui) {
	            var
	                //
	                self = e.data,
	                //
	                source = ui.helper,
	                //
	                s_index = source.attr('index'),
	                //
	                target = null,
	                //
	                s_position = self._gridPositions[self._dragIndex],
	                //
	                t_position = null,
	                //ui.position包含滚动条的偏移
	                x = ui.position.left + source.width() / 2,
	                //
	                y = ui.position.top + source.height() / 2,
	                //拖动位置所处的列
	                column = Math.floor(x / self._gridWidth),
	                //拖动位置所处的行
	                row = Math.floor(y / self._gridHeight),
	                //拖动位置的序号
	                index = column + row * self._column;

	            //关闭分页定时器
	            self._wiiPaging = false;

	            if (self._draggingItem) {
	                self._draggingItem = null;
	            }

	            source.css('zIndex', 0);

	            //获取目标元素和对应的坐标
	            index = self._getPosition(index);
	            target = self._items[index];
	            t_position = self._gridPositions[index];

	            if (s_index < index) {
	                //区间内的tile向左移动，如果待移动的元素在左边界，移动到上一行
	                self._shiftLeft(s_index, index);
	            } else if (s_index > index) {
	                //区间内的tile向左移动，如果待移动的元素在右界，移动到下一行
	                self._shiftRight(s_index, index);
	            }

	            //t_position为null时，表示拖拽超出纵向范围。
	            if (!self._random) {
	                if (t_position == null || target == null) {
	                    index = self._tileItem.length - 1,
	                    t_position = self._gridPositions[index];
	                }
	            }

	            //交换显示位置
	            source.css({
	                left: t_position.x + self._itemX,
	                top: t_position.y + self._itemY
	            });
	            //交换数组中的位置
	            source.attr('index', index);
	            self._items[index] = source;

	            if (!self._hasAnimatation) {
	                $$.executeEventHandler(self, " interchanged", self.options.interchanged, e, $$.Event({
	                    element: self.element
	                }));
	            }
	        },
	        deleteTile: function (item) {
	            var self = this;

	            this.deleteTileByIndex(item.closest('[class~="' + _constant.DYNAMICGRID_ITEM_CLASS + '"]').attr("index"));
	        },
	        deleteTileByIndex: function (index) {
	            var
	                self = this,
	                max = self._tileItem.length - 1;
	            if ($.isNumeric(index) && index <= max) {
	                --self._itemsCount;
	                self._items[index].remove();
	                self._tileItem = self._tileContainer.children();
	                self._shiftLeft(index, max);
	            }
	        },
	        _exchangeDragStop: function (e, ui) {
	            var
	                //
	                self = e.data,
	                //
	                source = ui.helper,
	                //
	                s_index = source.attr('index'),
	                //
	                target = null,
	                //
	                s_position = self._gridPositions[self._dragIndex],
	                //
	                t_position = null,
	                //ui.position包含滚动条的偏移
	                x = ui.position.left + source.width() / 2,
	                //加上宽度高度的一半，将判断时的点从原点移动到tile的中心
	                y = ui.position.top + source.height() / 2,
	                //拖动位置所处的列
	                column = Math.floor(x / self._gridWidth),
	                //拖动位置所处的行
	                row = Math.floor(y / self._gridHeight),
	                //拖动位置的序号
	                index = column + row * self._column;
	            //关闭分页定时器
	            self._wiiPaging = false;

	            if (self._draggingItem) {
	                self._draggingItem = null;
	            }

	            source.css('zIndex', 0);
	            index = self._getPosition(index);
	            target = self._items[index];
	            t_position = self._gridPositions[index];

	            //target为null时，表示与空白位置交换
	            if (target != null && s_index != index) {
	                target.attr('index', s_index);
	                if (self._hasAnimatation) {
	                    self.draggable(false);
	                    target.animate({
	                        left: s_position.x + self._itemX,
	                        top: s_position.y + self._itemY
	                    }, function () {
	                        self.draggable(true);
	                        $$.executeEventHandler(self, " interchanged", self.options.interchanged, e, $$.Event({
	                            element: self.element
	                        }));
	                    });
	                } else {
	                    target.css({
	                        left: s_position.x + self._itemX,
	                        top: s_position.y + self._itemY
	                    });
	                }
	            }

	            //t_position为null时，表示拖拽超出纵向范围。
	            if (t_position != null && self._random || target != null) {
	                //交换数组中的位置
	                self._items[self._dragIndex] = target;
	                //交换显示位置
	                source.css({
	                    left: t_position.x + self._itemX,
	                    top: t_position.y + self._itemY
	                });

	                source.attr('index', index);
	                self._items[index] = source;
	            } else {
	                //超出位置或者禁用空白拖拽时，还原source的位置
	                source.css({
	                    left: s_position.x + self._itemX,
	                    top: s_position.y + self._itemY
	                });
	            }

	            if (!self._hasAnimatation) {
	                $$.executeEventHandler(self, " interchanged", self.options.interchanged, e, $$.Event({
	                    element: self.element
	                }));
	            }
	        }
	    });
	}(AUI, jQuery));


/***/ },
/* 25 */
/***/ function(module, exports) {

	
	(function ($$, $) {
	    "use strict";
	    var
	        uuid = -1,
	        //常量
	        _constant = {
	            //event calendar使用的样式
	            EVENT_CALENDAR_CLASS: 'aui-event-calendar',
	            //月视图使用的样式
	            MONTH_VIEW_CLASS: 'aui-ecalendar-month-view',
	            MONTH_VIEW_HEADER_CLASS: 'aui-ecalendar-month-header',
	            //月视图分页使用的样式
	            MONTH_VIEW_PAGING_CLASS: 'aui-ecalendar-month-paging',
	            MONTH_PAGING_CELL_CLASS: 'aui-ecalendar-month-paging-cell',
	            MONTH_PAGING_YEAR_CLASS: 'aui-ecalendar-month-paging-year',
	            MONTH_PAGING_ICON: 'aui-ecalendar-month-paging-icon',
	            MONTH_LEFT_CLASS: 'fi-circle-arrow-left-bs',
	            MONTH_RIGHT_CLASS: 'fi-circle-arrow-right-bs',
	            MONTH_CELL_CURRENT_CLASS: 'aui-ecalendar-month-cell-current',
	            CICLE_ICON_CLASS: 'fi-circle-b',
	            DOWN_ICON_CLASS: 'fi-arrow-down-bs',
	            UP_ICON_CLASS: 'fi-arrow-up-bs',

	            //月视图分页单元格的样式
	            MONTH_VIEW_PAGING_CELL: "aui-ecalendar-month-paging-cell",
	            //月视图标题单元格选中时的样式
	            MONTH_VIEW_PAGING_CELL_SELECTED_CLASS: "aui-ecalendar-month-paging-cell-selected",
	            //月视图标题单元格的样式
	            MONTH_VIEW_TITLE_CELL_CLASS: "aui-ecalendar-month-title-cell",
	            //月视图天单元格的样式
	            MONTH_VIEW_CELL_CLASS: "aui-ecalendar-month-cell",
	            //月视图天单元格标题的样式
	            MONTH_VIEW_CELL_TITLE_CLASS: "aui-ecalendar-month-cell-title",
	            //月视图天单元格标题x选中状态的样式
	            MONTH_VIEW_CELL_TITLE_SELECTED_CLASS: "aui-ecalendar-month-cell-title-selected",
	            //月视图日期部件使用的样式
	            MONTH_VIEW_CELL_SELECTED_CLASS: "aui-ecalendar-month-cell-selected",
	            //月视图天单元格内容的样式
	            MONTH_VIEW_CELL_CONTENT_CLASS: "aui-ecalendar-month-cell-content",
	            //show more部件的样式
	            MONTH_VIEW_CELL_CONTENT_ACTION_CLASS: "aui-ecalendar-month-cell-content-action",
	            //月视图页脚部件的样式
	            MONTH_VIEW_CELL_FOOTER_CLASS: "aui-ecalendar-month-cell-footer",
	            //月视图页脚部件选中的样式
	            MONTH_VIEW_CELL_FOOTER_SELECTED_CLASS: "aui-icon-event-calendar-selected",
	            //月视图天单元格内容标题的样式
	            MONTH_VIEW_CELL_CONTENT_TITLE_CLASS: "aui-ecalendar-month-cell-content-title",
	            //月视图Date内容部件的样式
	            MONTH_VIEW_CELL_CONTENT_TASK_CLASS: "aui-ecalendar-month-cell-content-task",
	            //月视图task部件隐藏状态下的样式
	            MONTH_VIEW_CELL_CONTENT_TASK_COLLAPSE_CLASS: "aui-ecalendar-month-cell-content-task-collapse",
	            //月视图task部件展开状态下的样式
	            MONTH_VIEW_CELL_CONTENT_TASK_SHOW_CLASS: "aui-ecalendar-month-cell-content-task-show",
	            //月份单元格模板的样式
	            MONTH_VIEW_CELL_TEMPLATE_CLASS: "aui-ecalendar-month-cell-template",
	            //月视图上个月和下个月的天单元格
	            MONTH_VIEW_FETURE_PAST_CELL_CLASS: "aui-ecalendar-month-future-past-cell",
	            //星期视图
	            WEEK_VIEW_CLASS: "aui-ecalendar-week-view",
	            //天视图
	            DAY_VIEW_CLASS: "aui-ecalendar-day-view"
	        },
	        //月份简写
	        _shortMonths = $$.I18N.gcalendar.shortMonths || ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	        _middleweeks = $$.I18N.gcalendar.middleweeks || ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	        _shortweeks = $$.I18N.gcalendar.shortweeks || ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	        //星期全称
	        _fullnameDays = $$.I18N.gcalendar.weeks || ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	        //分页方式对应的枚举
	        _pagingMode = {
	            //切换年
	            year: 0,
	            //切换月
	            month: 1,
	            //切换周
	            week: 2,
	            //切换天
	            day: 3
	        };
	    $.widget("aui.eventcalendar", {
	        mPagingLeftId: 'aui-ec-m-p-left-',
	        mPagingRightId: 'aui-ec-m-p-right-',
	        mYearId: 'aui-ec-m-year-',
	        //该集合表示月视图天部件的集合
	        _calendarDays: [],
	        //该集合表示需要生成的天的数目
	        _calendarDayCount: 42,
	        //表示当前的日期
	        _currentDay: null,
	        //获取或设置一个值，该值表示日历中上个月的天数
	        _past: 0,
	        //获取或设置一个值，该值表示日历中下个月的天数
	        _future: 0,
	        //获取或设置一个值，该值表示当前年份
	        _year: 0,
	        //获取或设置一个值，该值表示当前月份
	        _month: 0,
	        //获取或设置一个值，该值表示当前的日期
	        _day: 0,
	        //日历数据集合
	        _items: null,
	        //选中项的集合
	        _selectedItems: [],
	        options: {
	            //获取或设置一个值，该值表示task名称对应的数据属性。
	            displayName: null,
	            //获取或设置一个值，该值表示任务集合对应的属性。
	            tasksName: null,
	            //获取或设置一个值，该值表示task的模板
	            tasksTemplate: null,
	            //获取或设置一个值，该值表示
	            monthEventToolTipTemplate: null,
	            //获取或设置一个字符串，该值表示月份单元格的模板
	            monthCellTemplate: null,
	            //获取或设置一个值，该值表示task显示的最大数目
	            maxShowCount: 2,
	            viewModel: {

	            },
	            //获取或设置一个方法，该方法在选定项更改时触发。
	            paging: $.noop,
	            //获取或设置一个方法，该方法在点击月视图单元格时触发。
	            monthCellClick: $.noop,

	        },
	        _create: function () {
	            var self = this;
	            self._isCreate = true;
	            self._initMembers()
	                ._calculateCalendarDay()
	                ._createCalendar()
	                ._loaded()
	                ._updateMonthTitle()
	                ._initEvent()
	                ._applyBinding()
	                ._initData();
	        },
	        _initId: function () {
	            ++uuid;
	            this.mPagingLeftId += uuid;
	            this.mYearId += uuid;
	            this.mPagingRightId += uuid;
	        },
	        //初始化成员
	        _initMembers: function () {
	            var self = this;

	            this._initId();

	            self.element.addClass(_constant.EVENT_CALENDAR_CLASS);
	            self._currentDay = new Date();
	            if (self.options.monthCellTemplate == null || typeof self.options.monthCellTemplate != "string") {

	                self.options.monthCellTemplate = self._defaultMonthCellTemplate();
	            }
	            self.options.viewModel.weeks = ko.observableArray();
	            //如果使用viewModel直接与外部数据源管理需要将数据源变成一个[6][7]的二维数组
	            if (!ko.isObservable(self.options.viewModel.items)) {
	                self.options.viewModel.items = ko.observableArray();
	            }
	            self._items = self.options.viewModel.items;
	            self._items.subscribe(self._onItemsChanged, {
	                self: self
	            });

	            return self;
	        },
	        //创建event calendar
	        _createCalendar: function () {
	            var self = this;
	            self.element.append(self._createMonthView());
	            self.$monthHeaderCell = self.element.find('.' + _constant.MONTH_VIEW_TITLE_CELL_CLASS);

	            self._updateMonthWeeks();

	            return self;
	        },
	        //创建月视图
	        _createMonthView: function () {
	            var
	                self = this,
	                h = -1,
	                html = [];
	            html[++h] = '<div>';
	            html[++h] = self._createMonthPaging();
	            html[++h] = self._createMonth();
	            html[++h] = '</div>';

	            return html.join('');

	        },
	        //创建月份分页部件
	        _createMonthPaging: function () {
	            var
	                h = -1,
	                html = [];
	            html[++h] = '<div class="' + _constant.MONTH_VIEW_HEADER_CLASS + '">';

	            //month paging
	            html[++h] = '<div class="' + _constant.MONTH_VIEW_PAGING_CLASS + '">';
	            html[++h] = '<div id="' + this.mPagingLeftId + '" class="' + _constant.MONTH_PAGING_CELL_CLASS + ' ' + _constant.MONTH_PAGING_ICON + ' ' + _constant.MONTH_LEFT_CLASS + '"></div>';
	            html[++h] = '<div id="' + this.mYearId + '" class="' + _constant.MONTH_PAGING_CELL_CLASS + ' ' + _constant.MONTH_PAGING_YEAR_CLASS + '"></div>';
	            html[++h] = '<div id="' + this.mPagingRightId + '" class="' + _constant.MONTH_PAGING_CELL_CLASS + ' ' + _constant.MONTH_PAGING_ICON + ' ' + _constant.MONTH_RIGHT_CLASS + '"></div>';
	            html[++h] = '</div>';

	            html[++h] = '</div>';

	            return html.join('');
	        },
	        _defaultMonthCellTemplate: function () {
	            var
	                h = -1,
	                html = [];

	            html[++h] = '<div class="' + _constant.MONTH_VIEW_CELL_TEMPLATE_CLASS + '">';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        /**
	         * 获取或设置用于生成控件的内容的集合。
	         * @method itemsSource
	         * @param {array} source 需要设置的内容集合
	         * @param {boolean} clearSelectedItems 是否需要清除选中项,true表示清除
	         * @param {date} date，需要设置的日期。
	         */
	        itemsSource: function (source, clearSelectedItems, date) {
	            var self = this;

	            if (date != null) {
	                self._calculateCalendarDay(date)
	                    ._selectedMonth(self._month);
	            }

	            if (source === undefined) {
	                //获取控件的数据源
	                return ko.mapping.toJS(self._items);
	            } else {
	                self._items(ko.mapping.fromJS(source)());
	            }

	            if (clearSelectedItems === true) {
	                self._selectedItems = [];
	            }
	        },
	        //items变化时触发（删除、添加一行，清空，重新赋值）。
	        _onItemsChanged: function () {
	            this.self._initData();
	        },
	        _isCurrentDay: function (item) {
	            var
	                d = new Date(),
	                curDay = d.getDate(),
	                curMonth = d.getMonth(),
	                curYear = d.getFullYear(),
	                isCurrent = false;

	            if (curYear == item._year() && curMonth == item._month() && curDay == item._day()) {
	                isCurrent = true;
	            }

	            return isCurrent;
	        },
	        //初始绑定数据
	        _initData: function () {
	            var
	                self = this,
	                past = self._past,
	                future = self._future,
	                tasksName = self.options.tasksName,
	                max = self.options.maxShowCount,
	                index = 0,
	                i,
	                j,
	                data = {},
	                isCurrentDay = false,
	                vmTimer = null,
	                item,
	                items;
	            if (tasksName == null) {
	                tasksName = "_noTask";
	            }
	            self.options.viewModel.weeks.removeAll();

	            for (i = 0; i < 6; i++) {
	                var
	                    isFutureOrPast = 0,
	                    days = ko.observableArray();
	                for (j = 0; j < 7; j++) {
	                    var month = self._month;
	                    isCurrentDay = false;
	                    if (index < past) {
	                        isFutureOrPast = 1;
	                        month--;
	                    } else if (index > future) {
	                        isFutureOrPast = 1;
	                        month++;
	                    } else {
	                        isFutureOrPast = 0;
	                    }
	                    if (!self._items()[index]) {
	                        self._items()[index] = {};
	                        self._items()[index][tasksName] = ko.observableArray();
	                    }

	                    item = self._items()[index];

	                    item._row = ko.observable(i);
	                    item._index = ko.observable(index);
	                    item._more = ko.observable(item[tasksName]().length - max);
	                    item._isFutureOrPast = ko.observable(isFutureOrPast);
	                    item._month = ko.observable(month);
	                    item._day = ko.observable(self._calendarDays[index]);
	                    item._year = ko.observable(self._year);
	                    if (self._day == self._calendarDays[index] && month == self._month) {
	                        isCurrentDay = true;
	                    }
	                    item._isCurrentDay = ko.observable(self._isCurrentDay(item));
	                    days.push(item);
	                    index++;
	                }
	                self.options.viewModel.weeks.push({ days: days });
	            }

	            vmTimer = setInterval(function () {
	                clearInterval(vmTimer);
	                self.$monthCell = self.element
	                    .find('[class~="' + _constant.MONTH_VIEW_CELL_CLASS + '"]')
	                    .off()
	                    .on("click", self, self._onMonthCellClick);
	                self.$monthCellContent = self.$monthCell.children('[class~="' + _constant.MONTH_VIEW_CELL_CONTENT_CLASS + '"]');

	                self.$monthCellAction = self.$monthCellContent
	                    .find('div[class~="' + _constant.MONTH_VIEW_CELL_CONTENT_ACTION_CLASS + '"]')
	                    .off()
	                    .on("keydown", self, self._onMonthCellActionKeydown)
	                    .on("click", self, self._onMonthCellActionClick);

	                self.$monthCellActionContent = self.$monthCellAction.children("span:odd");
	                self.$monthCellActionSubContent = self.$monthCellAction.children("span:even");
	                self.$monthCellActionIcon = self.$monthCellAction.children("div");

	                self.$monthCellTask = self.$monthCell.find('div[class~="' + _constant.MONTH_VIEW_CELL_CONTENT_TASK_CLASS + '"]');

	                if (self._isCreate) {
	                    self._isCreate = false;
	                    self._onPaging();
	                }
	            }, 10);

	            return self;
	        },
	        _onMonthCellActionKeydown: function (e) {
	            e.stopPropagation();
	            switch (e.which) {
	                case $.ui.keyCode.ENTER:
	                    $(e.target).click();
	                    break;
	                case $.ui.keyCode.SPACE:
	                    e.preventDefault();
	                    break;
	            }
	        },
	        //月视图操作部件点击时触发
	        _onMonthCellActionClick: function (e) {
	            e.stopPropagation();
	            var
	                self = e.data,
	                mode = this.getAttribute("data-mode"),
	                current,
	                row = this.getAttribute("data-row");
	            current = self.$monthCellTask.filter('[data-row=' + row + ']');

	            if (mode == "more") {
	                current.addClass(_constant.MONTH_VIEW_CELL_CONTENT_TASK_SHOW_CLASS);
	                self.$monthCellAction.filter('[data-row=' + row + ']').attr("data-mode", "less");
	                self.$monthCellActionSubContent.filter('[data-row=' + row + ']').hide();
	                self.$monthCellActionContent.filter('[data-row=' + row + ']').text(" show less");
	                self.$monthCellActionIcon.filter('[data-row=' + row + ']')
	                    .removeClass(_constant.DOWN_ICON_CLASS)
	                    .addClass(_constant.UP_ICON_CLASS);

	                self.$monthCell.filter('[data-row=' + row + ']').height(self.$monthCell.filter('[data-row=' + row + ']').height());
	            } else {
	                current.removeClass(_constant.MONTH_VIEW_CELL_CONTENT_TASK_SHOW_CLASS);
	                self.$monthCellAction.filter('[data-row=' + row + ']').attr("data-mode", "more");
	                self.$monthCellActionSubContent.filter('[data-row=' + row + ']').show();
	                self.$monthCellActionContent.filter('[data-row=' + row + ']').text(" more");
	                self.$monthCellActionIcon.filter('[data-row=' + row + ']')
	                    .removeClass(_constant.UP_ICON_CLASS)
	                    .addClass(_constant.DOWN_ICON_CLASS);
	                self.$monthCell.filter('[data-row=' + row + ']').height("");
	            }

	        },
	        //创建month部件
	        _createMonth: function () {
	            var
	                self = this,
	                h = -1,
	                options = self.options,
	                displayName = options.displayName,
	                tasksName = options.tasksName,
	                taskTemplate = options.tasksTemplate,
	                max = self.options.maxShowCount,
	                html = [];

	            html[++h] = '<table class="' + _constant.MONTH_VIEW_CLASS + '">';
	            //创建标题（星期日~星期六）
	            html[++h] = '<thead>';
	            html[++h] = '<tr>';
	            html[++h] = '<th class="' + _constant.MONTH_VIEW_TITLE_CELL_CLASS + '" unselectable="on"></th>';
	            html[++h] = '<th class="' + _constant.MONTH_VIEW_TITLE_CELL_CLASS + '" unselectable="on"></th>';
	            html[++h] = '<th class="' + _constant.MONTH_VIEW_TITLE_CELL_CLASS + '" unselectable="on"></th>';
	            html[++h] = '<th class="' + _constant.MONTH_VIEW_TITLE_CELL_CLASS + '" unselectable="on"></th>';
	            html[++h] = '<th class="' + _constant.MONTH_VIEW_TITLE_CELL_CLASS + '" unselectable="on"></th>';
	            html[++h] = '<th class="' + _constant.MONTH_VIEW_TITLE_CELL_CLASS + '" unselectable="on"></th>';
	            html[++h] = '<th class="' + _constant.MONTH_VIEW_TITLE_CELL_CLASS + '" unselectable="on"></th>';
	            html[++h] = '</tr>';
	            html[++h] = '</thead>';

	            //创建日历部分
	            html[++h] = '<tbody data-bind="foreach:weeks">';
	            html[++h] = '<tr data-bind="foreach:days">';
	            //html[++h] = '<td>';
	            html[++h] = '<td class="' + _constant.MONTH_VIEW_CELL_CLASS + '" data-bind="attr:{index:_index,\'data-row\':_row},css:{\'' + _constant.MONTH_VIEW_FETURE_PAST_CELL_CLASS + '\': _isFutureOrPast()>0}">';
	            html[++h] = self.options.monthCellTemplate;

	            html[++h] = '<div class="' + _constant.MONTH_VIEW_CELL_CONTENT_CLASS + '" data-bind="attr:{index:_index}">';

	            //header title
	            html[++h] = '<div class="' + _constant.MONTH_VIEW_CELL_TITLE_CLASS + '">';
	            html[++h] = '<span data-bind="text:_day"></span>';

	            html[++h] = '<!-- ko if: _isCurrentDay -->';
	            html[++h] = '<div class="' + _constant.MONTH_CELL_CURRENT_CLASS + ' ' + _constant.CICLE_ICON_CLASS + '"></div>';
	            html[++h] = '<!-- /ko -->';

	            html[++h] = '</div>';

	            html[++h] = '<div class="' + _constant.MONTH_VIEW_CELL_CONTENT_TITLE_CLASS + '" ></div>';

	            if (tasksName != null && taskTemplate != null) {
	                html[++h] = '<div data-bind="foreach:' + tasksName + '">';
	                html[++h] = '<div class="' + _constant.MONTH_VIEW_CELL_CONTENT_TASK_CLASS + '" data-bind="attr:{\'data-row\':$parent._row},css:{\'' + _constant.MONTH_VIEW_CELL_CONTENT_TASK_COLLAPSE_CLASS + '\': $index()>=' + max + '}">' + taskTemplate + '</div>';
	                html[++h] = '</div>';

	                html[++h] = '<div style="position:relative;height:44px;"></div>';
	                html[++h] = '<div style="position:absolute;height:44px;bottom:0;width:100%;">';
	                html[++h] = '<div class="' + _constant.MONTH_VIEW_CELL_CONTENT_ACTION_CLASS + '" tabindex="0" data-bind="visible:(' + tasksName + '().length >' + max + '),attr:{\'data-row\':_row}" data-mode="more">';
	                html[++h] = '<span data-bind="text:_more,attr:{\'data-row\':_row}"></span>';
	                html[++h] = '<span data-bind="attr:{\'data-row\':_row}"> more</span>';
	                html[++h] = '<div data-bind="attr:{\'data-row\':_row}" class="' + _constant.DOWN_ICON_CLASS + '"></div>';
	                html[++h] = '</div>';
	                html[++h] = '</div>';

	                html[++h] = '<div class="' + _constant.MONTH_VIEW_CELL_FOOTER_CLASS + ' ' + _constant.MONTH_VIEW_CELL_FOOTER_SELECTED_CLASS + '"></div>'
	            }

	            html[++h] = '</div>';

	            html[++h] = '</td>';
	            html[++h] = '</tr>';
	            html[++h] = '</tbody>';
	            html[++h] = '</table>';

	            return html.join('');
	        },
	        setDate: function (date) {
	            var self = this;
	            self._calculateCalendarDay(date)
	                ._selectedMonth(self._month)
	                ._initData();
	        },
	        _updateMonthTitle: function () {
	            this.$mYear.text(_shortMonths[this._month] + ' ' + this._year);

	            return this;
	        },
	        /**
	         * 根据日期生成日历。
	         * @private
	         * @param {Date} today 当前日期。
	         */
	        _calculateCalendarDay: function (today) {
	            var
	            //
	            self = this,
	            //
	            current = null,
	            //
	            today = today || new Date(),
	            //
	            year = today.getFullYear(),
	            //
	            day = today.getDay(),
	            //
	            date = today.getDate(),
	            //当前月份的序号
	            month = today.getMonth(),
	            //
	            offset = date % 7,
	            //1号的星期几,0表示周日
	            firstDay = day - offset + 1,
	            //上一月的最大天数
	            prevMax = 0,
	            //本月的最大天数
	            max = 0,
	            //日历中"下个月的部分"的最大序号
	            nextMax = 0,
	            //
	            i = 0;
	            current = new Date(year, month, date);
	            self._month = month;
	            self._year = year;
	            self._day = date;
	            if (firstDay <= 0) {
	                firstDay += 7;
	            }
	            self._past = firstDay;
	            //1号的前一天，就是上个月的最后一天，就是上月的最大天数
	            current.setDate(0);
	            //重置year，防止前一天跨年的影响
	            // current.setYear(year);
	            prevMax = current.getDate();
	            //将时间还原会本月
	            current.setDate(1);

	            current.setMonth(month + 1);
	            current.setDate(0);
	            max = current.getDate();
	            self._future = firstDay + max - 1;
	            //生成上一个月的天
	            for (i = firstDay - 1; i >= 0; i--) {
	                self._calendarDays[i] = prevMax;
	                prevMax--;
	            }
	            //生成本月的天
	            for (i = 0; i <= max; i++) {
	                self._calendarDays[i + firstDay] = i + 1;
	            }
	            nextMax = self._calendarDayCount - max - firstDay;
	            //生成本月的天
	            for (i = 0; i < nextMax; i++) {
	                self._calendarDays[i + firstDay + max] = i + 1;
	            }

	            return self;
	        },
	        //选中月份
	        _selectedMonth: function (month) {
	            var self = this;

	            return self;
	        },
	        //创建星期视图
	        _createWeekView: function () {

	        },
	        _createDayView: function () { },
	        //部件创建成功后触发
	        _loaded: function () {
	            var self = this;

	            self.$mLastMonth = self.element.find('#' + this.mPagingLeftId);
	            self.$mNextMonth = self.element.find('#' + this.mPagingRightId);
	            self.$mYear = self.element.find('#' + this.mYearId);

	            return self;
	        },
	        //注册事件
	        _initEvent: function () {
	            var ns = this.eventNamespace;

	            $(window).on("resize" + ns, this, this._onWindowResize);
	            this.$mLastMonth.on("click" + ns, this, this._onPreMonthClick);
	            this.$mNextMonth.on("click" + ns, this, this._onNextMonthClick);

	            return this;
	        },
	        //设置绑定
	        _applyBinding: function () {
	            var self = this;
	            ko.applyBindings(self.options.viewModel, self.element[0]);
	            return self;
	        },
	        _onWindowResize: function (e) {
	            e.data._updateMonthWeeks();
	        },
	        _updateMonthWeeks: function () {
	            var
	                i = 0,
	                days = _fullnameDays,
	                width = this.$monthHeaderCell.width();

	            if (width <= 80 && width > 40) {
	                days = _middleweeks;
	            } else if (width <= 40) {
	                days = _shortweeks;
	            }
	            for (; i < 7; i++) {
	                $(this.$monthHeaderCell[i]).text(days[i]);
	            }
	        },
	        _onPreMonthClick: function (e) {
	            var
	                self = e.data,
	                today = new Date(),
	                year = self._year,
	                month = self._month - 1;
	            today.setFullYear(year);
	            today.setDate(1);
	            today.setMonth(month);
	            self._calculateCalendarDay(today)
	                ._updateMonthTitle();
	            self._items.removeAll();

	            self._onPaging();

	        },
	        _onNextMonthClick: function (e) {
	            var
	                self = e.data,
	                today = new Date(),
	                year = self._year,
	                month = self._month + 1;
	            today.setFullYear(year);
	            today.setDate(1);
	            today.setMonth(month);
	            self._calculateCalendarDay(today)
	                ._updateMonthTitle();
	            self._items.removeAll();

	            self._onPaging();
	        },
	        _onPaging: function () {
	            this._trigger("paging", null, $$.Event({
	                element: this.element,
	                newValue: {
	                    start: new Date(this._year, this._month - 1, this._calendarDays[0]),
	                    end: new Date(this._year, this._month + 1, this._calendarDays[41]),
	                    month: this._month
	                }
	            }));
	        },
	        //月份单元格点击时触发
	        _onMonthCellClick: function (e) {
	            var
	                self = e.data,
	                data,
	                //当前点击的对象
	                current,
	                selectedIndex = -1,
	                index = this.getAttribute("index") - 0;

	            //单选时清空
	            if (!e.ctrlKey) {
	                self.$monthCellContent.removeClass(_constant.MONTH_VIEW_CELL_SELECTED_CLASS);
	                self._selectedItems.splice(0, self._selectedItems.length);
	            }
	            data = self._items()[index];
	            current = self.$monthCellContent.filter('[index=' + index + ']');
	            if (current.hasClass(_constant.MONTH_VIEW_CELL_SELECTED_CLASS)) {
	                selectedIndex = current.attr("data-selected-index") - 0;
	                if (selectedIndex > -1) {
	                    delete self._selectedItems[selectedIndex];
	                }

	                current
	                    .removeAttr("data-selected-index")
	                    .removeClass(_constant.MONTH_VIEW_CELL_SELECTED_CLASS);
	            } else {
	                //add
	                self._selectedItems.push({
	                    date: new Date(data._year(), data._month(), data._day()),
	                    item: data
	                });
	                current
	                    .attr("data-selected-index", self._selectedItems.length - 1)
	                    .addClass(_constant.MONTH_VIEW_CELL_SELECTED_CLASS);
	            }
	            self._trigger("monthCellClick", null, $$.Event({
	                element: self.element,
	                newValue: ko.mapping.toJS(self._selectedItems)
	            }));
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            if (args) {
	                args.type = "eventcalendar";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        //销毁
	        _destroy: function () {
	            this._trigger("destroy", null, $$.Event({
	                element: this.element
	            }));
	        },
	        getSelectedItems: function () {
	            return this._selectedItems;
	        },
	        //获取月视图的起止时间段
	        getDateRange: function () {
	            var self = this;
	            return {
	                start: new Date(self._year, self._month - 1, self._calendarDays[0]),
	                end: new Date(self._year, self._month + 1, self._calendarDays[41]),
	                month: self._month
	            }
	        }
	    });
	})(AUI, jQuery);


	//week view相关逻辑
	$.extend($.aui.eventcalendar.prototype, {});

	//day view相关逻辑
	$.extend($.aui.eventcalendar.prototype, {});


/***/ },
/* 26 */
/***/ function(module, exports) {

	(function ($) {
	    

	    window.af.Floaters = window.af.Floaters || {};
	    window.af.Floaters.CONSTENTS = {
	        FLOATER: 'aui-floater'
	    };

	    $.widget('aui.floater', {
	        options: {
	            
	        },

	        _create: function () {
	            var _self = this,
	                _el = _self.element,
	                _offsetTop = _el.offset().top,
	                _width = _el.width();

	            _el.width(_width);
	            var _doc = $(document).on('scroll', function (e) {
	                var top = _doc.scrollTop();
	                if (top >= _offsetTop) {
	                    _el.addClass('aui-floater-fixed');
	                }
	                else {
	                    _el.removeClass('aui-floater-fixed');
	                }
	            });
	        }
	    });
	}(jQuery));

/***/ },
/* 27 */
/***/ function(module, exports) {

	//@author fqwu
	(function ($$, $) {
	    "use strict";
	    if (ko && ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.gcalendar = {
	            update: function (element, valueAccessor, allBindingsAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).gcalendar(value);
	            }
	        };
	    }

	    var
	        uuid = -1,
	        //月份简写（大写） 
	        _shortCapitalMonths = $$.I18N.gcalendar.shortCapitalMonths || ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],
	        //月份全称
	        _months = $$.I18N.gcalendar.months || ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	        //月份简写
	        _shortMonths = $$.I18N.gcalendar.shortMonths || ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	        //星期简写
	        _shortweeks = $$.I18N.gcalendar.shortweeks || ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	        //日历模式
	        _view = {
	            month: 0,
	            year: 1,
	            decade: 2
	        },
	        //星期几对应的常量
	        _dayOfWeek = {
	            //星期日
	            Sunday: 0,
	            //星期一
	            Monday: 1,
	            //星期二
	            Tuesday: 2,
	            //星期三
	            Wednesday: 3,
	            //星期四
	            Thursday: 4,
	            //星期五
	            Friday: 5,
	            //星期六
	            Saturday: 6
	        },
	        //常量
	        _constant = {
	            CALENDAR_CLASS: "aui-gcalendar",
	            //header部件使用的样式
	            HEADER_CLASS: "aui-gcalendar-header",
	            //title部件使用的样式
	            TITLE_CLASS: "aui-gcalendar-title",
	            //左箭头部件使用的样式
	            LEFT_ARROW_CLASS: "aui-gcalendar-left",
	            //左箭头图标
	            LEFT_ARROW_ICON_CLASS: "fi-triangle-left-bs",
	            //右箭头部件使用的样式
	            RIGHT_ARROW_CLASS: "aui-gcalendar-right",
	            //右箭头图标
	            RIGHT_ARROW_ICON_CLASS: "fi-triangle-right-bs",
	            //年视图使用的样式
	            YEAR_VIEW_CLASS: "aui-gcalendar-year-view",
	            //十年视图使用的样式
	            DECADE_VIEW_CLASS: "aui-gcalendar-decade-view",
	            //十年视图日历部分的样式
	            DECADE_VIEW_CONTENT_CLASS: "aui-gcalendar-decade-view-content",
	            //十年视图中年部件使用的样式
	            DECADE_ITEM_CLASS: "aui-gcalendar-decade-item",
	            //年视图日历部分的样式
	            YEAR_VIEW_CONTENT_CLASS: "aui-gcalendar-year-view-content",
	            //年视图中月份部件使用的样式
	            YEAR_ITEM_CLASS: "aui-gcalendar-year-item",
	            //年视图中当前月使用的样式
	            YEAR_SELECTED_CLASS: "aui-gcalendar-year-selected",
	            //视图容器使用的样式
	            VIEW_CONTAINER: "aui-gcalendar-view-container",
	            //月视图使用的样式
	            MONTH_VIEW_TABLE_CLASS: "aui-gcalendar-month-table",
	            //月视图标题区域的样式
	            MONTH_VIEW_HEADER_CLASS: "aui-gcalendar-month-header",
	            //月视图中星期部件使用的样式
	            MONTH_HEADER_ITEM_CLASS: "aui-gcalendar-month-header-item",
	            //月视图日历部分的样式
	            MONTH_VIEW_CONTENT_CLASS: "aui-gcalendar-month-content",
	            //月视图中天部件使用的样式
	            MONTH_ITEM_CLASS: "aui-gcalendar-month-item",
	            MONTH_ITEM_TEXT_CLASS: "aui-gcalendar-month-item-text",
	            MONTH_ITEM_CIRCLE_CLASS: "aui-gcalendar-month-item-circle",
	            //月视图中上个月的样式
	            MONTH_ITEM_PAST_CLASS: "aui-gcalendar-past-item",
	            //月视图中下个月的样式
	            MONTH_ITEM_FEATURE_CLASS: "aui-gcalendar-month-feature-item",
	            //月视图当前天对应的样式
	            MONTH_ITEM_CURRENT_CLASS: "aui-gcalendar-month-current-item",
	            //月视图天部件的选中样式
	            MONTH_ITEM_SELECTED_CLASS: "aui-gcalendar-month-selected-item"
	        };

	    /**
	     * 获取datagrid控件的常量。
	     * @method $$.datagrid
	     * @param {String} type 常量名称。
	     */
	    $$.gcalendar = function (type, param) {
	        var value = null;
	        type = type.toLowerCase();
	        switch (type) {
	            case "dayofweek":
	                value = $.extend(value, _dayOfWeek);
	                break;
	            case "view":
	                value = $.extend(value, _view);
	                break;
	            case "constant":
	                value = $.extend(value, _constant);
	                break;
	            case "formatdate":
	                value = formatDate(param);
	                break;
	            case "toformatstring":
	                value = toFormatString(param);
	                break;
	            default:
	                value = {};
	                break;
	        }

	        return value;
	    };

	    //Check whether a format character is doubled
	    function lookAhead(param) {
	        var
	            match = param.match,
	            format = param.iFormat.f,
	            i = param.iFormat.i,
	            matches = (i + 1 < format.length && format.charAt(i + 1) == match);

	        if (matches) {
	            param.iFormat.i++;
	        }
	        return matches;
	    }

	    //Format a number, with leading zero if necessary
	    function formatNumber(param) {
	        var
	            match = param.match,
	            value = param.value,
	            len = param.len,
	            num = '' + value;
	        if (lookAhead({ match: match, iFormat: param.iFormat }))
	            while (num.length < len)
	                num = '0' + num;
	        return num;
	    }

	    //按照特定格式转换时间
	    function formatDate(param) {
	        var
	            date = param.date,
	            format = param.iFormat.f,
	            c = format.length,
	            value = '';

	        param.iFormat.i = 0;

	        if (date) {
	            if (param.useBrowserFormat) {
	                if (param.hasTimePicker) {
	                    value = date.toLocaleString();
	                } else {
	                    value = date.toLocaleDateString();
	                }
	            } else {
	                for (; param.iFormat.i < c; param.iFormat.i++) {
	                    var data = {
	                        match: 'default',
	                        value: 0,
	                        len: 2,
	                        iFormat: param.iFormat
	                    };
	                    switch (format.charAt(param.iFormat.i)) {
	                        case 'd':
	                            data.match = 'd';
	                            data.value = date.getDate();
	                            value += formatNumber(data);
	                            break;
	                        case 'M':
	                            if (format.indexOf('MMM') != -1) {
	                                value += $$.I18N.gcalendar.shortMonths[date.getMonth()];
	                                param.iFormat.i += 2;
	                            } else {
	                                data.match = 'M';
	                                data.value = date.getMonth() + 1;
	                                value += formatNumber(data);
	                            }
	                            break;
	                        case 'y':
	                            data.match = 'y';
	                            data.value = date.getMonth() + 1;
	                            value += (lookAhead(data) ? date.getFullYear() : (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
	                            break;
	                        case 'h':
	                            data.match = 'h';

	                            if (format.indexOf('tt') == -1) {
	                                data.value = date.getHours();
	                                value += formatNumber(data);
	                            } else {
	                                data.value = date.getHours() > 12 ? date.getHours() - 12 : date.getHours();
	                                value += formatNumber(data);
	                            }
	                            break;
	                        case 'm':
	                            data.match = 'm';
	                            data.value = date.getMinutes();
	                            value += formatNumber(data);
	                            break;
	                        case 's':
	                            data.match = 's';
	                            data.value = date.getSeconds();
	                            value += formatNumber(data);
	                            break;
	                        case 't':
	                            if (date.getHours() > 12) {
	                                value += 'PM';
	                            } else {
	                                value += 'AM';
	                            }
	                            param.iFormat.i++;
	                            break;
	                        default:
	                            value += format.charAt(param.iFormat.i);
	                            break;
	                    }
	                }
	            }
	        }
	        else {
	            value = '';
	        }

	        return value;
	    }

	    function toFormatString(param) {
	        var
	            f,
	            value = '';
	        if (param && $$.isDate(param.date)) {
	            if (typeof param.hasTime != "boolean") {
	                param.hasTime = true;
	            }
	            if (param.hasTime) {
	                f = param.format || "dd/MM/yy hh:mm";
	            } else {
	                f = param.format || "dd/MM/yy";
	            }

	            param.iFormat = {
	                f: f
	            }

	            value = formatDate(param);
	        }

	        return value;
	    }

	    $.widget("aui.gcalendar", {
	        //title部件使用的id
	        titleId: 'aui-gcalendar-title-',
	        //左箭头部件使用的id
	        lefId: 'aui-gcalendar-left-',
	        //右箭头部件使用的id
	        rightId: 'aui-gcalendar-right-',
	        //月视图被选中的单元格对应的id
	        selectedDayId: "aui-gcalendar-selected-day-",
	        //月视图使用的id
	        monthViewId: 'aui-gcalendar-month-view-',
	        //月视图内容部件使用的id
	        monthViewContentId: 'aui-gcalendar-month-view-content-',
	        //年视图对应的id
	        yearViewId: 'aui-gcalendar-year-view-',
	        //十年视图对应的id
	        decadeViewId: 'aui-gcalendar-decade-view-',
	        //title部件对应的jQuery对象
	        $title: null,
	        //左箭头部件对应的jQuery对象
	        $left: null,
	        //右箭头部件对应的jQuery对象
	        $right: null,
	        //月视图对应的jQuery对象
	        $monthView: null,
	        //月视图内容部件对应的jQuery对象
	        $monthViewContent: null,
	        //月视图天部件对应的jQuery对象
	        $monthItem: null,
	        //月视图天部件对应jQuery对象的集合，数组的每一项是一个jQuery对象。
	        $monthItems: null,
	        //年视图部件对应的jQuery对象
	        $yearView: null,
	        //年视图月部件对应的jQuery对象
	        $yearItem: null,
	        //年视图月部件对应jQuery对象的集合，数组的每一项是一个jQuery对象。
	        $yearItems: null,
	        //十年视图部件对应的jQuery对象
	        $decadeView: null,
	        //十年视图年部件对应的jQuery对象
	        $decadeItem: null,
	        //十年视图年部件对应jQuery对象的集合，数组的每一项是一个jQuery对象。
	        $decadeItems: null,
	        //视图模式（分为四种，月视图，年视图，十年视图，世纪视图）
	        view: _view.month,
	        //获取或设置一个值，该值表示日历中上个月天数
	        past: 0,
	        //获取或设置一个值，该值表示日历中下个月第一天的序号
	        future: 0,
	        //获取或设置一个值，该值表示当前年份
	        year: 0,
	        //获取或设置一个值，该值表示当前月份
	        month: 0,
	        //获取或设置一个值，该值表示当前的日期
	        day: 0,
	        //十年视图的开始年份
	        _decadeStart: 0,
	        //十年视图的结束年份
	        _decadeEnd: 9,
	        //该集合表示需要生成的天的集合
	        calendarDays: [],
	        //该集合表示需要生成的天的数目
	        calendarDayCount: 42,
	        //标题格式
	        titleFormat: null,
	        //获取或设置一个值，该值表示选中项的序号。
	        selectedIndex: -1,
	        //当前
	        options: {
	            //获取或设置一个值，该值表示日历的视图模式。默认值$$.gcalendar("view").month，表示月视图
	            displayMode: _view.month,
	            //获取或设置一个值，指示在调用与日期相关的函数时使用的每周的第一天。只在控件初始化时有效
	            firstDayOfWeek: _dayOfWeek.Sunday,
	            //获取或设置一个值，该值表示控件的高度
	            height: 246,
	            //获取或设置一个值，该值与数据源的一个属性进行绑定，表示是否设置了任务。
	            hasTaskBind: null,
	            //获取或设置一个值，该值表示选中的日期。类型:Date
	            selectedDate: null,
	            //获取或设置一个值，该值表示标题的格式。默认值为null,表示使用$$.I18N.gcalendar.titleFormat定义的全局格式
	            titleFormat: null,
	            //获取或设置一个值，该值表示控件的宽度
	            width: 220,
	            enterDown: $.noop,
	            monthChanged: $.noop,
	            dayClick: $.noop,
	            leftClick: $.noop,
	            rightClick: $.noop,
	            selectionChanged: $.noop
	        },
	        _create: function () {
	            var self = this;
	            self._initMembers()
	                ._calculateCalendarDay()
	                ._createCalendar()
	                ._loaded()
	                ._updateMonthItem()
	                ._updateTitle()
	                ._setCurrentDay()
	                ._setSelectedDay(self.day)
	                ._updateDisplayMode(self.options.displayMode)
	                ._initEvent()
	                ._onMonthChanged();

	        },
	        //初始化成员
	        _initMembers: function () {
	            var self = this;
	            ++uuid;
	            self._initId();
	            self.$monthItems = [];
	            self.$monthItemText = [];
	            self.$monthItemTexts = [];
	            self.$monthItemCircle = [];
	            self.$monthItemCircles = [];
	            self.$yearItems = [];
	            self.$decadeItems = [];
	            self.currentDate = new Date();
	            self.titleFormat = (self.options.titleFormat || $$.I18N.gcalendar.titleFormat);
	            if (self.titleFormat != null) {
	                self.titleFormat = self.titleFormat.split("/");
	            } else {
	                $.error("Title format is null please check your settings.");
	            }
	            self.element
	                .addClass(_constant.CALENDAR_CLASS)
	                .attr("unselectable", "on")
	                .height(self.options.height)
	                .width(self.options.width);

	            return self;
	        },
	        _setOption: function (key, value) {
	            var
	                self = this;

	            switch (key) {
	                case "selectedDate":
	                    self._calculateCalendarDay(value)
	                        ._updateMonthItem()
	                        ._updateTitle()
	                        ._setCurrentDay()
	                        ._setSelectedDay(self.day)
	                        ._onSelectedDateChanged();
	                    break;
	                case "displayMode":
	                    self._updateDisplayMode(value);
	                    break;
	            }
	        },
	        //初始化id
	        _initId: function () {
	            var self = this;

	            self.titleId += uuid;
	            self.lefId += uuid;
	            self.rightId += uuid;
	            self.selectedDayId += uuid;
	            self.monthViewId += uuid;
	            self.monthViewContentId += uuid;
	            self.yearViewId += uuid;
	            self.decadeViewId += uuid;

	            return self;
	        },
	        /**
	         * 获取部件id
	         * @param {string} key 部件名称
	         */
	        getId: function (key) {
	            var
	                self = this,
	                id;
	            switch (key) {
	                case "left":
	                    id = self.lefId;
	                    break;
	                case "yearview":
	                    id = self.yearViewId;
	                    break;
	                case "monthview":
	                    id = self.monthViewId;
	                    break;
	                default:
	                    id = "";
	                    break;
	            }

	            return id;
	        },
	        //获取（十年，年，月）视图部件对应的jQuery对象
	        getViewItem: function () {
	            var self = this;
	            return {
	                monthItem: self.$monthView.find('tbody').find('td[class~="' + _constant.MONTH_ITEM_CLASS + '"]'),
	                yearItem: self.$yearView.find('td[class="' + _constant.YEAR_ITEM_CLASS + '"]'),
	                decadeItem: self.$decadeView.find('td[class="' + _constant.DECADE_ITEM_CLASS + '"]')
	            }
	        },
	        //创建calendar
	        _createCalendar: function () {
	            var
	                self = this,
	                h = -1,
	                html = [];

	            html[++h] = self._createTitle();
	            html[++h] = self._createMonthView();
	            html[++h] = self._createYearView();
	            html[++h] = self._createDecadeView();
	            html[++h] = self._createCenturyView();
	            self.element.html(html.join(''));

	            return self;
	        },
	        //部件插入文档后触发
	        _loaded: function () {
	            var
	                self = this;

	            self.$title = self.element.find("#" + self.titleId);
	            self.$left = self.element.find("#" + self.lefId);
	            self.$right = self.element.find("#" + self.rightId);

	            self.$monthView = self.element.find("#" + self.monthViewId);

	            self.$monthViewContent = self.$monthView.find("#" + self.monthViewContentId)
	                .height(self.options.height - 65);

	            self.$monthItem = self.$monthView.find('tbody').find('td[class="' + _constant.MONTH_ITEM_CLASS + '"]');
	            self.$monthItemText = self.$monthItem.children('[class~="' + _constant.MONTH_ITEM_TEXT_CLASS + '"]');
	            self.$monthItemCircle = self.$monthItem.children('[class~="' + _constant.MONTH_ITEM_CIRCLE_CLASS + '"]');
	            self._getViewItem(self.$monthItem, self.$monthItems);
	            self._getViewItem(self.$monthItemText, self.$monthItemTexts);
	            self._getViewItem(self.$monthItemCircle, self.$monthItemCircles);

	            self.$yearView = self.element
	                .find("#" + self.yearViewId)
	                .height(self.options.height - 36);

	            self.$yearItem = self.$yearView.find('td[class="' + _constant.YEAR_ITEM_CLASS + '"]');
	            self._getViewItem(self.$yearItem, self.$yearItems);

	            self.$decadeView = self.element
	                .find("#" + self.decadeViewId)
	                .height(self.options.height - 36);

	            self.$decadeItem = self.$decadeView.find('td[class="' + _constant.DECADE_ITEM_CLASS + '"]');
	            self._getViewItem(self.$decadeItem, self.$decadeItems);
	            self.$decadeItems[0].addClass(_constant.MONTH_ITEM_PAST_CLASS);
	            self.$decadeItems[11].addClass(_constant.MONTH_ITEM_PAST_CLASS);

	            return self;
	        },
	        //注册事件
	        _initEvent: function () {
	            var self = this;

	            //title 
	            self.$title.on("click", self, self._onTitleClick);
	            self.$left.on("click", self, self._onLeftClick);
	            self.$right.on("click", self, self._onRightClick);

	            //month
	            self.$monthViewContent.on("keydown", self, self._onMonthViewKeydown);
	            self.$monthItem.on("keydown", self, self._onMonthItemKeydown)
	                .on("click", self, self._onMonthItemClick);

	            //year
	            self.$yearItem.on("keydown", self, self._onYearItemKeydown)
	                .on("click", self, self._onYearItemClick);

	            //decade
	            self.$decadeItem.on("keydown", self, self._onDecadeKeydown)
	                .on("click", self, self._onDecadeClick);

	            return self;
	        },
	        itemsSource: function (source) {
	            var
	                i = 0, c = source.length,
	                name = this.options.hasTaskBind;
	            this.$monthItemCircle.hide();
	            if (name != null) {
	                for (; i < c; i++) {
	                    if (source[i][name] == true) {
	                        this.$monthItemCircles[i].show();
	                    }
	                }
	            }

	        },
	        //键盘按下时触发
	        _onMonthViewKeydown: function (e) {
	            var self = e.data;

	            e.stopPropagation();

	            switch (e.which) {
	                case $.ui.keyCode.ENTER:
	                    $$.executeEventHandler(self, "enterDown", self.options.enterDown, null, $$.Event({
	                        element: self.element
	                    }));
	                    break;
	                case $.ui.keyCode.HOME:
	                    self._onHomeAndEndKeydown(e);
	                    break;
	                case $.ui.keyCode.END:
	                    self._onHomeAndEndKeydown(e);
	                    break;
	                case $.ui.keyCode.PAGE_UP:
	                    self._onPgUpAndPgDnKeydown(e)
	                    break;
	                case $.ui.keyCode.PAGE_DOWN:
	                    self._onPgUpAndPgDnKeydown(e)
	                    break;
	                default:
	                    break;
	            }
	        },

	        //获取视图中,子部件对应的jQuery对象
	        _getViewItem: function (item, items) {
	            var
	                self = this,
	                i = 0,
	                c = item.length;

	            for (; i < c; i++) {
	                items[i] = $(item[i]);
	            }
	        },
	        //更新显示模式
	        _updateDisplayMode: function (view) {
	            var self = this
	            self.view = view;
	            switch (self.view) {
	                case _view.month:
	                    self._goToMonthView();
	                    break;
	                case _view.year:
	                    self._goToYearView();
	                    break;
	                default:
	                    break;
	            }

	            return self;
	        },
	        goToMonthView: function () {
	            this._goToMonthView();
	        },
	        //跳转到月视图
	        _goToMonthView: function () {
	            var self = this;
	            self.options.displayMode = self.view = _view.month;
	            self.$decadeView.hide();
	            self.$yearView.hide();
	            self.$monthView.show();
	            self._updateTitle();

	            return self;
	        },
	        //跳转到年视图
	        _goToYearView: function () {
	            var self = this;
	            self.options.displayMode = self.view = _view.year;
	            self.$decadeView.hide();
	            self.$monthView.hide();
	            self.$yearView.show();
	            self._updateTitle()
	                ._setSelectedMonth(self.month);

	            return self;
	        },
	        //创建世纪模式
	        _createCenturyView: function () { },
	        _trigger: function (type, event, args) {
	            var self = this;

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            if (args && self.options.parameters) {
	                args.parameters = self.options.parameters[type];
	            }
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        }
	    });

	    //title区域相关逻辑
	    $.extend($.aui.gcalendar.prototype, {
	        //创建title部件
	        _createTitle: function () {
	            var
	                self = this,
	                h = -1,
	                html = [];

	            html[++h] = '<div class="' + _constant.HEADER_CLASS + '">';
	            html[++h] = '<div id="' + self.lefId + '" class="' + _constant.LEFT_ARROW_CLASS + ' ' + _constant.LEFT_ARROW_ICON_CLASS + '"></div>';
	            html[++h] = '<div id="' + self.titleId + '" class="' + _constant.TITLE_CLASS + '" aria-live="assertive" aria-atomic="true"></div>';
	            html[++h] = '<div id="' + self.rightId + '" class="' + _constant.RIGHT_ARROW_CLASS + ' ' + _constant.RIGHT_ARROW_ICON_CLASS + '"></div>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        //更新标题信息
	        _updateTitle: function () {
	            var self = this;
	            switch (self.view) {
	                case _view.month:
	                    self.$title.text(self._converterTitle());
	                    break;
	                case _view.year:
	                    self.$title.text(self.year);
	                    break;
	                case _view.decade:
	                    self.$title.text((self._decadeStart + 1) + "-" + (self._decadeEnd - 1));
	                    break;
	            }

	            return self;
	        },
	        //根据titleFormat转换标题格式
	        _converterTitle: function () {
	            var
	               self = this,
	               value = '',
	               month = self.month,
	               format = self.titleFormat,
	               i = 0,
	               c = format.length;

	            for (; i < c; i++) {
	                switch (format[i]) {
	                    case "m":
	                        value += _months[month];
	                        break;
	                    case "M":
	                        value += _shortCapitalMonths[month];
	                        break;
	                    case "yyyy":
	                        value += self.year;
	                        break;
	                    default:
	                        value += format[i];
	                        break;
	                }
	            }
	            return value;

	        },
	        //title部件点击时触发
	        _onTitleClick: function (e) {
	            var self = e.data;
	            //月视图 to 年视图 to 实际视图
	            switch (self.view) {
	                case _view.month:
	                    self._goToYearView();
	                    break;
	                case _view.year:
	                    self._goToDecadeView();
	                    break;
	                default:
	                    break;
	            }
	        },
	        //左箭头点击时触发
	        _onLeftClick: function (e) {
	            var
	                self = e.data,
	                oldValue = self.options.selectedDate;

	            if (self.view == _view.month) {
	                self._toPrevMonth()
	                    ._setCurrentDay()
	                    ._setSelectedDay(1, true);

	                $$.executeEventHandler(self, "leftClick", self.options.leftClick, null, $$.Event({
	                    element: self.element,
	                    oldValue: oldValue,
	                    newValue: self.options.selectedDate,
	                    parameters: {
	                        mode: self.options.displayMode
	                    }
	                }));

	                self._onSelectedDateChanged();

	            } else if (self.view == _view.year) {
	                --self.year;
	                self._updateTitle();
	            } else if (self.view == _view.decade) {
	                self._toPrevDecade();
	            }
	        },
	        _onMonthChanged: function () {
	            var
	                firstDay = this.calendarDays[0].day,
	                lastDay = this.calendarDays[41].day;


	            firstDay = new Date(this.year, this.month - 1, firstDay);
	            lastDay = new Date(this.year, this.month + 1, lastDay);

	            this._trigger("monthChanged", null, $$.Event({
	                element: this.element,
	                oldValue: {},
	                newValue: {
	                    month: this.month,
	                    firstDay: firstDay,
	                    lastDay: lastDay
	                }
	            }));

	            return this;
	        },
	        //右箭头点击时触发
	        _onRightClick: function (e) {
	            var
	                self = e.data,
	                oldValue = self.options.selectedDate;

	            if (self.view == _view.month) {
	                self._toNextMonth()
	                    ._setCurrentDay()
	                    ._setSelectedDay(1, true);

	                $$.executeEventHandler(self, "rightClick", self.options.rightClick, null, $$.Event({
	                    element: self.element,
	                    oldValue: oldValue,
	                    newValue: self.options.selectedDate,
	                    parameters: {
	                        mode: self.options.displayMode
	                    }
	                }));

	                self._onSelectedDateChanged();

	            } else if (self.view == _view.year) {
	                ++self.year;
	                self._updateTitle();
	            } else if (self.view == _view.decade) {
	                self._toNextDecade();
	            }
	        },
	        //跳转到上一个月
	        _toPrevMonth: function () {
	            var self = this;
	            self._goToMonth(self.month - 1);

	            return self;
	        },
	        _toPrevYear: function () {
	            var self = this;
	            self._goToMonth(-12);

	            return self;
	        },
	        //跳转到下一个月
	        _toNextMonth: function () {
	            var self = this;
	            self._goToMonth(self.month + 1);

	            return self;
	        },
	        //跳转到下一年
	        _toNextYear: function () {
	            var self = this;
	            self._goToMonth(12);

	            return self;
	        },
	        _toPrevDecade: function () {
	            var self = this;
	            self.year = self._decadeStart - 9;
	            self._goToDecade(self.year);
	            return self;
	        },
	        _toNextDecade: function () {
	            var self = this;
	            self.year = self._decadeEnd;
	            self._goToDecade(self.year);
	            return self;
	        },
	        /**
	         * 跳转到包含year指定年份的十年视图
	         * param {number} year
	         */
	        _goToDecade: function (year) {
	            var self = this;

	            self._updateDecadeItem(year)
	                ._updateTitle()
	                ._setSelectedYear(year);
	        }
	    });
	    //月视图相关逻辑
	    $.extend($.aui.gcalendar.prototype, {
	        //创建月视图
	        _createMonthView: function () {
	            var
	                self = this,
	                h = -1,
	                i = 0,
	                j,
	                first = self.options.firstDayOfWeek,
	                index = 0,
	                html = [];

	            html[++h] = '<div class="' + _constant.VIEW_CONTAINER + '" id="' + self.monthViewId + '">';

	            html[++h] = '<div class="' + _constant.MONTH_VIEW_HEADER_CLASS + '">';
	            html[++h] = '<table class="' + _constant.MONTH_VIEW_TABLE_CLASS + '" cellspacing="0" cellpadding="0">';
	            //创建标题（星期日~星期六）
	            html[++h] = '<thead>';
	            html[++h] = '<tr>';
	            for (; i < 7; i++) {
	                html[++h] = '<th class="' + _constant.MONTH_HEADER_ITEM_CLASS + '" unselectable="on" role="columnheader">' + _shortweeks[(i + first) % 7] + '</th>';
	            }
	            html[++h] = '</tr role="row">';
	            html[++h] = '</thead>';
	            html[++h] = '</table>';
	            html[++h] = '</div>';

	            html[++h] = '<div class="' + _constant.MONTH_VIEW_CONTENT_CLASS + '" id="' + self.monthViewContentId + '">';
	            html[++h] = '<table class="' + _constant.MONTH_VIEW_TABLE_CLASS + '" cellspacing="0" cellpadding="0" role="grid" aria-activedescendant="' + self.selectedDayId + '">';
	            html[++h] = '<tbody>';
	            for (i = 0; i < 6; i++) {
	                j = 0;
	                html[++h] = '<tr role="row">';
	                for (; j < 7; j++) {
	                    index = i * 7 + j;
	                    html[++h] = '<td class="' + _constant.MONTH_ITEM_CLASS + '" data-index="' + index + '" role="gridcell" tabindex="0">';
	                    html[++h] = '<div class="' + _constant.MONTH_ITEM_TEXT_CLASS + '" data-index="' + index + '"></div>';
	                    html[++h] = '<div class="' + _constant.MONTH_ITEM_CIRCLE_CLASS + '" data-index="' + index + '" ></div>';
	                    html[++h] = '</td>';
	                }
	                html[++h] = '</tr>';
	            }
	            html[++h] = '</tbody>';
	            html[++h] = '</table>';
	            html[++h] = '</div>';

	            html[++h] = '</div>';

	            return html.join('');
	        },
	        //月视图天部件点击时触发
	        _onMonthItemClick: function (e) {
	            var
	                self = e.data,
	                index = e.target.getAttribute("data-index") - 0,
	                day,
	                current = self.$monthItems[index];
	            day = self.$monthItemTexts[index].text() - 0;
	            if (index < self.past) {
	                //跳转到上个月
	                self._toPrevMonth();
	            } else if (index > self.future) {
	                //跳转到下个月
	                self._toNextMonth();
	            }

	            self._setCurrentDay()
	                ._setSelectedDay(day, true);
	            self.day = day;

	            self._onSelectedDateChanged();
	            self._onDayClick();
	        },
	        _onDayClick: function (e) {
	            this._trigger("dayClick", null, $$.Event({
	                element: this.element,
	                newValue: new Date(this.year, this.month, this.day)
	            }));
	        },
	        /**
	          * 根据日期生成日历。
	          * @private
	          * @param {Date} today 当前日期。
	         */
	        _calculateCalendarDay: function (today) {
	            var
	            //
	            self = this,
	            //
	            current,
	            firstDayOfWeek = self.options.firstDayOfWeek,
	            //
	            today = today || self.options.selectedDate || new Date(),
	            //
	            year = today.getFullYear(),
	            //
	            day = today.getDay(),
	            //
	            date = today.getDate(),
	            //当前月份的序号
	            month = today.getMonth(),
	            //
	            offset = date % 7,
	            //1号星期几,0表示周日
	            firstDay = day - offset + 1 - firstDayOfWeek,
	            //上一月的最大天数
	            prevMax = 0,
	            //本月的最大天数
	            max = 0,
	            //日历中"下个月的部分"的最大序号
	            nextMax = 0,
	            //
	            oldDate,
	            //
	            i = 0;

	            current = new Date(year, month, date);
	            current.setFullYear(year);

	            self.year = year;
	            self.month = month;
	            self.day = date;

	            if (firstDay <= 0) {
	                firstDay += 7;
	            }
	            self.past = firstDay;
	            //1号的前一天，就是上个月的最后一天，就是上月的最大天数
	            current.setDate(0);
	            //重置year，防止前一天跨年的影响
	            // current.setYear(year);
	            prevMax = current.getDate();
	            //将时间还原会本月
	            current.setDate(1);

	            current.setMonth(month + 1);
	            current.setDate(0);
	            max = current.getDate();
	            self.future = firstDay + max - 1;

	            //生成上一个月的天
	            for (i = firstDay - 1; i >= 0; i--) {
	                self.calendarDays[i] = { day: prevMax, state: _constant.MONTH_ITEM_PAST_CLASS };
	                prevMax--;
	            }
	            //生成本月的天
	            for (i = 0; i < max; i++) {
	                self.calendarDays[i + firstDay] = {
	                    day: i + 1,
	                    state: ""
	                };
	            }
	            nextMax = self.calendarDayCount - max - firstDay;
	            //生成下月的天
	            for (i = 0; i < nextMax; i++) {
	                self.calendarDays[i + firstDay + max] = {
	                    day: i + 1,
	                    state: _constant.MONTH_ITEM_FEATURE_CLASS
	                };
	            }

	            return self;
	        },
	        //更新月视图天部件的显示信息。（月份被切换时触发）
	        _updateMonthItem: function () {
	            var
	                self = this,
	                i = 0,
	                items = self.$monthItems,
	                days = self.calendarDays,
	                c = items.length;

	            for (; i < c; i++) {
	                items[i]
	                    .removeClass(_constant.MONTH_ITEM_FEATURE_CLASS)
	                    .removeClass(_constant.MONTH_ITEM_PAST_CLASS);
	                self.$monthItemTexts[i].text(days[i].day);
	                items[i].addClass(days[i].state);
	            }

	            return self;
	        },
	        //设置当前天，在日历重新计算后(_calculateCalendarDay)调用
	        _setCurrentDay: function () {
	            var
	                self = this,
	                d = new Date(),
	                curDay = d.getDate(),
	                curMonth = d.getMonth(),
	                index = -1,
	                curYear = d.getFullYear();

	            self.$monthItem.removeClass(_constant.MONTH_ITEM_CURRENT_CLASS);
	            if (curYear == self.year) {
	                if (curMonth == self.month) {
	                    //如果在当前月，选中当前天
	                    index = curDay - 1 + self.past;

	                } else if (curMonth == self.month - 1) {
	                    //如果是当前天的下个月，检查past部分
	                    index = self.past - self.calendarDays[self.past - 1].day + curDay - 1;
	                } else if (curMonth == self.month + 1) {
	                    //如果是上个月检查，future部分
	                    index = self.future + curDay - self.calendarDays[self.future + 1].day + 1;
	                }
	            }

	            if (index > -1 && index < 42) {
	                self.$monthItems[index].addClass(_constant.MONTH_ITEM_CURRENT_CLASS);
	            }

	            return self;
	        },
	        //设置选中项的焦点
	        _setSelectedFocus: function (item) {
	            item
	                //.attr("aria-selected", true)
	                .attr("id", this.selectedDayId)
	                .attr("tabindex", 0)
	                .focus();
	        },
	        /**
	         * 设置选中天
	         * @param {number} day 待选中的天
	         * @param {boolean} setFocus 是否设置焦点
	         */
	        _setSelectedDay: function (day, setFocus) {
	            var
	                self = this,
	                index = day - 1 + self.past;
	            self.$monthItem
	                .removeAttr("id")
	                //.attr("aria-selected", false)
	                .removeAttr("tabindex")
	                .removeClass(_constant.MONTH_ITEM_SELECTED_CLASS);
	            self.$monthItems[index]
	                .addClass(_constant.MONTH_ITEM_SELECTED_CLASS);

	            self.selectedIndex = index;
	            self.day = self.$monthItemTexts[index].text() - 0;
	            self.oldDate = self.options.selectedDate;

	            self.options.selectedDate = new Date(self.year, self.month, self.day);
	            self.options.selectedDate.setFullYear(self.year);

	            if (setFocus) {
	                self._setSelectedFocus(self.$monthItems[index]);
	            } else {
	                self.$monthItems[index]
	                    .attr("id", self.selectedDayId)
	                    //.attr("aria-selected", true)
	                    .attr("tabindex", "0");
	            }

	            return self;
	        },
	        /**跳转到指定的月份(序号从0开始)
	         * @param {number} index 月份 
	         */
	        _goToMonth: function (month) {
	            var
	                self = this,
	                year = self.year,
	                today = new Date();
	            self._oldMonth = self.month;
	            //如果是当前月，选中当前天
	            if (today.getFullYear() != year || today.getMonth() != month) {
	                today = new Date(year, month, 1);
	            }

	            self._calculateCalendarDay(today);
	            self._updateMonthItem();
	            self._updateTitle();
	            self._onMonthChanged();
	            return self;
	        },
	        //Home后End按下时触发
	        _onHomeAndEndKeydown: function (e) {
	            var
	                self = this,
	                selected = self.options.selectedDate,
	                day = selected.getDate(),
	                month = selected.getMonth();

	            e.preventDefault();

	            if (e.which == $.ui.keyCode.HOME) {
	                selected.setDate(1);
	            } else {
	                selected.setMonth(++month);
	                selected.setDate(0);
	            }

	            self._setOption("selectedDate", selected);
	            self.$monthItems[self.selectedIndex].focus();
	        },
	        //PgUp或PgDn按下时触发
	        _onPgUpAndPgDnKeydown: function (e) {
	            var
	                self = e.data,
	                selected = self.options.selectedDate,
	                day = selected.getDate(),
	                month = selected.getMonth();
	            e.preventDefault();
	            if (e.which == $.ui.keyCode.PAGE_UP) {
	                //上个月的最后一天
	                selected.setDate(0);

	            } else {
	                //下个月的最后一天
	                selected.setMonth(month + 2);
	                selected.setDate(0);
	            }

	            if (day <= selected.getDate()) {
	                selected.setDate(day);
	            }
	            self._setOption("selectedDate", selected);
	            self.$monthItems[self.selectedIndex].focus();
	        },
	        //月视图天部件在键盘按下时触发
	        _onMonthItemKeydown: function (e) {
	            var
	                self = e.data,
	                index = e.target.getAttribute("data-index") - 0,
	                up = false,
	                down = false,
	                canChange = true,
	                day;

	            switch (e.which) {
	                case $.ui.keyCode.LEFT:
	                    index--;
	                    break;
	                case $.ui.keyCode.UP:
	                    index -= 7;
	                    break;
	                case $.ui.keyCode.RIGHT:
	                    index++;
	                    break;
	                case $.ui.keyCode.DOWN:
	                    index += 7;
	                    break;
	                case $.ui.keyCode.TAB:
	                    canChange = false;
	                    break;
	                default:
	                    canChange = false;
	                    break;
	            }
	            if (index != self.selectedIndex && canChange) {
	                e.preventDefault();
	                if (index < 0) {
	                    //需要计算再上个月的位置。
	                    day = self.$monthItemTexts[index + 7].text() - 0;
	                    up = true;
	                } else if (index >= 42) {
	                    day = self.$monthItemTexts[index - 7].text() - 0;
	                    down = true;
	                } else {
	                    day = self.$monthItemTexts[index].text() - 0;
	                }

	                if (index < self.past) {
	                    //1月的上个月需要减一年。
	                    self.month == 0 && self.year--;
	                    //跳转到上个月并更新月视图
	                    self._toPrevMonth();
	                    self._setCurrentDay();
	                } else if (index > self.future) {
	                    //12月的下个月需要加一年····· 
	                    self.month == 0 && self.year++;
	                    //跳转到下个月并更新月视图
	                    self._toNextMonth();
	                    self._setCurrentDay();
	                }

	                if (up) {
	                    index = self.future + day - self.calendarDays[self.future + 1].day + 1 - 7;
	                    day = self.$monthItemTexts[index].text() - 0;
	                }

	                if (down) {
	                    index = self.past - self.calendarDays[self.past - 1].day + day - 1 + 7;
	                    day = self.$monthItemTexts[index].text() - 0;
	                }

	                self._setSelectedDay(day, true);
	                self.day = day;
	                self._onSelectedDateChanged();
	            }
	        },
	        //月份切换时触发，天部件点击的时候触发，键盘移动时触发
	        _onSelectedDateChanged: function () {
	            var
	                self = this,
	                oldDate = self.oldDate;

	            if (self._selectedDateChangedAssert(oldDate, self.options.selectedDate)) {
	                self._trigger("selectionChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: oldDate,
	                    newValue: self.options.selectedDate
	                }));
	            }
	        },
	        //获取当前选中的天对应的jQuery对象
	        getSelectedDayItem: function () {
	            var self = this;
	            return self.$monthItems[self.selectedIndex];
	        },
	        _selectedDateChangedAssert: function (old, selected) {
	            return old && old.getTime() != selected.getTime();
	        }
	    });
	    //年视图相关逻辑
	    $.extend($.aui.gcalendar.prototype, {
	        //创建年视图
	        _createYearView: function () {
	            var
	                self = this,
	                h = -1,
	                i = 0,
	                j,
	                html = [];
	            html[++h] = '<div id="' + self.yearViewId + '" class="' + _constant.YEAR_VIEW_CLASS + '">';
	            html[++h] = '<table role="grid" class="' + _constant.YEAR_VIEW_CONTENT_CLASS + '"  cellspacing="0" cellpadding="0">';
	            html[++h] = '<tbody>';
	            for (; i < 3; i++) {
	                html[++h] = '<tr role="row">';
	                j = 0;
	                for (; j < 4; j++) {
	                    html[++h] = '<td class="' + _constant.YEAR_ITEM_CLASS + '" data-index="' + (i * 4 + j) + '" role="gridcell">' + _shortMonths[i * 4 + j] + '</td>';
	                }
	                html[++h] = '</tr>';
	            }
	            html[++h] = '</tbody>';
	            html[++h] = '</table>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        //设置选中月份
	        _setSelectedMonth: function (month) {
	            var self = this;

	            self.$yearItem.removeClass(_constant.YEAR_SELECTED_CLASS);
	            self.$yearItem.removeAttr("tabindex");
	            self.$yearItems[month]
	                .attr("tabindex", 0)
	                .focus()
	                .addClass(_constant.YEAR_SELECTED_CLASS);

	            return self;
	        },
	        //年视图月部件在键盘按下时触发
	        _onYearItemKeydown: function (e) {
	            var
	                self = e.data,
	                index = e.target.getAttribute("data-index") - 0,
	                canChange = true;
	            e.stopPropagation();

	            switch (e.which) {
	                case $.ui.keyCode.LEFT:
	                    if (--index < 0) {
	                        index += 12;
	                        --self.year;
	                    }
	                    break;
	                case $.ui.keyCode.UP:
	                    if ((index -= 4) < 0) {
	                        index += 12;
	                        --self.year;
	                    }
	                    break;
	                case $.ui.keyCode.RIGHT:
	                    if (++index > 11) {
	                        index -= 12;
	                        ++self.year;
	                    }
	                    break;
	                case $.ui.keyCode.DOWN:
	                    if ((index += 4) > 11) {
	                        index -= 12;
	                        ++self.year;
	                    }
	                    break;
	                case $.ui.keyCode.TAB:
	                    canChange = false;
	                    break;
	                case $.ui.keyCode.ENTER:
	                    canChange = false;
	                    self._selectedMonth(index);
	                    break;
	                case $.ui.keyCode.HOME:
	                    e.preventDefault();
	                    index = 0
	                    break;
	                case $.ui.keyCode.END:
	                    e.preventDefault();
	                    index = 11;
	                    break;
	                case $.ui.keyCode.PAGE_UP:
	                    --self.year;
	                    break;
	                case $.ui.keyCode.PAGE_DOWN:
	                    ++self.year;
	                    break;
	                default:
	                    canChange = false;
	                    break;
	            }

	            if (canChange) {
	                e.preventDefault();
	                self._updateTitle()
	                    ._setSelectedMonth(index);
	            }
	        },
	        //年视图月部件点击时触发
	        _onYearItemClick: function (e) {
	            e.data._selectedMonth(this.getAttribute("data-index") - 0);
	        },
	        //选中月（年视图时使用）
	        _selectedMonth: function (month) {
	            var
	                oldMonth = this.month,
	                oldYear = this.year;

	            this._goToMonthView()
	                ._goToMonth(month)
	                ._setCurrentDay()
	                ._setSelectedDay(1, true)
	                ._onSelectedDateChanged();
	        }
	    });
	    //十年视图相关逻辑
	    $.extend($.aui.gcalendar.prototype, {
	        /**
	         * 获取十年视图的起始年
	         * return {number} 起始年
	         */
	        _getDecadeStart: function (year) {
	            var
	                self = this,
	                reste = year % 10,
	                start = 0;

	            if (year < 10) {
	                //起始年视图公元1年到10年
	                start = -1;
	            } else if (reste == 9) {
	                start = year - year % 10 + 9;
	            } else {
	                start = year - year % 10 - 1;
	            }

	            self._decadeStart = start;
	            self._decadeEnd = start + 11;

	            return start;
	        },
	        //创建十年视图
	        _createDecadeView: function () {
	            var
	                self = this,
	                start = self._getDecadeStart(self.year),
	                h = -1,
	                i = 0,
	                year = 0,
	                j,
	                html = [];

	            html[++h] = '<div id="' + self.decadeViewId + '" class="' + _constant.DECADE_VIEW_CLASS + '">';
	            html[++h] = '<table role="grid" class="' + _constant.DECADE_VIEW_CONTENT_CLASS + '"  cellspacing="0" cellpadding="0">';
	            html[++h] = '<tbody>';
	            for (; i < 3; i++) {
	                html[++h] = '<tr role="row">';
	                j = 0;
	                for (; j < 4; j++) {
	                    year = start + i * 4 + j;
	                    year = year > 0 ? year : '';
	                    html[++h] = '<td class="' + _constant.DECADE_ITEM_CLASS + '" data-index="' + year + '" role="gridcell">' + year + '</td>';
	                }
	                html[++h] = '</tr>';
	            }
	            html[++h] = '</tbody>';
	            html[++h] = '</table>';
	            html[++h] = '</div>';
	            return html.join('');
	        },
	        _goToDecadeView: function () {
	            var self = this;
	            self.options.displayMode = self.view = _view.decade;
	            self.$monthView.hide();
	            self.$yearView.hide();
	            self.$decadeView.show();

	            self._updateDecadeItem(self.year)
	                ._updateTitle()
	                ._setSelectedYear(self.year);

	            return self;
	        },
	        /**
	         * 设置选中年
	         * @param {number} year 需要选中的年份
	         */
	        _setSelectedYear: function (year) {
	            var self = this;

	            self.$decadeItem.removeClass(_constant.YEAR_SELECTED_CLASS);
	            self.$decadeItem.removeAttr("tabindex");
	            self.$decadeItem.filter('[data-index="' + year + '"]')
	                .attr("tabindex", 0)
	                .focus()
	                .addClass(_constant.YEAR_SELECTED_CLASS);

	            return self;
	        },
	        _onDecadeKeydown: function (e) {
	            var
	                self = e.data,
	                year = e.target.getAttribute("data-index") - 0,
	                start = self._decadeStart,
	                end = self._decadeEnd,
	                canChange = true;
	            e.stopPropagation();

	            switch (e.which) {
	                case $.ui.keyCode.LEFT:
	                    if (--year == start) {
	                        //跳转到上个世纪
	                        self._updateDecadeItem(year - 1);
	                    }
	                    break;
	                case $.ui.keyCode.UP:
	                    if ((year -= 4) <= start) {
	                        self._updateDecadeItem(year - 1);
	                    }
	                    break;
	                case $.ui.keyCode.RIGHT:
	                    if (++year == end) {
	                        //跳转到下个世纪
	                        self._updateDecadeItem(year + 1);
	                    }
	                    break;
	                case $.ui.keyCode.DOWN:
	                    if ((year += 4) >= end) {
	                        self._updateDecadeItem(year + 1);
	                    }
	                    break;
	                case $.ui.keyCode.TAB:
	                    canChange = false;
	                    break;
	                case $.ui.keyCode.ENTER:
	                    canChange = false;
	                    $(e.target).trigger("click");
	                    break;
	                case $.ui.keyCode.HOME:
	                    e.preventDefault();
	                    self._setSelectedYear(start + 1);
	                    break;
	                case $.ui.keyCode.END:
	                    e.preventDefault();
	                    self._setSelectedYear(end - 1);
	                    break;
	                case $.ui.keyCode.PAGE_UP:
	                    self._updateDecadeItem(year - 10)
	                        ._setSelectedYear(year - 10);
	                    break;
	                case $.ui.keyCode.PAGE_DOWN:
	                    self._updateDecadeItem(year + 10)
	                        ._setSelectedYear(year + 10);
	                    break;
	                default:
	                    canChange = false;
	                    break;
	            }

	            if (canChange) {
	                e.preventDefault();
	                if (year > 0) {
	                    self._updateTitle()
	                        ._setSelectedYear(year);
	                }
	            }
	        },
	        _onDecadeClick: function (e) {
	            var self = e.data;
	            self.year = this.getAttribute("data-index") - 0;
	            self._goToYearView();
	        },
	        //更新月视图天部件的显示信息。（月份被切换时触发）
	        _updateDecadeItem: function (year) {
	            var
	                self = this,
	                i = 0,
	                start = self._getDecadeStart(year),
	                year = 0,
	                c = self.$decadeItems.length;

	            for (; i < c; i++) {
	                year = start + i;
	                year = year > 0 ? year : '';
	                self.$decadeItems[i].text(year);
	                self.$decadeItems[i].attr("data-index", year);
	            }

	            return self;
	        }
	    });

	})(AUI, jQuery);

/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author bhan
	 * @inputcombobox控件
	 */
	(function ($, $$) {
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.inputcombobox = {
	            init: function (element, valueAccessor, bindingContext) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).inputcombobox(value);
	            },
	            update: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).inputcombobox(value);
	            }
	        };
	    }
	    /** 
		 * <p>用于生成inputcombobox控件，并对其进行操作。可选取的下拉列表，也可以手动输入设定值, 也可以不是列表里面的值，但仍然可以按照上下文进行逻辑处理</p>
		 * inputcombobox的基本用法：
			         var array =
			        [
			            { text: "1 (8pt)", value: "1, xx-small" },
			            { text: "2 (10pt)", value: "2, x-small" },
			            { text: "3 (12pt)", value: "3, small" },
			            { text: "4 (14pt)", value: "4, medium" },
			            { text: "5 (18pt)", value: "5, large" },
			            { text: "6 (24pt)", value: "6, x-large" },
			            { text: "7 (36pt) = *px", value: "7, xx-large" }
			         ];
			  $("#inputcombobox").inputcombobox(
				{
					itemsSource: array,
				}
			);

	     * HTML内容：
			   <div id="inputcombobox"></div>

	       绑定用法：
			       var array1 =
			   [
			       { text1: "1 (8pt)", value: "1, xx-small", bg: "#ff0000" },
			       { text1: "2 (10pt)", value: "2, x-small", bg: "#00ff00" },
			       { text1: "3 (12pt)", value: "3, small", bg: "#0000ff" },
			       { text1: "4 (14pt)", value: "4, medium", bg: "#660000" },
			       { text1: "5 (18pt)", value: "5, large", bg: "#006600" },
			       { text1: "6 (24pt)", value: "6, x-large", bg: "#000066" },
			       { text1: "7 (36pt) = *px", value: "7, xx-large", bg: "#330000" }
			   ];
			
			   $('#inputcombobox1').inputcombobox({
			       itemsSource: array1,
			       dataTextField: "text1",
			       itemTemplate: '<span data-bind="style:{display:\'inline-block\', width:\'16px\', height:\'16px\', background: bg}"></span><span data-bind="text: text1"></span>',
			       selectionChanged: function (e, value) {
			       }
			   });

	        * HTML内容：
			   <div id="inputcombobox1"></div>

		* @class inputcombobox
	    * @requires <a href="popup.html">popup</a>
	    * @author bhan
	    * @constructor
	    * @requires <a href="popup.html">aui.popup.js</a>
	    * @param {Object} options 控件配置信息。
	    * @param {Array} options.itemsSource 设置查询的源数组根据该数组生成下拉列表内容。
		* @param {Number} options.selectedIndex 设置初始化默认选中项,默认值-1，选中列表第一项，负数显示为空。
	    * @param {String} options.dataTextField 设置控件要显示在页面中的属性，默认值为text
	    * @param {String} options.dataValueField 设置控件value的属性，默认值为value
	    * @param {Number} options.filterType 设置控件列表中的过滤行为，默认值为0：“none”的意思， 不进行过滤。其它值，1：“Starts with” ，2：“Contains”，3："Ends with", 4："Equals"
	    * @param {String} options.delay 设置控件search响应的时间， 默认值为200, 单位ms。
	    * @param {String} options.itemTemplate 设置控件itemTemplate，根据这个模板生成列表内容。
	    * @param {String} options.width 设置控件的宽度。
	    * @param {String} options.height 设置控件的高度。
	    * @param {String} options.popupMaxHeight 设置popup的最大高度，超过该值显示滚动条。默认值为100px.
	    * @param {String} options.popupWidth 设置popup的宽度。默认值为"auto"
	    * @param {Number} options.openLimitedCount 设置列表的默认显示条数。默认值为8， 当小时8的时候，查看showType是否为0, 如果是，进行展开行为。
	    * @param {Number} options.showType 设置列表是否展开。默认值为0展开，1为上下键的时候展开，-1为不展开
	    * @param {Boolean} options.ignoreCase 设置search的时候，是否怱略大小写。默认值为true
	    * @param {Boolean} options.isAutoComplete 设置search的时候，是否自动补全。默认值为true
	    * @param {Boolean} options.disabled 设置控件可用状态,默认为false。
	    * @param {Function} options.selectionChanged 设置一个方法，当选中项改变时触发。
	    * @param {Function} options.show 设置一个方法，当下拉列表展开时触发。
	    * @param {Function} options.hide 设置一个方法，当下拉列表关闭时触发。
	    * @param {Function} options.enter 设置一个方法，执行回车键事件。
		*/

	    $.widget("aui.inputcombobox", {
	        options: {
	            itemsSource: [],
	            dataTextField: "text",
	            dataValueField: "value",
	            filterType: 0,
	            delay: 200,
	            itemTemplate: "",
	            selectedIndex: -1,
	            width: "200px",
	            height: "25px",
	            popupMaxheight: "100px",
	            popupWidth: "auto",
	            openLimitedCount: 8,
	            disabled: false,
	            showType: 0,
	            ignoreCase: true,
	            isFilteredHidden: true,
	            isAutoComplete: true,
	            selectionChanged: $.noop,
	            enter: $.noop,
	            show: $.noop,
	            hide: $.noop,
	            trigger: ["keydown"]
	        },

	        _create: function () {
	            var self = this;
	            self._initMembers();
	            self._initItemsList();
	            self._initEvent();
	            self._setOption("disabled", self.options.disabled);
	        },
	        _initMembers: function () {
	            var self = this, options = self.options;
	            self._viewModel = {},
	            self.element.append(self._getTemplateContainer().defaultContainer);
	            self._popupContainer = $("<div class='aui-inputcombobox-popupContainer'></div>")
	                .css('max-height', options.popupMaxheight)
	                .on("mousedown", function (e) {
	                    e.stopPropagation();
	                    $$.closeExcept(self.element, true);
	                })
	                .on("mousewheel", function (e) {
	                    e.stopPropagation();
	                    $$.closeExcept(self.element, true);
	                });
	            self._popUp = self._popupContainer.popup({
	                placement: "bottom-left",
	                dependence: self.element,
	                width: options.popupWidth == "auto" ? options.width : options.popupWidth,
	                onShown: function (e) {
	                    self._refreshScroll();
	                    self._trigger("show", e, $$.Event({ element: self.element }));
	                },
	                onHidden: function (e) {
	                    self._trigger("hide", e, $$.Event({ element: self.element }));
	                }
	            });
	            $('body').append(self._popupContainer);
	            self._defaultContainerElement = self.element.find(".aui-inputcombobox-defalt-container");
	            self._input = self.element.find(".aui-inputcombobox-input");
	            self._defaultContainerElement.css({
	                "width": options.width,
	                "height": options.height
	            });
	            self._input.css({
	                "width": parseInt((self._defaultContainerElement.width() - 18), 10) + "px",
	                "height": options.height
	            });

	            // ie bug
	            self._input.css({
	                "line-height": self._input.height() + "px"
	            });

	            self._input.next().css({ "margin": "auto", top: 0, bottom: 0 });

	            self.setSelectedIndex(options.selectedIndex);
	            self._dropDownButton = self.element.find(".aui-inputcombobox-expand-normal");
	        },
	        _initItemsList: function () {
	            var self = this, options = self.options, items = [];
	            if (options.itemTemplate != "") {
	                self._applyBindings();
	            } else {
	                self._popupContainerItems = $("<ul class = 'aui-inputcombobox-popupContainerItems' role='listbox'></ul>");
	                for (var i = 0, count = options.itemsSource.length; i < count; i++) {
	                    items[items.length] = "<li index='" + i + "' aria-posinset='" + (i + 1) + "' aria-setsize='" + options.itemsSource.length + "' role='option' style='list-style-type:none;padding-left:5px;padding-right:10px;line-height:24px;'>" + options.itemsSource[i][options.dataTextField] + "</li>";
	                }
	                self._popupContainerItems.append(items.join(''));
	                self._popupContainer.append(self._popupContainerItems);
	            }
	            self._itemEvent();
	        },

	        _itemEvent: function () {
	            var self = this, options = self.options;
	            self._item = self._popupContainer.find("li");
	            self._item.on("mouseenter" + self.eventNamespace + " mouseleave" + self.eventNamespace, self._toggleHover)
	                .on("click" + self.eventNamespace, function (e) {
	                    self._input.val($(e.target).text());
	                    self._hide();
	                    self._trigger("selectionChanged", e, $$.Event({
	                        element: self.element,
	                        newValue: self._input.val()
	                    }));
	                });
	        },

	        _applyBindings: function () {
	            var self = this, op = self.options;
	            self._popupContainerItems = $('<ul class = "aui-inputcombobox-popupContainerItems" role="listbox" data-bind="foreach: itemsSource"><li role="option" data-bind="attr:{index: $index, \'aria-posinset\': $index() +1}" style="list-style-type:none;padding-left:5px;padding-right:10px;line-height:24px;">' + op.itemTemplate + '</li></ul>');
	            self._popupContainer.append(self._popupContainerItems);

	            self._viewModel = { itemsSource: ko.observableArray(op.itemsSource) };
	            ko.applyBindings(self._viewModel, self._popupContainerItems[0]);
	        },

	        _toggleHover: function (e) {
	            $(e.target).toggleClass("aui-inputcombobox-popupContainerItems-mouseover");
	        },

	        _getTemplateContainer: function () {
	            return {
	                defaultContainer: '<div class="aui-inputcombobox-defalt-container aui-inputcombobox-default-div" data-bind="stopBindings:true" ><input hidefocus=true class="aui-inputcombobox-input" data-bind="value:displayName"/><span class="aui-inputcombobox-expand-normal"><div class="aui-icon-arrow-down"></div><span style="color:transparent">dropdown button</span></span></div>',
	            }
	        },

	        _initEvent: function () {
	            var
	                self = this,
	                op = self.options,
	                trigger = op.trigger,
	                c = trigger.length;

	            self._input
	                .on("keydown" + self.eventNamespace, $.proxy(self._inputKeydown, self))
	                .on("click" + self.eventNamespace, $.proxy(self._inputClick, self));

	            for (var i = 0; i < c; i++) {
	                self._input.on(trigger[i] + self.eventNamespace, $.proxy(self._search, self))
	            }
	            self._dropDownButton.on("click" + self.eventNamespace, $.proxy(self._click, self));

	            $$.close(self.element, "inputcombobox", "hide");
	        },

	        _inputClick: function () {
	            var self = this;
	            if (!self._popUp.popup("isOpening") && self.options.showType == 0) {
	                self._showPopup();
	            }

	            self._selection(0, self._input.val().length);
	        },

	        _click: function () {
	            var self = this, op = self.options;
	            if (!op.disabled) {
	                self._dropDownButtonClick();
	            }
	        },

	        _dropDownButtonClick: function () {
	            var self = this;
	            if (!self._popUp.popup("isOpening")) {
	                self._showPopup();
	            } else {
	                self._hide();
	            }
	        },
	        showPopup: function () {
	            this._showPopup();
	        },
	        _showPopup: function () {
	            var self = this;

	            if (self._popupContainerItems.children().length == 0) {
	                self._popupContainerItems.css("height", "100px");
	            } else {
	                self._popupContainerItems.css("height", "auto");
	            }

	            var val = self._input.val();
	            var items = self._getPopupContainerItems();
	            if ($(items).hasClass("aui-inputcombobox-popupContainerItems-highlight")) {
	                $(items).removeClass("aui-inputcombobox-popupContainerItems-highlight");
	            }
	            for (var i = 0; i < items.length; i++) {
	                if (val == $(items[i]).text()) {
	                    $(items[i]).addClass("aui-inputcombobox-popupContainerItems-highlight");
	                    break;
	                }
	            }

	            self._selection(0, self._input.val().length);

	            self._show();
	            self._refreshScroll();
	            if (self._isItemWidthUpdate) {
	                var itemWidth = parseInt(self.options.width);
	                self._popupContainer.scrollLeft(100000000000000);
	                self._getPopupContainerItems().width(itemWidth + self._popupContainer.scrollLeft() + 1);
	                self._isItemWidthUpdate = false;
	            }
	            self._popupContainer.scrollLeft(0);

	        },

	        _isValuableKeyCode: function (keyCode) {
	            return keyCode == 8 || (48 <= keyCode && keyCode <= 57) || keyCode == 59 ||
	                keyCode == 61 || keyCode == 38 || keyCode == 40 ||
	                (65 <= keyCode && keyCode <= 90) || (96 <= keyCode && keyCode <= 111) ||
	                keyCode == 173 || keyCode == 188 || (190 <= keyCode && keyCode <= 192) || keyCode == 46 ||
	                (219 <= keyCode && keyCode <= 222) || keyCode == 32 || keyCode == 27 || keyCode == 13
	        },

	        _selection: function (start, end) {
	            var self = this;
	            try {
	                self._input[0].setSelectionRange(start, end);
	            } catch (e) {
	                try {
	                    var elem = self._input[0];
	                    var rangeElement = elem.createTextRange();
	                    rangeElement.moveStart("character", start);
	                    rangeElement.select();
	                } catch (e1) { }
	            }
	        },
	        _inputKeydown: function (e) {
	            var self = this, op = self.options, ignoreCase = op.ignoreCase, key;
	            key = self._keycode = e.keyCode || e.which;
	            self._ctrlKey = e.ctrlKey;
	            self._metaKey = e.metaKey;

	            if (key == 27) {
	                if (self._popUp.popup("isOpening")) {
	                    self._hide();
	                }
	                return true;
	            }

	            var items = self._getPopupContainerItems();

	            if (key == 13) {
	                var $li = $(items).parent().find(".aui-inputcombobox-popupContainerItems-highlight");
	                if ($li.length == 0) {
	                    self._input.val(self._input.val());
	                }
	                if (self._popUp.popup("isOpening")) {
	                    self._hide();
	                }
	                $li.removeClass("aui-inputcombobox-popupContainerItems-highlight");
	                var start = self._input.val().length, end = start;
	                self._selection(start, end);

	                if (self._popUp.popup("isOpening")) {
	                    $(items[i]).addClass("aui-inputcombobox-popupContainerItems-highlight");
	                }
	                self._trigger("enter", e, $$.Event({ element: self.element }));
	                return true;
	            }

	            if (key == 38 || key == 40) {
	                if ((op.showType == 0 || op.showType == 1) && !self._popUp.popup("isOpening")) {
	                    $(items).removeClass("aui-inputcombobox-popupContainerItems-highlight");
	                    var val = self._input.val();
	                    if ($.trim(val) == "") {
	                        $(items[0]).addClass("aui-inputcombobox-popupContainerItems-highlight");
	                        self._input.val($(items[0]).text());
	                    }
	                    if (!$(items).hasClass("aui-inputcombobox-popupContainerItems-highlight")) {
	                        for (var i = 0; i < items.length; i++) {
	                            if ($(items[i]).text() == val) {
	                                $(items[i]).addClass("aui-inputcombobox-popupContainerItems-highlight")
	                                break;
	                            }
	                        }
	                    }
	                    self._show();
	                    self._refreshScroll();
	                } else {
	                    var val = self._input.val();
	                    if ($(items).hasClass("aui-inputcombobox-popupContainerItems-highlight")) {
	                        var $li = $(items).parent().find(".aui-inputcombobox-popupContainerItems-highlight");
	                        $li.removeClass("aui-inputcombobox-popupContainerItems-highlight");
	                        if (key == 40) {
	                            var $next = $li.next();
	                            if ($next.length == 0) {
	                                $li.addClass("aui-inputcombobox-popupContainerItems-highlight");
	                            } else {
	                                $next.addClass("aui-inputcombobox-popupContainerItems-highlight");
	                            }
	                            if ($next.length != 0) {
	                                self._input.val($next.text());
	                            }
	                        }
	                        if (key == 38) {
	                            var $prev = $li.prev();
	                            if ($prev.length == 0) {
	                                $li.addClass("aui-inputcombobox-popupContainerItems-highlight");
	                            } else {
	                                $prev.addClass("aui-inputcombobox-popupContainerItems-highlight");
	                            }

	                            if ($prev.length != 0) {
	                                self._input.val($prev.text());
	                            }
	                        }
	                        self._refreshScroll();
	                    } else {
	                        if (key == 40) {
	                            $(items[0]).addClass("aui-inputcombobox-popupContainerItems-highlight");
	                            self._input.val($(items[0]).text());
	                        } else {
	                            $(items[items.length - 1]).addClass("aui-inputcombobox-popupContainerItems-highlight");
	                            self._input.val($(items[items.length - 1]).text());
	                        }
	                    }
	                }

	                return true;
	            }
	        },
	        _search: function (e) {

	            var self = this, op = self.options, ignoreCase = op.ignoreCase, key = self._keycode;
	            if (self._ctrlKey || self._metaKey) {
	                return true;
	            }
	            if (!self._isValuableKeyCode(key)) {
	                //return true;
	            }

	            if (key == 13) {
	                return true;
	            }



	            var items = self._getPopupContainerItems();

	            if (key == 8 || key == 46) {
	                var self = this;
	                if (self.options.filterType != 0) {
	                    self._reset = setTimeout(function (e) {

	                        clearTimeout(self._reset);
	                        var val = self._input.val();
	                        if (val == "" && self.options.isFilteredHidden) {
	                            var reg = self._getReg(val);
	                            self._refreshCreatePopupItems(reg);
	                        }
	                        self._reset = null;
	                    },
	                    self.options.delay
	                    );
	                }
	                return true;
	            }
	            if (op.isAutoComplete) {
	                self._typing = setTimeout(function (e) {
	                    clearTimeout(self._typing)
	                    var val = self._input.val();
	                    if (ignoreCase) {
	                        val = val.toLowerCase();
	                    }
	                    if (val != "") {
	                        var reg = self._getReg(val);
	                        if (self.options.filterType != 0 && self.options.isFilteredHidden) {
	                            self._refreshCreatePopupItems(reg);
	                        }
	                        var items = self._getPopupContainerItems();
	                        $(items).removeClass("aui-inputcombobox-popupContainerItems-highlight");
	                        for (var i = 0; i < items.length; i++) {
	                            var text = $(items[i]).text();
	                            if (reg.test(text) || self.options.ignoreCase && reg.test(text.toLowerCase())) {
	                                self._input.val($(items[i]).text());
	                                var start = val.length, end = $(items[i]).text().length;
	                                self._selection(start, end);
	                                if (self._popUp.popup("isOpening")) {
	                                    $(items[i]).addClass("aui-inputcombobox-popupContainerItems-highlight");
	                                }
	                                break;
	                            }
	                        }
	                    }
	                    if (op.openLimitedCount >= 8 && !self._popUp.popup("isOpening") && op.showType == 0) {
	                        self._showPopup();
	                    } else {
	                        if (self._popupContainerItems.children().length == 0) {
	                            self._popupContainerItems.css("height", "100px");
	                        } else {
	                            self._popupContainerItems.css("height", "auto");
	                        }
	                    }
	                    self._typing = null;
	                }, op.delay);
	            }

	            if (op.openLimitedCount <= 8 && !self._popUp.popup("isOpening") && op.showType == 0) {
	                self._show();
	            }
	        },

	        _replace: function (v) {
	            var charArr = "\\$()*+.[]?/^{}|".split('');
	            for (var i = 0; i < charArr.length; i++) {
	                v = v.replace(new RegExp("\\" + charArr[i], "gm"), "\\" + charArr[i]);
	            }
	            return v;
	        },

	        _getReg: function (val) {
	            var self = this, filter = self.options.filterType;
	            if (filter == 0 || filter == 2) {
	                return new RegExp(self._replace(val));
	            } else if (filter == 1) {
	                return new RegExp("^" + self._replace(val));
	            } else if (filter == 3) {
	                return new RegExp(self._replace(val) + "$");
	            } else if (filter == 4) {
	                return new RegExp("^" + self._replace(val) + "$");
	            }
	        },

	        _getPopupContainerItems: function () {
	            return this._popupContainerItems.children("li");
	        },

	        _refreshCreatePopupItems: function (reg) {
	            var self = this, op = self.options, items = [], itemSource = [];
	            self._filterSourceFun(reg);
	            self._popupContainerItems.empty();
	            if (op.itemTemplate != "") {
	                self._viewModel.itemsSource = ko.observableArray(self._filterSource);
	            } else {
	                for (var i = 0, len = self._filterSource.length; i < len; i++) {
	                    var text = self._filterSource[i][op.dataTextField];
	                    if (reg.test(text) || op.ignoreCase && reg.test(text.toLowerCase())) {
	                        items[items.length] = "<li index='" + i + "' aria-posinset='" + (i + 1) + "' aria-setsize='" + len + "' role='option' style='list-style-type:none;padding-left:5px;padding-right:10px; line-height:24px;'>" + text + "</li>";
	                    }
	                }
	                self._popupContainerItems.append(items.join(''));
	            }
	            self._itemEvent();
	        },

	        _filterSourceFun: function (reg) {
	            var items = [], self = this, op = self.options, itemsSource = op.itemsSource;
	            for (var i = 0, len = itemsSource.length; i < len; i++) {
	                var text = itemsSource[i][op.dataTextField];
	                if (reg.test(text) || op.ignoreCase && reg.test(text.toLowerCase())) {
	                    items[items.length] = itemsSource[i];
	                }
	            }
	            self._filterSource = items;
	        },

	        _refreshScroll: function () {
	            var self = this, popupHeight = self._popUp.height();
	            var seletedItem = self._popupContainerItems.find('.aui-inputcombobox-popupContainerItems-highlight');
	            if (seletedItem[0]) {
	                var focusedItemOffsetTop = seletedItem[0].offsetTop;// 选中的item距离整个content区域最顶端的距离
	                var contentClientHeight = popupHeight;// 可见区域的大小
	                var contentScrollTop = self._getPopupContainerItems()[0].scrollTop;// 现在的可见区域离内容最顶端的偏移
	                var itemClientHeight = seletedItem[0].clientHeight;// 选中的item的本身高度

	                // 要选中的item在可见区域上面，将这个item放在可视区域的第一个位置
	                if (contentScrollTop - focusedItemOffsetTop + itemClientHeight > 0) {
	                    self._popupContainer.scrollTop(focusedItemOffsetTop);
	                    return;
	                }
	                // 要选中的item在可见区域下面，将这个item放在可视区域的最后一个位置
	                if (focusedItemOffsetTop - contentScrollTop >= contentClientHeight - itemClientHeight) {
	                    self._popupContainer.scrollTop(focusedItemOffsetTop - contentClientHeight + itemClientHeight);
	                    return;
	                }
	            }
	        },

	        _setOption: function (key, value) {
	            var self = this, options = self.options;
	            if (key == "filterType") {
	                options[key] = parseInt(value);
	            } else {
	                options[key] = value;
	            }

	            if (key == "disabled") {
	                if (value == true || "true" == (value + "").toLowerCase()) {
	                    self._hide();
	                    self._defaultContainerElement.removeClass("aui-inputcombobox-default-div").addClass("aui-inputcombobox-default-div-disabled");
	                    self._input.attr('disabled', 'disabled').addClass("aui-inputcombobox-input-disabled");
	                    self.element.find(".aui-inputcombobox-expand-normal").removeClass("aui-inputcombobox-expand-normal").addClass("aui-inputcombobox-expand-disabled");
	                } else {
	                    self._defaultContainerElement.removeClass("aui-inputcombobox-default-div-disabled").addClass("aui-inputcombobox-default-div");
	                    self._input.removeAttr('disabled').removeClass("aui-inputcombobox-input-disabled");
	                    self.element.find(".aui-inputcombobox-expand-disabled").removeClass("aui-inputcombobox-expand-disabled").addClass("aui-inputcombobox-expand-normal");
	                }
	            }
	        },

	        itemsSource: function (source) {
	            var
	                self = this,
	                options = self.options;

	            if (arguments.length > 0) {
	                self.options.itemsSource = source;
	                if (options.itemTemplate != "") {
	                    self._viewModel.itemsSource(ko.observableArray(source)());
	                } else {
	                    var items = [];
	                    self._popupContainerItems.empty();
	                    for (var i = 0, count = source.length; i < count; i++) {
	                        items[i] = "<li index='" + i + "' aria-posinset='" + (i + 1) + "' aria-setsize='" + source.length + "' role='option' style='list-style-type:none;padding-left:5px;padding-right:10px;line-height:24px;'>" + source[i][options.dataTextField] + "</li>";
	                    }
	                    self._popupContainerItems.append(items.join(''));
	                    self._popupContainer.append(self._popupContainerItems);
	                }
	                self._itemEvent();

	            } else {
	                return self.options.itemsSource;
	            }
	        },

	        /**
	        * 获取或设置一个值，该值表示当前控件是否可用。
	        * @method isEnable
	        * @param　{Boolean} value  设置控件是否可用。
	        * @example
	       $("#inputcombobox").inputcombobox("isEnable"，true);
	        */
	        isEnable: function (value) {
	            var self = this;
	            self._setOption("disabled", value);
	        },
	        /**
	        * 获取一个值，该值为选中项的value。
	        * @method getValue
	        * @example
	       $("#inputcombobox").inputcombobox("getValue");
	        */
	        getValue: function () {
	            var self = this;
	            return self.getSelectedItem()[self.options.dataValueField];
	        },
	        /**
	        * 设置一个值，根据此value选中相应的列表内容。
	        * @method setValue
	        * @param　{String} value 
	        * @example
	        $("#inputcombobox").inputcombobox("setValue"，"value");
	        */
	        setValue: function (value) {
	            var self = this, textVal = "";
	            for (var i = 0, len = self.options.itemsSource.length; i < len; i++) {
	                if (value == self.options.itemsSource[i][self.options.dataValueField]) {
	                    textVal = self.options.itemsSource[i][self.options.dataTextField];
	                    break;
	                }
	            }
	            self._input.val(textVal || value);
	        },
	        /**
	        * 设置一个值，根据些数值选中下拉列表内容。
	        * @method setSelectedIndex
	        * @param　{Number} index 
	        * @example
	        $("#inputcombobox").inputcombobox("setSelectedIndex"，1);
	        */
	        setSelectedIndex: function (index) {
	            var self = this, item = self.options.itemsSource[index];
	            self._input.val(!item ? "" : item[self.options.dataTextField]);
	        },

	        /**
	        * 获取选中的记录的object。
	        * @method getSelectedItem
	        * @example
	        $("#inputcombobox").inputcombobox("getSelectedItem);
	        */
	        getSelectedItem: function () {
	            var self = this, item = self._input.val(), options = self.options, source = options.itemsSource, len = source.length;
	            for (var i = 0, count = len; i < count; i++) {
	                if (item.toLowerCase() == source[i][options.dataTextField].toLowerCase()) {
	                    return options.itemsSource[i];
	                }
	            }

	            var obj = {};
	            obj[options.dataTextField] = item;
	            obj[options.dataValueField] = item
	            return obj;
	        },
	        /**
	        * 显示列表
	        * @method show
	        * @example
	        $("#inputcombobox").inputcombobox("show);
	        */
	        show: function () {
	            var self = this;
	            if (!self._popUp.popup("isOpening")) {
	                self._show();
	            }
	        },
	        _show: function () {
	            var self = this;
	            $$.closeVisibility(self.element, true);
	            self._popUp.popup("show");
	        },
	        /**
	        * 关闭列表。
	        * @method hide
	        * @example
	        $("#inputcombobox").inputcombobox("hide);
	        */
	        hide: function () {
	            var self = this;
	            if (self._popUp.popup("isOpening")) {
	                self._hide();
	            }
	        },
	        _hide: function () {
	            var self = this;
	            $$.closeVisibility(self.element, false);
	            self._popUp.popup("hide");
	        },
	        _destroy: function () {
	            this.element.removeClass().off(this.eventNamespace).empty();
	            $$.offClose(this.element);
	        }
	    });
	})(jQuery, AUI);


/***/ },
/* 29 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author glwang
	 * @fileoverview iptextbox控件。
	 */
	(function ($, $$) {
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.iptextbox = {
	            init: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).iptextbox(value);
	            },
	            update: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).iptextbox(value);
	            }
	        }
	    }


	    /**
		 * <p>创建一个iptextbox控制器。</p>
		 * 普通的iptextbox使用：

		 * JavaScript内容：

		$("#defaultIPTextBox").iptextbox({
			IP : "110.119.120.114",
			disabled : true
		});

		 * HTML内容：

		 <div id="defaultIPTextBox" style="display: inline-block;"></div>
		 
		 * @name iptextbox
		 * @class iptextbox
		 * @author Gangli.Wang
		 * @desc 创建一个iptextbox控件控制器。
		 * @constructor
		 * @param {Object} config 控件配置信息。
		 * @param {String} config.IP 获取或设置一个值，该值表示初始化时的IP地址。该值只有在控件初始化时设置有效。
		 * @param {Boolean} config.disabled 获取或设置一个值，该方法表示该控件是否可用。如果为true，表示不可用，反之，表示可用。
		 */
	    $.widget("aui.iptextbox", {

	        options: {
	            IP: "",
	            disabled: false,
	            data: null
	        },
	        /**
			 * 控件中需要的数据
			 */
	        _viewModel: function (self, settings) {
	            var _self = this;
	            /**
				 * 第一个IP地址输入框的数据
				 */
	            _self._first = ko.observable();
	            /**
				 * 第二个IP地址输入框的数据
				 */
	            _self._second = ko.observable();
	            /**
				 * 第三个IP地址输入框的数据
				 */
	            _self._third = ko.observable();
	            /**
				 * 第四个IP地址输入框的数据
				 */
	            _self._fourth = ko.observable();
	            _self._disabled = ko.observable(settings.disabled);
	            /**
				 * 获取初始化数据的IP地址，并将其拆分为数组，分别为四个IP输入框赋值
				 */
	            _self._mIP = ko.dependentObservable({
	                read: function () {
	                    if (settings.IP != "") {
	                        var mIP = settings.IP.replace(/[^\d.]/g, "");
	                        mIP = mIP.split(".");
	                        return _self._first(mIP[0])._second(mIP[1])._third(mIP[2])._fourth(mIP[3]);
	                    } else {
	                        return _self._first("")._second("")._third("")._fourth("");
	                    }
	                },
	                write: function () {
	                    var setIP = [_self._first, _self._second, _self._third, _self._fourth];
	                    setIP = setIP.join(".");
	                    return setIP;
	                },
	                owner: self._viewModel
	            });
	            /**
				 * 第一个IP地址输入框的数据处理和验证方法
				 */
	            _self.formatFirstIP = ko.dependentObservable({
	                read: function () {
	                    var regRex = /^\d{1,3}$/;
	                    var _value = _self._first();
	                    if (_value != "" || _value != null) {
	                        if (regRex.test(_value)) {
	                            if (_value <= 0 || _value > 255 || _value == 127) {
	                                _self._first("255");
	                                self.options._firstIPText.select();
	                            } else {
	                                if (self.options._secondIPText != null && self.isChanged == 1 && _value >= 100) {
	                                    self.options._secondIPText.focus();
	                                    self.options._secondIPText.select();
	                                }
	                            }
	                        } else {
	                            return _self._first(_value.replace(/[^\d.]/g, ""));
	                        }
	                    }
	                },
	                write: function (value) {
	                    if (value <= 0 || value > 255 || value == 127) {
	                        _self._first("");
	                    } else {
	                        _self._first(value);
	                    }
	                },
	                owner: self._viewModel
	            });
	            /**
				 * 第二个IP地址输入框的数据处理和验证方法
				 */
	            _self.formatSecondIP = ko.dependentObservable({
	                read: function () {
	                    var regRex = /^\d{1,3}$/;
	                    var _value = _self._second();
	                    if (_value != "" || _value != null) {
	                        if (regRex.test(_value)) {
	                            if (_value < 0 || _value > 255 || _value == 127) {
	                                _self._second("255");
	                                self.options._secondIPText.select();
	                            } else {
	                                if (self.options._thirdIPText != null && self.isChanged == 1 && _value >= 100) {
	                                    self.options._thirdIPText.focus();
	                                    self.options._thirdIPText.select();
	                                };
	                            }
	                        } else {
	                            return _self._second(_value.replace(/[^\d.]/g, ""));
	                        }
	                    }
	                },
	                write: function (value) {
	                    if (value < 0 || value > 255 || value == 127) {
	                        _self._second("");
	                    } else {
	                        _self._second(value);
	                    }
	                },
	                owner: self._viewModel
	            });
	            /**
				 * 第三个IP地址输入框的数据处理和验证方法
				 */
	            _self.formatThirdIP = ko.dependentObservable({
	                read: function () {
	                    var regRex = /^\d{1,3}$/;
	                    var _value = _self._third();
	                    if (_value != "" || _value != null) {
	                        if (regRex.test(_value)) {
	                            if (_value < 0 || _value > 255 || _value == 127) {
	                                _self._third("255");
	                                self.options._thirdIPText.select();
	                            } else {
	                                if (self.options._fourthIPText != null && self.isChanged == 1 && _value >= 100) {
	                                    self.options._fourthIPText.focus();
	                                    self.options._fourthIPText.select();
	                                };
	                            }
	                        } else {
	                            return _self._third(_value.replace(/[^\d.]/g, ""));
	                        }
	                    }
	                },
	                write: function (value) {
	                    if (value < 0 || value > 255 || value == 127) {
	                        _self._third("");
	                    } else {
	                        _self._third(value);
	                    }
	                },
	                owner: self._viewModel
	            });
	            /**
				 * 第四个IP地址输入框的数据处理和验证方法
				 */
	            _self.formatFourthIP = ko.dependentObservable({
	                read: function () {
	                    var regRex = /^\d{1,3}$/;
	                    var _value = _self._fourth();
	                    if (_value != "" || _value != null) {
	                        if (regRex.test(_value)) {
	                            if (_value < 0 || _value > 255 || _value == 127) {
	                                _self._fourth("255");
	                                self.options._fourthIPText.select();
	                            }
	                        } else {
	                            return _self._fourth(_value.replace(/[^\d.]/g, ""));
	                        }
	                    }
	                },
	                write: function (value) {
	                    if (value < 0 || value > 255 || value == 127) {
	                        _self._fourth("");
	                    } else {
	                        _self._fourth(value);
	                    }
	                },
	                owner: self._viewModel
	            });
	        },
	        /**
			 * 控件样式模板
			 */
	        _initTemplate: function (self) {
	            var dot = "<div data-bind='disable:_disabled'>.</div>";
	            self.options._mainDiv = $("<div data-bind='disable:_disabled' role='application' aria-span='IP textbox'></div>");
	            self.options._firstIPText = $("<input type='text' data-bind='value: _first,disable:_disabled,valueUpdate: \"afterkeydown\"' size=3 maxlength=3 />");
	            self.options._secondIPText = $("<input type='text' data-bind='value: _second,disable:_disabled ,valueUpdate: \"afterkeydown\"'  size=3 maxlength=3 />");
	            self.options._thirdIPText = $("<input type='text' data-bind='value: _third ,disable:_disabled,valueUpdate: \"afterkeydown\"' size=3 maxlength=3 />");
	            self.options._fourthIPText = $("<input type='text' data-bind='value: _fourth ,disable:_disabled,valueUpdate: \"afterkeydown\"' size=3 maxlength=3 />");
	            self.options._mainDiv.append(self.options._firstIPText);
	            self.options._mainDiv.append($(dot).addClass("split"));
	            self.options._mainDiv.append(self.options._secondIPText);
	            self.options._mainDiv.append($(dot).addClass("split"));
	            self.options._mainDiv.append(self.options._thirdIPText);
	            self.options._mainDiv.append($(dot).addClass("split"));
	            self.options._mainDiv.append(self.options._fourthIPText);
	            return self.options._mainDiv;
	        },
	        /**
			 * 初始化操作
			 */
	        _initManager: {
	            _initIPTextBoxTemplate: function (self) {
	                self.element.append(self._initTemplate(self));
	                self.options._mainDiv.addClass("aui-iptextbox-border-style");
	                self.options._mainDiv.wrap('<div data-bind="stopBindings:true"></div>');
	                if (self.options.disabled) {
	                    self.options._mainDiv.attr("disabled", true);
	                }
	            },
	            _initIPTextTemplate: function (self) {
	                self.options._firstIPText.addClass("aui-iptextbox-text-style");
	                self.options._secondIPText.addClass("aui-iptextbox-text-style");
	                self.options._thirdIPText.addClass("aui-iptextbox-text-style");
	                self.options._fourthIPText.addClass("aui-iptextbox-text-style");
	            },
	            _setDataBinding: function (self) {
	                var element = self.element;
	                self.options.data = new self._viewModel(self, self.options);
	                $(function () {
	                    ko.applyBindings(self.options.data, self.options._mainDiv[0]);
	                });
	            }
	        },
	        /**
			 * 事件管理器
			 */
	        _eventManager: {
	            /**
				 * 注册事件
				 */
	            _initializationEvent: function (self) {
	                if (self.options.disabled == false) {
	                    self.options._mainDiv.off(self.eventNamespace);
	                    self.options._mainDiv.on("mouseenter" + self.eventNamespace, this, function () {
	                        self.options._mainDiv.addClass("aui-iptextbox-border-mouseenter");
	                    }).on("mouseleave" + self.eventNamespace, this, function () {
	                        self.options._mainDiv.removeClass("aui-iptextbox-border-mouseenter");
	                    });
	                }

	                self.options._firstIPText.off(self.eventNamespace);
	                self.options._secondIPText.off(self.eventNamespace);
	                self.options._thirdIPText.off(self.eventNamespace);
	                self.options._fourthIPText.off(self.eventNamespace);

	                self.options._firstIPText.on("keydown" + self.eventNamespace, this, function (e) {
	                    self._methodManager._validateText1(e, self, self.options._secondIPText);
	                });
	                self.options._secondIPText.on("keydown" + self.eventNamespace, this, function (e) {
	                    self._methodManager._validateText2(e, self, self.options._thirdIPText);
	                });
	                self.options._thirdIPText.on("keydown" + self.eventNamespace, this, function (e) {
	                    self._methodManager._validateText3(e, self, self.options._fourthIPText);
	                });
	                self.options._fourthIPText.on("keydown" + self.eventNamespace, this, function (e) {
	                    self._methodManager._validateText4(e, self, self.options._fourthIPText);
	                });
	            }
	        },
	        /**
			 * 方法管理器
			 */
	        _methodManager: {
	            /**
				 * 验证IP地址框的键盘操作
				 */
	            _validateText: function (e, nextIPText) {
	                var evt = e || window.event;
	                var key = e.which || e.keyCode;
	                if (key == 32 || key == 110 || key == 190) {

	                    //屏蔽Firefox默认处理！！！
	                    evt.preventDefault();
	                    evt.stopPropagation();
	                    evt.which = 9;
	                    nextIPText.focus();
	                    nextIPText.select();
	                }
	            },
	            /**
				 * 第一个IP地址输入框的事件方法
				 */
	            _validateText1: function (e, self, nextIPText) {
	                self.isChanged = 1;
	                self._methodManager._validateText(e, nextIPText);
	            },
	            /**
				 * 第二个IP地址输入框的事件方法
				 */
	            _validateText2: function (e, self, nextIPText) {
	                self.isChanged = 1;
	                self._methodManager._validateText(e, nextIPText);
	                var evt = e || window.event;
	                var key = e.which || event.keyCode || e.keyCode;
	                if (key == 8) {
	                    if (self.options._secondIPText.selector == "" && getCursortPosition(self.options._secondIPText) != 0) {
	                        return;
	                    } else {
	                        if (self.options._secondIPText.val() != "") {
	                            _self.options._secondIPText.val("");
	                            return;
	                        }
	                    }
	                    if (getCursortPosition(self.options._secondIPText) == 0) {
	                        self.options._firstIPText.focusEnd();
	                    }
	                }
	            },
	            /**
				 * 第三个IP地址输入框的事件方法
				 */
	            _validateText3: function (e, self, nextIPText) {
	                self.isChanged = 1;
	                self._methodManager._validateText(e, nextIPText);
	                var evt = e || window.event;
	                var key = e.which || event.keyCode || e.keyCode;
	                if (key == 8) {
	                    if (self.options._thirdIPText.selector == "" && getCursortPosition(self.options._thirdIPText) != 0) {
	                        return;
	                    } else {
	                        if (self.options._thirdIPText.val() != "") {
	                            self.options._thirdIPText.val("");
	                            return;
	                        }
	                    }
	                    if (getCursortPosition(self.options._thirdIPText) == 0) {
	                        self.options._secondIPText.focusEnd();
	                    }
	                }
	            },
	            /**
				 * 第四个IP地址输入框的事件方法
				 */
	            _validateText4: function (e, self, nextIPText) {
	                self.isChanged = 1;
	                self._methodManager._validateText(e, nextIPText);
	                var evt = e || window.event;
	                var key = e.which || event.keyCode || e.keyCode;
	                if (key == 8) {
	                    if (self.options._fourthIPText.selector == "" && getCursortPosition(self.options._fourthIPText) != 0) {
	                        return;
	                    } else {
	                        if (self.options._fourthIPText.val() != "") {
	                            self.options._fourthIPText.val("");
	                            return;
	                        }
	                    }
	                    if (getCursortPosition(self.options._fourthIPText) == 0) {
	                        self.options._thirdIPText.focusEnd();
	                    }
	                }
	            }
	        },
	        _create: function () {
	            var self = this;
	            self._initManager._initIPTextBoxTemplate(self);
	            self._initManager._initIPTextTemplate(self);
	            self._eventManager._initializationEvent(self);
	            self._initManager._setDataBinding(self);
	        },
	        _setOption: function (key, value) {
	            if (key == "disabled") {
	                if (value) {
	                    this.options.data._disabled(true);
	                    this.options._mainDiv.attr("disabled", true);
	                    this.options._mainDiv.off("." + this.eventNamespace);
	                    this.options._firstIPText.off("." + this.eventNamespace);
	                    this.options._secondIPText.off("." + this.eventNamespace);
	                    this.options._thirdIPText.off("." + this.eventNamespace);
	                    this.options._fourthIPText.off("." + this.eventNamespace);
	                } else {
	                    this.options.data._disabled(false);
	                    this.options._mainDiv.removeAttr("disabled");
	                    this.options._mainDiv.on("mouseenter" + this.eventNamespace, this, function (e) {
	                        e.data.options._mainDiv.addClass("aui-iptextbox-border-mouseenter");
	                    });
	                    this.options._mainDiv.on("mouseleave" + this.eventNamespace, this, function (e) {
	                        e.data.options._mainDiv.removeClass("aui-iptextbox-border-mouseenter");
	                    });
	                }
	            }
	        },
	        _destroy: function () {
	            this.options._mainDiv.off(this.eventNamespace);
	            this.options._firstIPText.off(this.eventNamespace);
	            this.options._secondIPText.off(this.eventNamespace);
	            this.options._thirdIPText.off(this.eventNamespace);
	            this.options._fourthIPText.off(this.eventNamespace);
	            this.element.empty();
	        },
	        /**
			 * 获取当前控件中的IP地址。
			 * @method getValue
			 * @example 相关Javascript代码：
			 * @example
		$("#iptextbox").iptextbox("getValue");
			 */
	        getValue: function () {
	            var self = this, setIP;
	            setIP = [self.options.data._first(), self.options.data._second(), self.options.data._third(), self.options.data._fourth()];
	            setIP = setIP.join(".");
	            return setIP;
	        }
	    });
	    /**
		 * 获取光标位置函数
		 */
	    function getCursortPosition(ctrl) {
	        var CaretPos = 0;
	        //IE Support
	        if (document.selection) {
	            ctrl.focus();
	            var Sel = document.selection.createRange();
	            Sel.moveStart('character', -ctrl.val().length);
	            CaretPos = Sel.text.length;
	        }// Firefox support
	        else if (ctrl[0].selectionStart || ctrl[0].selectionStart == '0')
	            CaretPos = ctrl[0].selectionStart;
	        return CaretPos;
	    }

	    /**
		 * 此处的三个方法是为了实现定位光标在文本框中的位置
		 */
	    $.fn.setCursorPosition = function (position) {
	        if (this.lengh == 0)
	            return this;
	        return $(this).setSelection(position, position);
	    }
	    $.fn.setSelection = function (selectionStart, selectionEnd) {
	        if (this.lengh == 0)
	            return this;
	        var input = this[0];
	        if (input.createTextRange) {
	            var range = input.createTextRange();
	            range.collapse(true);
	            range.moveEnd('character', selectionEnd);
	            range.moveStart('character', selectionStart);
	            range.select();
	        } else if (input.setSelectionRange) {
	            input.focus();
	            input.setSelectionRange(selectionStart, selectionEnd);
	            //设置文本框selectionStart到selectionEnd之间文字的光标选中
	        }
	        return this;
	    }
	    $.fn.focusEnd = function () {
	        this.setCursorPosition(this.val().length);
	    }
	})(jQuery, AUI);


/***/ },
/* 30 */
/***/ function(module, exports) {

	//@author fqwu
	(function ($$, $) {
	    "use strict";
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.loading = {
	            init: function (element, valueAccessor) {
	                var
	                    element = $(element),
	                    data = valueAccessor(),
	                    isClosed = data.isClosed,
	                    isClosedObservable = ko.isObservable(isClosed),
	                    value = ko.toJS(ko.unwrap(data)),
	                    executeEventHandler = $$.executeEventHandler,
	                    //opened事件的回调
	                    opened = value.opened,
	                    //closed事件的回调
	                    closed = value.closed;

	                element.loading(value);

	                if (isClosedObservable) {
	                    element.loading("option", "opened", function (e, args) {
	                        isClosed(false);
	                        executeEventHandler(null, "opened", opened, e, args);
	                    });
	                    element.loading("option", "closed", function (e, args) {
	                        isClosed(true);
	                        executeEventHandler(null, "closed", closed, e, args);
	                    });

	                    isClosed.subscribe(function () {
	                        element.loading("option", "isClosed", isClosed());
	                    });
	                }

	                return { 'controlsDescendantBindings': true };
	            }
	        };
	    }
	    var
	        _constant = {
	            //遮罩对应的class
	            OVERLAY_CLASS: "aui-loading-overlay",
	            //absolute对应的样式
	            ABSOLUTE_CLASS: "aui-loading-position-absolute",
	            //fixed对应的样式
	            FIXED_CLASS: "aui-loading-position-fixed",
	            //content区域的样式
	            CONTENT_CLASS: "aui-loading-content",
	            //content区域图片的样式
	            CONTENT_IMG_AREA_CLASS: "aui-loading-content-img-area",
	            //content文字区域的样式
	            CONTENT_MESSAGE_CLASS: "aui-loading-content-message"
	        };
	    $.widget("aui.loading", {
	        options: {
	            //获取或设置一个方法，该方法在loading关闭后触发
	            closed: $.noop,
	            //获取或设置一个值，该值表示loading的提示信息区域(string, element, jQuery)
	            content: null,
	            //获取或设置一个值，该值表示loading是否关闭
	            isClosed: true,
	            //获取或设置一个值，该值表示遮罩的透明度
	            opacity: null,
	            //获取或设置一个方法，该方法在loading显示后触发
	            opened: $.noop,
	            //获取或设置一个值，该值表示遮罩颜色
	            overlayColor: null,
	            //获取或设置一个值，该值表示控件的z-index
	            zIndex: 999,
	            //获取或设置一个值，该值表示loading的内容部件在居中之后的垂直偏移量
	            top: 0,
	        },
	        //获取或设置一个值，该值表示控件是否显示。
	        _isHidden: false,
	        //获取或设置一个值，该值表示loading控件是否是全局模式。
	        isGlobal: false,
	        //content区域对应的jQuery对象
	        $content: null,
	        //遮罩区域对应的jQuery对象
	        $overlay: null,
	        _create: function () {
	            this._initMembers()
	                ._createLoading()
	                ._loaded()
	                ._initEvent();
	        },
	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;
	            switch (key) {
	                case 'overlayColor':
	                    self._setOverlayColor(value);
	                    break;
	                case 'zIndex':
	                    self._setzIndex(value);
	                    break;
	                case 'opacity':
	                    self._setOpacity(value);
	                    break;
	                case 'isClosed':
	                    if (oldValue != value) {
	                        self._setIsClosed(value);
	                    }
	                    break;
	                case 'content':
	                    self._setContent(value);
	                    break;
	                case 'top':
	                    self._setTop(value);
	                    break;
	            }
	        },
	        //初始化成员
	        _initMembers: function () {
	            var
	                self = this,
	                options = self.options,
	                element = self.element;
	            element.is("body") && (self.isGlobal = true);

	            //兼容旧版本
	            options.overlayColor = options.loadingBackground || options.overlayColor;
	            options.opacity = options.loadingOpacity || options.opacity;
	            options.zIndex = options.loadingZIndex || options.zIndex;

	            return self;
	        },
	        //创建loading
	        _createLoading: function () {
	            var self = this;
	            self.element
	                .append(self._createContent())
	                .prepend(self._createOverlay());


	            return self;
	        },
	        //部件创建成功后触发
	        _loaded: function () {
	            var
	                self = this,
	                options = self.options,
	                element = self.element;

	            self.$content = element.children('div[class~="' + _constant.CONTENT_CLASS + '"]');
	            self.$overlay = element.children('div[class~="' + _constant.OVERLAY_CLASS + '"]');

	            self._setzIndex(options.zIndex);
	            self._setOverlayColor(options.overlayColor);
	            self._setOpacity(options.opacity);
	            self._setTop(options.top);
	            //默认值是false,如果初始化设置成true，触发show。
	            options.isClosed || self.show();
	            options.content != null && self._setContent(options.content);

	            return this;
	        },
	        //注册事件
	        _initEvent: function () {
	            var
	                self = this,
	                name = self.eventNamespace;
	            self.$content.on("keydown", self, self._onContentKeydown);
	            self.$overlay.on("keydown", self, self._onOverlayKeydown);
	            return this;
	        },
	        //创建遮罩
	        _createOverlay: function () {
	            var overlayClass = _constant.OVERLAY_CLASS;
	            if (this.isGlobal) {
	                overlayClass += " " + _constant.FIXED_CLASS;
	            } else {
	                overlayClass += " " + _constant.ABSOLUTE_CLASS;
	            }

	            return '<div tabindex="0" class="' + overlayClass + '"></div>';
	        },
	        //创建lcontent区域
	        _createContent: function () {
	            var
	                h = -1,
	                html = [],
	                contentClass = _constant.CONTENT_CLASS;
	            if (this.isGlobal) {
	                contentClass += " " + _constant.FIXED_CLASS;
	            } else {
	                contentClass += " " + _constant.ABSOLUTE_CLASS;
	            }

	            html[++h] = '<div tabindex="0" class="' + contentClass + '">';
	            //图片区域
	            //html[++h] = '<div class="' + _constant.CONTENT_IMG_AREA_CLASS + '">';
	            html[++h] = '<img class="' + _constant.CONTENT_IMG_AREA_CLASS + '" src="' + $$.path + '/image/loading.gif" />';
	            //html[++h] = '</div>';
	            //文字区域
	            //html[++h] = '<div class="' + _constant.CONTENT_MESSAGE_CLASS + '">' + $$.I18N.loading.loading + '</div>';

	            html[++h] = '</div>';

	            return html.join('');
	        },
	        //overlay区域按键按下时触发
	        _onOverlayKeydown: function (e) {
	            //Tab切换时，跃迁到content
	            if (e.keyCode == $.ui.keyCode.TAB && !e.shiftKey) {
	                e.preventDefault(); e.data.$content.focus();
	            }
	        },
	        //content区域按键按下时触发
	        _onContentKeydown: function (e) {
	            //Shift+Tab时，跃迁到overlay
	            if (e.keyCode == $.ui.keyCode.TAB && e.shiftKey) {
	                e.preventDefault();
	                e.data.$overlay.focus();
	            }
	        },
	        /**
	         * 设置overlay的背景色
	         * @param {string} 色值
	         */
	        _setOverlayColor: function (value) {
	            if (value != null) {
	                this.$overlay.css("backgroundColor", value);
	            }

	        },
	        /**
	         * 设置zIndex
	         * @param {number} zIndex
	         */
	        _setzIndex: function (value) {
	            var self = this;

	            self.$overlay.css("zIndex", value);
	            self.$content.css("zIndex", value);
	        },
	        /**
	         * 设置_setOpacity
	         * @param {number} 透明度
	         */
	        _setOpacity: function (value) {
	            if (value != null) {
	                this.$overlay.css("opacity", value);
	            }

	        },
	        /**
	         * 设置内容部件的垂直偏移量
	         * @param {number} 偏移量
	         */
	        _setTop: function (value) {
	            this.$content.css("top", value * 2);
	        },
	        /**
	         * 设置loading的信息提示区域
	         * @param {string | jQuery对象} value 内容区域的模板或者对应的jQuery对象
	         */
	        _setContent: function (value) {
	            this.$content.empty().append(value);
	        },
	        /**
	         * 设置显示状态
	         * @param {boolean} value 需要设置的显示状态
	         */
	        _setIsClosed: function (value) {
	            var self = this;

	            if (value) {
	                self.hide();
	            } else {
	                self.show();
	            }
	        },
	        //打开时触发
	        _onOpened: function () {
	            var self = this;
	            $$.executeEventHandler(self, "opened", self.options.opened, null, $$.Event({
	                element: self.element,
	            }));
	        },
	        //关闭时触发
	        _onClosed: function () {
	            var self = this;
	            $$.executeEventHandler(self, "closed", self.options.closed, null, $$.Event({
	                element: self.element,
	            }));
	        },
	        //打开loading
	        show: function () {
	            var self = this;
	            self.options.isClosed = false;
	            if (self.element.css("position") == "static") {
	                self._position = "static";
	                self.element.css("position", "relative");
	            }
	            self.$overlay.show();
	            self.$content.show();
	            self.$content.focus();
	            self._onOpened();
	        },
	        //关闭loading
	        hide: function () {
	            var self = this;
	            self.options.isClosed = true;
	            self.$overlay.hide();
	            self.$content.hide();
	            if (self._position == "static") {
	                self.element.css("position", "static");
	            }
	            self._onClosed();
	        },
	        //获取一个值，该值表示loading的显示情况(兼容旧版本API)
	        isHidden: function () {
	            return this.options.isClosed;
	        }
	    });
	})(AUI, jQuery);

/***/ },
/* 31 */
/***/ function(module, exports) {

	(function ($, undefined) {
	    "use strict";
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.messagebox = {
	            init: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).messagebox(value);
	            },
	            update: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).messagebox(value);
	            }
	        };
	    }
	    /**
		 * <p>将DIV元素转化为messagebox控件。messagebox控件提供info，warning，error三种模式类型，<p style="color:red">由于在开发过程中，单词可能存在拼写错误，所以取这三种类型的首字母，进行类型分类，分别为w, i, e, 不区分大小写。</p> 此控件的button区域完全自定义</p>
		 * 普通的messagebox的使用:

		var a = $("#messagebox").messagebox({
				buttons: {
				    "Delete all items": function () {
				       $(this).messagebox("hide");
				   },
				    "Cancel": function () {
				        $(this).messagebox("hide");
				    }
				    },
				   theme: {
				          "Delete all items": "red"
				     }
				});

		 *HTML内容：
		 

		<div id="messagebox" title="MessageBox" style="display: none;"> 
		    MessageBox
		</div>
		 
		 *可以使用show，hide方法控制messagebox的显示和隐藏：

		 $('#messagebox').messagebox("show");
		 $('#messagebox').messagebox("hide");
		 
		 * @class messagebox
		 * @constructor
		 * @author Bing.Han
	     * @requires <a href="button.html">aui.button.js</a>
	     * @requires <a href="messagebox.html">aui.messagebox.js</a>
	     * @requires <a href="overlay.html">aui.overlay.js</a>
	     * @requires <a href="messagebox.html">aui.messagebar.css</a>

	     *
		 * @param {Object} options 控件配置信息。
		 * @param {String} options.title  获取或设置标题。
		 * @param {String} options.content  获取或设置显示消息。
		 * @param {String} options.type  获取或设置类型，“i”，“w”，“e”,分别表示info，warning，error三种模式类型。默认i，info。
	     * @param {Boolean} options.closeOnEscape  获取或设置一个值，该值表示是否按Esc键退出，如果为true，表示按Esc键退出，反之，表示不能按Esc键退出。 默认为true。该值只有在控件初始化时设置有效。
	     * @param {Function} options.closeInTitleBar  获取或设置关闭图标时的回调事件。
		 * @param {String} options.height  获取或设置高度， 默认"auto"。
		 * @param {String} options.width   获取或设置宽度，默认420。
		 * @param {Object} options.buttons  获取或设置Button显示内容, 。
		 * @param {Object} options.theme  获取或设置Button样式，默认为white。
		 * @param {Number} options.zIndex  获取或设置控件z-index值，遮罩z-index比控件小1。
		 */



	    $.widget("aui.messagebox", {
	        options: {
	            title: "",
	            bodyScroll: true,
	            content: "",
	            closeText: "close",
	            closeOnEscape: true,
	            //获取或设置一个值，该值表示标题使用的class
	            titleClass: "",
	            closeInTitleBar: $.noop,
	            contentMaxheight: "auto",
	            contentMaxwidth: "auto",
	            height: "auto",
	            width: 500,
	            type: "i",
	            overlayOpacity: 0.25,
	            zIndex: 100,
	            buttons: {},
	            theme: {},
	            parameters: {},
	            shown: $.noop
	        },

	        // 获取相对图片的position
	        _getImgPosition: function (type) {
	            var pis = { w: "-64px", e: "-96px", i: "-128px" };
	            return pis[type.toLowerCase()] == undefined ? pis["i"] : pis[type.toLowerCase()];
	        },

	        _createButtons: function () {
	            var _self = this, options = this.options, hasButtons = false, buttons = options.buttons, parameters = options.parameters;

	            if (typeof buttons === "object" && buttons !== null) {
	                $.each(buttons, function () {
	                    return !(hasButtons = true);
	                });
	            }

	            if (hasButtons) {
	                $.each(buttons, function (name, props) {
	                    var button, click, buttonStyle = "white";
	                    props = $.isFunction(props) ? { click: props, text: name } : props;
	                    // Default to a non-submitting button
	                    props = $.extend({ type: "button" }, props);
	                    // Change the context for the click callback to be the main element
	                    click = props.click;
	                    props.click = function (e) {
	                        click.apply(_self.element[0], [e].concat($$.Event({
	                            element: _self.element,
	                            parameters: parameters[name]
	                        })));
	                    };
	                    button = $('<button></button>', props)
	                        .attr({
	                            role: 'button',
	                            ariaDisabled: false
	                        })
	                        .data("name", name)
	                        .addClass("button")
	                        .appendTo(_self.uiButtonSet);
	                    $.each(options.theme, function (x, style) {
	                        if (x == name) {
	                            buttonStyle = style;
	                            return;
	                        }
	                    });
	                    if ($(button).button) {
	                        $(button).button({
	                            disabled: false,
	                            theme: buttonStyle
	                        }).css('margin-left', '10px');
	                    }
	                });
	                this.uiDialog.addClass("aui-messagebox-buttons");
	                this.uiDialogButtonPane.appendTo(this.uiDialog);
	            } else {
	                this.uiDialog.removeClass("aui-messagebox-buttons");
	            }
	        },

	        _create: function () {
	            this.originalTitle = this.element.attr("title");
	            if (typeof this.originalTitle !== "string") {
	                this.originalTitle = "";
	            }

	            this.oldPosition = {
	                parent: this.element.parent(),
	                index: this.element.parent().children().index(this.element)
	            };

	            this.options.title = this.options.title || this.originalTitle;
	            var that = this, options = this.options, title = options.title || "&#160;";

	            var uiDialog, uiDialogTitlebar, uiDialogIcon, uiDialogContent, uiDialogTitlebarClose, uiDialogTitle, uiDialogButtonPane;


	            uiDialogIcon = (this.uiDialogIcon = $("<div>").addClass("aui-messagebox-content-pic-img"))
	                            .append($('<span class="fi-round-infor-a image-larger "></span>')
	                .addClass("aui-messagebox-content-img").css({ "left": that._getImgPosition(options.type), "top": "-24px" }));
	            if (options.content) {
	                this.element.html(options.content);
	            }
	            uiDialog = (this.uiDialog = ((this.element.show()
	                                .removeAttr("title").wrap("<div></div>").addClass("aui-messagebox-content-div").css({
	                                    'max-height': options.contentMaxheight,
	                                    'max-width': options.contentMaxwidth
	                                })
	                                .before(uiDialogIcon)
	                                .parent().addClass("aui-messagebox-content")

	                             ).wrap("<div></div>")).parent()
	                    .addClass("aui-messagebox")
	                    .css({
	                        display: "none",
	                        // outline: 0, // TODO: move to stylesheet
	                        zIndex: options.zIndex,
	                        width: options.width,
	                        height: options.height,
	                    })
	                    .attr("tabindex", 0)
	                    .keydown(function (event) {
	                        if (options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
	                                event.keyCode === $.ui.keyCode.ESCAPE) {
	                            that.hide(event);
	                            that._trigger("closeInTitleBar", null, $$.Event({
	                                element: self.element
	                            }));
	                            event.preventDefault();
	                        }
	                    }));

	            if (options.type == "n" || options.type == "d") {
	                this.element.parent().addClass("aui-messagebox-content-type-n");
	                this.element.css({ 'margin-left': '0px' });
	            }
	            uiDialogTitlebar = (this.uiDialogTitlebar = $("<div>"))
					.addClass("aui-messagebox-titlebar" + " " + this.options.titleClass)
	                .bind("mousedown", function () {
	                    uiDialog.focus();
	                })
					.prependTo(uiDialog);

	            uiDialogTitlebarClose = $("<div tabindex='0' role='button'></div>")
					.addClass("aui-messagebox-titlebar-close")
					.click(function (event) {
					    that._trigger("closeInTitleBar", null, $$.Event({
					        element: self.element
					    }));
					    that.hide();

					    event.preventDefault();
					}).keydown(function (event) {
					    if (event.keyCode === $.ui.keyCode.ENTER) {
					        that.hide(event);
					        that._trigger("closeInTitleBar", null, $$.Event({
					            element: self.element
					        }));
					        event.preventDefault();
					    }
					})
	                //.hover(function () {
					//    $(this).find("div").addClass("aui-messagebox-icon-closethick-hover");
					//}, function () {
					//    $(this).find("div").removeClass("aui-messagebox-icon-closethick-hover");
					//})
	                //.on("mouseenter", function () {
					//    $(this).find("img").addClass("aui-messagebox-icon-closethick-down");
					//}).on("mouseleave", function () {
					//    $(this).find("img").removeClass("aui-messagebox-icon-closethick-down");
					//})
	                .append($("<span style='display:none;'></span>").text(options.closeText))
					.appendTo(uiDialogTitlebar);

	            (this.uiDialogTitlebarCloseText = $("<div class='aui-messagebox-icon-closethick fi-close-bs' aria-span='closebutton'></div>"))
					.appendTo(uiDialogTitlebarClose);

	            this.uiDialogTitle = uiDialogTitle = $("<span>")
					.uniqueId()
					.addClass("aui-messagebox-title")
					.html(title)
					.prependTo(uiDialogTitlebar);

	            //if (options.type != "d") {
	            //    uiDialogTitlebarClose.hide();
	            //}
	            if (options.type == "d") {
	                uiDialogTitlebarClose.css({ "color": "#aaeeaa" });
	            }
	            if (options.type != "d") {
	                uiDialogTitlebar.css({
	                    "background-color": "inherit",
	                    "color": "inherit"
	                });
	            }

	            uiDialogButtonPane = (this.uiDialogButtonPane = $("<div>"))
					.addClass("aui-messagebox-buttonpane");

	            (this.uiButtonSet = $("<div>"))
					.addClass("aui-messagebox-buttonset")
					.appendTo(uiDialogButtonPane);

	            uiDialog.attr({
	                role: "dialog",
	                "aria-describedBy": this.element.attr("id"),
	                "aria-labelledby": uiDialogTitle.attr("id")
	            });

	            uiDialogTitlebar.find("*").add(uiDialogTitlebar).disableSelection();

	            this._createButtons();

	            this._on(uiDialog, {
	                keydown: function (event) {
	                    if (event.keyCode !== $.ui.keyCode.TAB) {
	                        return;
	                    }

	                    var tabbables = $(":tabbable", uiDialog),
	                        first = tabbables.filter(":first"),
	                        last = tabbables.filter(":last");

	                    if (event.target === last[0] && !event.shiftKey) {
	                        first.focus(1);
	                        return false;
	                    } else if (event.target === first[0] && event.shiftKey) {
	                        last.focus(1);
	                        return false;
	                    }
	                },
	                resize: function () {
	                    this.setPosition();
	                }
	            });
	            this._on($(window), {
	                resize: function () {
	                    this.setPosition();
	                }
	            });
	            this._setType("i", this.options.type);
	        },

	        _init: function () {

	        },

	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;

	            switch (key) {
	                case 'content':
	                    self._setContent(value);
	                    break;
	                case 'title':
	                    self._setTitle(value);
	                    break;
	                case 'closeInTitleBar':
	                    if ($.isFunction(value)) {
	                        self.options.closeInTitleBar = value;
	                    }
	                    break;
	                case 'type':
	                    self._setType(oldValue, value);
	                    break;
	                case 'buttons':
	                    self._setButton(value);
	                    break;
	            }
	        },
	        //设置标题
	        _setTitle: function (value) {
	            this.uiDialogTitle.html(value);
	        },
	        //设置内容
	        _setContent: function (value) {
	            this.element.html(value);
	        },
	        _setButton: function (value) {
	            var btns = this.uiDialogButtonPane;
	            $.each(value, function (k, v) {
	                btns.find("span.ui-button-text").filter(function () {
	                    return $(this).parent().data("name").toLowerCase() == k.toLowerCase();
	                }).text(v);
	            })
	        },
	        _getIcon: function (value) {
	            switch (value) {
	                case 'e':
	                    value = 'fi-round-error-a text-red';
	                    break;
	                case 'q':
	                    value = 'fi-round-question-a text-blue';
	                    break;
	                case 'w':
	                    value = 'fi-warning-a text-orange';
	                    break;
	                case 'n':
	                case 'd':
	                    value = '';
	                    break;
	                default:
	                    value = 'fi-round-infor-a text-blue';
	                    break;
	            }

	            return value;
	        },
	        _setType: function (old, value) {
	            this.uiDialogIcon.children()
	                .removeClass(this._getIcon(old))
	                .addClass(this._getIcon(value));
	        },
	        _trigger: function (type, event, args) {
	            var self = this;


	            if (args) {
	                args.parameters = self.options.parameters[type] || {};
	                args.type = "messagebox";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        _destroy: function () {
	            var next, oldPosition = this.oldPosition;
	            if (this.overlay) {
	                this.overlay.off();
	                $("body").overlay("hide");
	            }
	            this.uiDialog.hide();
	            this.element
				.removeClass("aui-messagebox-content")
				.hide()
				.appendTo("body");
	            this.uiDialog.remove();

	            if (this.originalTitle) {
	                this.element.attr("title", this.originalTitle);
	            }
	            self._trigger("destroy", null, $$.Event({
	                element: self.element
	            }));

	            next = oldPosition.parent.children().eq(oldPosition.index);
	            if (next.length && next[0] !== this.element[0]) {
	                next.before(this.element);
	            } else {
	                oldPosition.parent.append(this.element);
	            }
	        },
	        getOverlay: function () {
	            return this.overlay;
	        },
	        setPosition: function () {
	            if (!this.uiDialog.is(":visible")) return false;
	            var win = $(window),
	                _top = (win.height() - this.uiDialog.height()) / 2;
	            this.uiDialog.css("left", ((win.width() - this.uiDialog.width()) / 2));
	            if (this.uiDialog.css("top") != _top) {
	                this.uiDialog.css("top", _top);
	            }
	            if (this.uiDialog.outerHeight() > document.documentElement.clientHeight) {
	                var $content = this.uiDialog.find(".aui-messagebox-content").eq(0);
	                $content.css("overflow-y", "scroll");
	                $content.css("height", $content.outerHeight() - this.uiDialog.outerHeight() + document.documentElement.clientHeight);
	            }
	        },
	        /**
			 * 显示messagebox控件。
			 * @method show
			 */
	        show: function () {
	            var self = this, win = $(window);
	            var el_overlay = $("body .aui-overlay:visible").not(".aui-overlay-display-none");
	            if (el_overlay.length == 0) {
	                this.overlay = $("body").overlay({
	                    enabledElement: self.uiDialog,
	                    overlayOpacity: self.options.overlayOpacity,
	                    overlayZIndex: +self.options.zIndex - 1
	                });
	                $("body").overlay("show", +self.options.zIndex - 1);
	            } else {
	                var _el = self.getOtherMsg(self.element);
	                this.overlay = _el.overlay();
	                try {
	                    _el[0].style.position = "";
	                } catch (e) { }
	                var z_index = self.options.zIndex;
	                $("*:visible").filter(function () { return this.style.zIndex }).each(function () {
	                    if (this.style.zIndex < 200) z_index = Math.max(z_index, this.style.zIndex);
	                });
	                _el.overlay("show", z_index + 1);
	                this.uiDialog.css("z-index", z_index + 2);
	            }
	            this.uiDialog.css("visibility", "hidden").show();
	            this._disableScroll("add");
	            this.setPosition();
	            this.uiDialog.css("visibility", "visible");
	            setTimeout(function () {
	                self.uiDialog.focus(1);
	            }, 200);
	            this._trigger("shown", null, $$.Event({
	                element: self.element
	            }));

	            //  self.uiDialog.focus();
	        },
	        /**
			 * 隐藏messagebox控件。
			 * @method hide
			 */
	        hide: function () {
	            var self = this;
	            this.uiDialog.hide();//.css({ top: 0, left: 0 });
	            if ($(".aui-messagebox:visible").length == 0) {
	                $("body").overlay("hide");
	            } else {
	                self.getOtherMsg(self.element).overlay("hide");
	            }
	            if ($(".aui-messagebox:visible").length == 0) this._disableScroll("remove");
	        },
	        /**
	         * 获取当前显示的其他messagebox。
	         */
	        getOtherMsg: function (element) {
	            var _current = element.closest(".aui-messagebox"),
	                _el = $(".aui-messagebox:visible").not(_current);
	            if (_el.length == 0) _el = $(".aui-dialog:visible").not(_current);
	            if (_el.length > 1) {
	                _el = _el.eq(0);
	                console.warn("Current visible Messagebox.length>1,Place chect it,Any question connect gui");
	            }
	            return _el;
	        },
	        /*
	         * disable body scroll
	         */
	        _disableScroll: function (type) {
	            if (!this.options.bodyScroll) {
	                var _width = $("body").outerWidth(true);
	                eval('$("html").' + type + 'Class("dialog-open")');
	                $("body").css("padding-right", parseFloat($("body").css("padding-right")) + $("body").outerWidth(true) - _width);
	            }
	        }
	    });

	})(jQuery);

/***/ },
/* 32 */
/***/ function(module, exports) {

	(function ($) {
	    "use strict";
	    var
		    uuid = -1,
	        _constant = {
	            MULTICOMBOBOX_CLASS: 'aui-multicombobox',
	            INPUT_CLASS: 'aui-multicombobox-input',
	            DROPDOWN_CLASS: 'aui-multicombobox-dropdown',
	            ICON_DROPDOWN: 'fi-triangle-down-bs',
	            POPUP_CLASS: 'aui-multicombobox-popup',
	            NO_MATCH_CLASS: 'aui-multicombobox-nomatch',
	            LISTBOX_CLASS: 'aui-multicombobox-listbox',
	            SELECTION_ITEM_CLASS: 'aui-multicombobox-selection-item',
	            SELECTION_LABEL_CLASS: 'aui-multicombobox-selection-span',
	            MOUSEENTER_CLASS: 'aui-multicombobox-mouseenter',
	            BUTTON_AREA_CLASS: 'aui-multicombobox-button-area',
	            SELECT_ALL_CLASS: 'aui-multicombobox-select-all'
	        };

	    $.widget("aui.multicombobox", {
	        inputId: 'aui-multicombobox-input-',
	        dropdownId: 'aui-multicombobox-dropdownId-',
	        popupId: 'aui-multicombobox-popup-',
	        listboxId: 'aui-multicombobox-listbox-',
	        selectAllId: 'aui-multicombobox-selectall-',
	        okId: 'aui-multicombobox-ok-',
	        cancelId: 'aui-multicombobox-cancel-',
	        options: {
	            width: 220,
	            height: 38,
	            popupWidth: null,
	            dataCheckedField: null,
	            dataTextField: null,
	            dataDynamicField: null,
	            hasSelect: false,
	            hasFilter: false,
	            noneText: $$.I18N.multicombobox.none,
	            allText: $$.I18N.multicombobox.allText,
	            selectAllText: $$.I18N.multicombobox.selectAllCheckbox,
	            selectedItemsTemplate: $$.I18N.multicombobox.selectedXItems,
	            selectedItemTemplate: $$.I18N.multicombobox.selectedXItem,
	            //获取或设置一个方法，该方法在选中项更改时触发。
	            selectionChanged: $.noop,
	        },
	        _create: function () {
	            this._initMember()
					._createMulticombobox()
	                ._loaded()
	                ._initEvent()
	        },
	        _setOption: function (key, value) {

	        },
	        _initMember: function () {
	            this._checkRequired();
	            this._initId();

	            this._items = [];
	            this._textName = this.options.dataTextField;
	            this._checkName = this.options.dataCheckedField;
	            this._dynamicName = this.options.dataDynamicField;

	            this.$body = $("body");
	            this.element.addClass(_constant.MULTICOMBOBOX_CLASS);

	            return this;
	        },
	        _checkRequired: function () {
	            if (typeof this.options.dataCheckedField != "string" || !this.options.dataCheckedField) {
	                $.error('dataCheckedField is undefined');
	            }
	            if (typeof this.options.dataTextField != "string" || !this.options.dataTextField) {
	                $.error('dataTextField is undefined');
	            }
	        },
	        _initId: function () {
	            ++uuid;

	            this.inputId += uuid;
	            this.dropdownId += uuid;
	            this.popupId += uuid;
	            this.listboxId += uuid;
	            this.selectAllId += uuid;
	            this.okId += uuid;
	            this.cancelId += uuid;
	        },
	        _createMulticombobox: function () {
	            var
					h = -1,
					html = [];
	            var _readonly = "";
	            if (!this.options.hasFilter) _readonly = 'readonly="true"  aria-readonly="true"';
	            html[++h] = '<input id="' + this.inputId + '" class="' + _constant.INPUT_CLASS + '" type="text" ' + _readonly + ' aria-autocomplete="none" />';
	            html[++h] = '<div id="' + this.dropdownId + '" unselectable="on" class="' + _constant.DROPDOWN_CLASS + ' ' + _constant.ICON_DROPDOWN + '" ></div>';

	            this.element.html(html.join(''));

	            this.$body.append(this._createPopup());

	            return this;
	        },
	        _createPopup: function () {
	            var
					h = -1,
					html = [];

	            html[++h] = '<div data-bind="stopBindings:multicombobox">';
	            html[++h] = '<div class="' + _constant.POPUP_CLASS + '" id="' + this.popupId + '">';

	            html[++h] = '<div class="' + _constant.NO_MATCH_CLASS + '">No matches found.</div>';
	            html[++h] = '<span class="' + _constant.SELECTION_LABEL_CLASS + ' ' + _constant.SELECT_ALL_CLASS + '">';
	            html[++h] = '<input id="' + this.selectAllId + '" type="checkbox" />';
	            html[++h] = '<span>' + this.options.selectAllText + '</span>';
	            html[++h] = '</span>';

	            //list
	            html[++h] = '<div class="' + _constant.LISTBOX_CLASS + '" id="' + this.listboxId + '" role="listbox"  >';
	            html[++h] = '</div>';

	            //button
	            html[++h] = '<div class="' + _constant.BUTTON_AREA_CLASS + '">';
	            html[++h] = '<button style="margin-top:8px;margin-right:5px;" id="' + this.okId + '" type="button" class="button-theme button-sm">OK</button>';
	            html[++h] = '<button style="margin-top:8px;margin-right:6px" id="' + this.cancelId + '" type="button" class="button button-sm">Cancel</button>';
	            html[++h] = '</div>';

	            html[++h] = '</div>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        _loaded: function () {

	            this.$input = this.element.children('#' + this.inputId);
	            this.$dropdown = this.element.children('#' + this.dropdownId);

	            this.$popup = this.$body.find('#' + this.popupId);
	            this.$listbox = this.$popup.children('#' + this.listboxId);
	            this.$selectAll = this.$popup.find("#" + this.selectAllId);
	            this.$ok = this.$popup.find("#" + this.okId);
	            this.$cancel = this.$popup.find("#" + this.cancelId);

	            //设置高度
	            //if (this.options.height == null) {
	            //    this.options.height = 38;
	            //}
	            this._setWidth()
					._setHeight()
					._setPopupWidth();

	            this._updatePopupPosition();

	            return this;
	        },
	        _initEvent: function () {
	            $$.close(this.element, "multicombobox", "hide");

	            this.$input
					.on("mousedown", this, this._onContentMousedown)
					.on("mouseenter", this, this._onContentMouseEnter)
					.on("mouseleave", this, this._onContentMouseLeave)
					.on("keydown", this, this._onContentKeydown)
					.on('click', this, this._onContentClick)
	                .on('focus', this, this._onContentFocus)
	                .on('input propertychange', this, this._onContentChange);

	            this.$dropdown
	                .on("click", this, this._onDropdownClick)
	                .on("mousedown", this, this._onContentMousedown)
					.on("mouseleave", this, this._onContentMouseLeave)
	                .on("mouseenter", this, this._onContentMouseEnter);

	            this.$popup
					.on("mousedown", this, this._onselectionMouseDown)
					.on("mousewheel", this, function (e) {
					    var e = e || event;
					    var _this = $(this).children(".aui-multicombobox-listbox")[0],
	                        _hasScroll = _this.scrollHeight > _this.clientHeight || _this.offsetHeight > _this.clientHeight,
	                        _scrollTop = _this.scrollTop <= 0 && e.deltaY > 0,
	                        _scrollBottom = _this.scrollTop >= _this.scrollHeight - _this.offsetHeight && e.deltaY < 0,
	                        _scrollEnd = _hasScroll && (_scrollTop || _scrollBottom),
	                        _inPopup = $(e.target).closest(this).length > 0 && $(e.target).closest(_this).length == 0;
					    if (!_hasScroll || _scrollEnd || _inPopup) {
					        e.preventDefault();
					    }
					    $$.closeExcept(e.data.element, true);
					});

	            this.$listbox


	            this.$selectAll.on('click', this, this._onSelectAllClick);
	            this.$ok.on('click', this, this._onOKClick);
	            this.$cancel.on('click', this, this._onCancelClick);

	            return this;
	        },
	        //更新popup部件的位置
	        _updatePopupPosition: function () {
	            var
	                self = this,
	                my = "left top+";
	            my = my + self.element.height();
	            self.$popup.position({
	                my: my,
	                at: "left top+2",
	                of: self.element,
	                collision: "flipfit flipfit",
	                within: self.options.within
	            });
	        },
	        //窗体大小改变时触发
	        _onWindowResize: function (e) {
	            e.data._updatePopupPosition();
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            if (args) {
	                args.type = "multicombobox";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        _setWidth: function () {
	            this.element.width(this.options.width);
	            this.$input.width(this.element.width() - 22);

	            return this;
	        },
	        _setHeight: function () {
	            var height = this.options.height;
	            this.element.height(height);
	            height -= 2;
	            this.$input.height(height);

	            return this;
	        },
	        _setPopupWidth: function () {
	            if (this.options.popupWidth) {
	                this.$popup.width(this.options.popupWidth)
	            } else {
	                this.$popup.width(this.element.width());
	            }

	            return this;
	        },
	        _hide: function () {
	            this._isOpened = false;
	            $$.closeVisibility(this.element, false);
	            this.$input.attr("aria-expanded", false).focus();
	            this.$popup.hide();
	            if (!this._isCancel) {
	                this._onSelectionChanged();
	            } else {
	                this._cancel();
	            }
	        },
	        _checkedAssert: function (item) {
	            return item[this._checkName] == true;
	        },
	        _onSelectionChanged: function () {
	            var self = this;
	            this._updateContent();

	            function filterValue(items) {
	                return items.filter(function (item) {
	                    return item[self._checkName] == true;
	                });
	            }
	            function getSelectAll(items) {
	                return filterValue(items) ? filterValue(items).length == items.length : false;
	            }
	            this._trigger("selectionChanged", null, $$.Event({
	                element: self.element,
	                newValue: {
	                    isSelectAll: getSelectAll(self._items),
	                    items: filterValue(self._items)
	                },
	                oldValue: {
	                    isSelectAll: getSelectAll(self._old),
	                    items: filterValue(self._old)
	                }
	            }));
	        },
	        _updateContent: function () {
	            var
					i = 0,
					items = this._items,
					count = 0,
					text,
					c = items.length;

	            for (; i < c; i++) {
	                if (items[i][this._checkName]) {
	                    ++count;
	                }
	            }

	            if (count == 0) {
	                text = this.options.noneText;
	            } else if (count == c) {
	                text = this.options.allText;
	            } else if (count == 1) {
	                text = this.options.selectedItemTemplate.format(count);
	            } else {
	                text = this.options.selectedItemsTemplate.format(count);
	            }

	            this.$input.val(text);
	        },
	        _updateCheckbox: function () {
	            var
					i = 0,
					items = this._items,
					c = items.length;

	            for (; i < c; i++) {
	                this.$checkboxes[i].prop("checked", items[i][this._checkName]);
	            }

	        },
	        _cancel: function () {
	            $.extend(true, this._items, this._old);
	            this._updateCheckbox();
	            this.$selectAll.prop('checked', this._allChecked);
	        },
	        _show: function () {
	            var index = this.options.selectedIndex;

	            this._isCancel = true;
	            this._isOpened = true;
	            this._old = [];
	            this._allChecked = this.$selectAll.prop('checked');

	            $.extend(true, this._old, this._items);
	            $$.closeVisibility(this.element, true);

	            this.$popup.show();
	            this.$listbox.scrollLeft(0);
	            this._updatePopupPosition();
	            this.$input.focus();
	            this.$input.attr("aria-expanded", true);
	        },
	        _onItemsSourceChanged: function (src) {
	            var
					i,
					c = src.length,
					l = this._items.length;

	            this._items = src;
	            if (l < c) {
	                var h = -1, html = [];
	                //添加新项
	                for (; l < c; l++) {
	                    html[++h] = '<span class="' + _constant.SELECTION_ITEM_CLASS + ' ' + _constant.SELECTION_LABEL_CLASS + '">';
	                    html[++h] = '<input type="checkbox" />';
	                    html[++h] = '<span></span>';
	                    html[++h] = '</span>';
	                }
	                this.$listbox.append(html.join(''));

	            } else if (l > c) {
	                //删除多余的项
	                for (i = c; i < l; i++) {
	                    $(this.$selection[i]).empty().remove();
	                }
	            }
	            this.$selection = this.$listbox.children('.' + _constant.SELECTION_ITEM_CLASS);

	            this.$checkbox = this.$selection.find('input')
	                .off()
					.on("click", this, this._onCheckboxClick);
	            this.$checkboxes = [];
	            this.$text = this.$selection.find('span');

	            //更新值
	            for (i = 0; i < c; i++) {
	                this.$checkboxes[i] = $(this.$checkbox[i]);
	                this.$checkboxes[i]
						.data("index", i)
						.prop("checked", src[i][this._checkName])
	                    .prop("disabled", src[i][this._dynamicName]);
	                this.$text[i].innerText = src[i][this._textName];
	            }
	            this._checkSelectAll();
	            this._updateContent();
	        },
	        _onDropdownClick: function (e) {
	            var self = e.data;
	            self.$input.focus();
	            if (self.options.disabled === false) {
	                if (self._isOpened) {
	                    self._hide();
	                } else {
	                    self._show();
	                }
	            }
	            self._isContentMouseDown = false;
	        },
	        _onContentMouseEnter: function (e) {
	            var self = e.data;
	            if (self.options.disabled === false) {
	                self.element.addClass(_constant.MOUSEENTER_CLASS);
	            }
	        },
	        _onContentMouseLeave: function (e) {
	            var self = e.data;
	            self.element.removeClass(_constant.MOUSEENTER_CLASS);
	            //self._isContentMouseDown = false;
	        },
	        _onContentKeydown: function (e) {
	            var self = e.data;
	            if (self.options.disabled === false) {
	                switch (e.which) {
	                    case $.ui.keyCode.ENTER:
	                        self._onElementEnter();
	                        break;
	                    case $.ui.keyCode.LEFT:
	                    case $.ui.keyCode.RIGHT:
	                    case $.ui.keyCode.DOWN:
	                    case $.ui.keyCode.UP:
	                        e.preventDefault();
	                        break;
	                }
	            }
	        },
	        _onElementEnter: function () {
	            if (this._isOpened) {
	                this._hide();
	            } else {
	                this._show();
	            }
	        },
	        _onContentMousedown: function (e) {
	            var self = e.data;

	            $$.closeExcept(self.element, true);
	        },
	        _onContentClick: function (e) {
	            var self = e.data;
	            if (self.options.disabled === false) {
	                if (self._isOpened) {
	                    self._hide();
	                } else {
	                    self._show();
	                }
	            }
	            return self;
	        },
	        _onContentFocus: function (e) {
	            var self = e.data;
	            if (self.options.hasFilter) {
	                if (!!this.value) {
	                    $(this).select();
	                } else {
	                    self._onContentChange.apply(self.$input, [e]);
	                }
	            }
	        },
	        _onContentChange: function (e) {
	            var self = e.data,
	                _value = !!this.value ? this.value : "",
	                matches = 0;
	            if (!self.options.hasFilter) return false;

	            self.$text.each(function () {
	                if ($(this).text().indexOf(_value) != -1) {
	                    matches++;
	                    $(this).parent().show();
	                } else {
	                    $(this).parent().hide();
	                }
	            });
	            
	            var $nomatch = self.$popup.children('.' + _constant.NO_MATCH_CLASS);
	            if (matches == self.$text.length) { //all
	                $nomatch.hide().siblings().show();
	            } else if (matches == 0) { // no match
	                $nomatch.show().siblings().hide();
	            } else { //has match but not all
	                self.$selectAll.parent().hide();
	            }
	        },
	        _onselectionMouseDown: function (e) {
	            e.stopPropagation();
	            e.preventDefault();
	        },
	        _onSelectAllClick: function (e) {
	            var
					i = 0,
					self = e.data,
					c = self._items.length,
					checked = self.$selectAll.prop('checked');

	            for (; i < c; i++) {
	                if (!self._items[i][self._dynamicName]) {
	                    self.$checkbox.eq(i).prop('checked', checked);
	                    self._items[i][self._checkName] = checked;
	                }
	            }
	            self._checkHasSelect();
	        },
	        _checkSelectAll: function () {
	            var
					i = 0,
					count = 0,
					items = this._items,
					c = items.length;

	            for (; i < c; i++) {
	                if (items[i][this._checkName] == true) {
	                    count++;
	                }
	            }

	            if (count == c) {
	                //select All
	                this.$selectAll.prop("checked", true);
	            } else {
	                this.$selectAll.prop("checked", false);
	            }
	        },
	        _onCheckboxClick: function (e) {
	            var
					self = e.data,
					current = $(e.target),
					i = current.data('index'),
					index;

	            self._items[i][self._checkName] = current.prop("checked");

	            if (current.prop("checked")) {
	                self._checkSelectAll();
	            } else {
	                self.$selectAll.prop("checked", false);
	            }

	            self._checkHasSelect();
	        },
	        _onOKClick: function (e) {
	            var self = e.data;
	            self._isCancel = false;
	            self._hide();
	        },
	        _onCancelClick: function (e) {
	            var self = e.data;
	            self._isCancel = true;
	            self._hide();
	        },
	        //检查是否有选中项
	        _checkHasSelect: function () {
	            var self = this,
	                opt_check = self.options.hasSelect,
	                checkName = self._checkName;
	            if (!opt_check) return false;

	            function getSelect(items) {
	                var self = this,
	                    _hasSelect = false;
	                $.each(items, function (index, obj) {
	                    _hasSelect = obj[checkName] || _hasSelect;
	                })
	                return _hasSelect;
	            }

	            if (getSelect(self._items)) {
	                self.$ok.removeAttr("disabled");
	            } else if (!getSelect(self._items)) {
	                self.$ok.attr("disabled", "disabled");
	            }
	        },
	        //关闭可选项区域
	        hide: function () {
	            var self = this;
	            if (self._isOpened) {
	                self._hide();
	            }

	        },
	        selectedItems: function () {
	            var self = this;
	            return this._items.filter(function (item) {
	                return item[self._checkName] == true;
	            });
	        },
	        itemsSource: function (src) {
	            if ($.isArray(src) && src.length >= 0) {
	                this._onItemsSourceChanged(src);
	            } else {
	                return this._items;
	            }
	        }
	    });
	})(jQuery);

/***/ },
/* 33 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author thchen
	 * @fileoverview numericbox控件
	 */
	(function ($, $$) {
	    /**
		 * <p>用于生成一个numericbox控件，该控件显示一个数值，用户可通过单击控件的按钮来增加或减少该数值。  </p>
	     *  一个简单的numericbox控件实例：

	     var num=$('#numericbox').numericbox({
	        minValue:10,
	        maxValue:60,
	     });

	     * HTML代码：

	     <div id="numericbox"></div>

		 * @class numericbox
		 * @constructor 
	     * @author Tianhui.Chen
		 * @param {Object} options 控件配置信息。
		 * @param {Number} options.value 获取或设置默认显示的数值。
		 * @param {Number} options.minValue 获取或设置数值的最小值。
		 * @param {Number} options.maxValue 获取或设置数值的最大值。
		 * @param {Boolean} options.disabled 获取或设置一个值，该值指示控件是否可用。如果为true控件不可用，否则控件可用。
		 * @param {String} options.width 获取或设置控件的宽度。 	 
		 */
	    $.widget("aui.numericbox", {
	        options: {
	            value: 0,
	            minValue: 0,
	            maxValue: 100,
	            disabled: false,
	            width: 40,
	            contentChanged: $.noop,
	            keyDown: $.noop,
	            height: 20,
	            mode: 'right'
	        },
	        _create: function () {
	            var self = this, options = self.options, element = self.element;
	            self._constant();
	            element.append(self._containerDiv);
	            self._containerDiv.width(options.width).height(options.height);
	            self._content.width(parseInt(options.width) - 15).height(options.height);
	            self._upDiv.append(self._upButton);
	            self._downDiv.append(self._downButton);
	            self._containerDiv.append(self._upDiv).append(self._content).append(self._downDiv);
	            self._setDataBinding(self);
	            self._upButton.repeatbutton({
	                isTabStop: false
	            });
	            self._downButton.repeatbutton({
	                isTabStop: false
	            });
	            self.disabled(options.disabled);
	        },
	        _init: function () {
	            var self = this, options = self.options, element = self.element;
	            self._upButton.find('img').addClass('aui-numericbox-up-mouseover');
	            self._downButton.find('img').addClass('aui-numericbox-down-mouseover');
	            self._upButton.find('img').addClass('aui-numericbox-up-mousedown');
	            self._downButton.find('img').addClass('aui-numericbox-down-mousedown');
	            // init event
	            self._containerDiv.on("keydown" + self.eventNamespace, self, self._method.keyDown);
	            self._content.on("keypress" + self.eventNamespace, self, self._method.contentKeyPress).on("change" + self.eventNamespace, self, self._method.contentChange);
	        },
	        _destroy: function () {
	            this._content.off(this.eventNamespace);
	            this.element.empty();
	        },
	        _setOption: function (key, value) {
	            var self = this, element = self.element, options = self.options;
	            this.options[key] = value;
	            switch (key) {
	                case "maxValue":
	                    this.bindingData.maxValue(value);
	                    break;
	                case "minValue":
	                    this.bindingData.minValue(value);
	                    break;
	                case "value":
	                    this.bindingData.value(value);
	                    this._content.attr('aria-span', value);
	                    break;
	                case "mode":
	                    this._changeMode();
	                    break;
	                case "disabled":
	                    self.bindingData.disabled(value);
	                    self._containerDiv.attr("disabled", value).addClass("aui-numericbox-container-disabled");
	                    if (value) {
	                        self._containerDiv.addClass("aui-numericbox-container-disabled");
	                    } else {
	                        self._containerDiv.removeClass("aui-numericbox-container-disabled");
	                    }
	                    self.element.attr("disabled", value);
	                    break;
	            }
	        },
	        _changeMode: function () {
	            var self = this;
	            if (self.options.mode == 'updown') {
	                self._upButton.children('img').hide();
	                self._downButton.children('img').hide();
	                self._upButton.children('div[class~=aui-numericbox-arrow-up]').show();
	                self._downButton.children('div[class~=aui-numericbox-arrow-down]').show();
	                self._containerDiv
	                    .css('borderWidth', 0)
	                    .addClass('aui-numericbox-container-updown')
	                    .attr('tabIndex', -1);

	                self._upDiv.addClass('aui-numericbox-up-div-updown');
	                self._content.addClass('aui-numericbox-content-updown');
	                self._downDiv.addClass('aui-numericbox-down-div-updown');

	            } else {
	                self._upButton.children('div[class~=aui-numericbox-arrow-up]').hide();
	                self._downButton.children('div[class~=aui-numericbox-arrow-down]').hide();
	                self._upButton.children('img').show();
	                self._downButton.children('img').show();
	                self._containerDiv
	                    .css('borderWidth', 1)
	                    .removeClass('aui-numericbox-container-updown')
	                    .attr('tabIndex', 0);

	                self._upDiv.removeClass('aui-numericbox-up-div-updown');

	                self._content.removeClass('aui-numericbox-content-updown');
	                self._downDiv.removeClass('aui-numericbox-down-div-updown');
	            }
	        },
	        _constant: function () {
	            var self = this;
	            self._containerDiv = $('<div tabindex="0"></div>').addClass("aui-numericbox-container aui-numericbox-mouseover");
	            self._content = $('<input role="spinbutton" hidefocus=true tabindex="0" type="text" data-bind="disable:disabled,value:value,valueUpdate: \'afterkeydown\'"/>').addClass("aui-numericbox-content");
	            self._upDiv = $('<div></div>').addClass("aui-numericbox-up-div");
	            self._downDiv = $('<div></div>').addClass("aui-numericbox-down-div");
	            self._upButton = $('<div data-bind="disable:disabled,click:upClick"><div class="aui-numericbox-arrow-up"></div><img  class="aui-numericbox-up" alt="" src="' + $$.path + '/image/numerictextbox.png"/></div>').addClass("aui-numericbox-ImgContainer");
	            self._downButton = $('<div data-bind="disable:disabled,click:downClick"><div class="aui-numericbox-arrow-down"></div><img class="aui-numericbox-down" alt="" src="' + $$.path + '/image/numerictextbox.png"/></div>').addClass("aui-numericbox-ImgContainer");
	            self._changeMode();
	        },
	        _setDataBinding: function (self) {
	            var options = self.options, members = options.members, element = self.element;
	            var viewModel = function (options) {
	                var that = this;
	                that.disabled = ko.observable(false);
	                that.value = ko.observable(options.value);
	                that.minValue = ko.observable(options.minValue);
	                that.maxValue = ko.observable(options.maxValue);
	                that.upClick = function (vm, e) {
	                    if (!that.disabled()) {
	                        if (that.value() < that.maxValue()) {
	                            that.value(parseInt(that.value()) + 1);
	                        } else {
	                            that.value(that.minValue());
	                        }
	                        self._setOption("value", that.value());
	                        self._trigger("contentChanged", e, $$.Event({
	                            element: self.element
	                        }));
	                    }
	                };
	                that.downClick = function (vm, e) {
	                    if (!that.disabled()) {
	                        if (that.value() > that.minValue()) {
	                            that.value(that.value() - 1);
	                        } else {
	                            that.value(that.maxValue());
	                        }
	                        self._setOption("value", that.value());
	                        self._trigger("contentChanged", e, $$.Event({
	                            element: self.element
	                        }));
	                    }
	                };
	            };
	            self.bindingData = new viewModel(options);
	            $(function () {
	                ko.applyBindings(self.bindingData, element[0]);
	            });
	        },
	        _method: {
	            keyDown: function (e) {
	                var self = e.data, options = self.options;
	                var event = e.which || e.keyCode || e.keyCode;
	                switch (event) {
	                    //up
	                    case 38:
	                        if (self.bindingData.value() < self.bindingData.maxValue())
	                            self.bindingData.value(parseInt(self.bindingData.value()) + 1);
	                        else
	                            self.bindingData.value(self.bindingData.minValue());
	                        self._setOption("value", self.bindingData.value());
	                        break;
	                        //down
	                    case 40:
	                        if (self.bindingData.value() > self.bindingData.minValue())
	                            self.bindingData.value(self.bindingData.value() - 1);
	                        else
	                            self.bindingData.value(self.bindingData.maxValue());
	                        self._setOption("value", self.bindingData.value());
	                    default:
	                        break;
	                }
	                self._trigger("keyDown", e, $.extend($$._EventArgs, {
	                    element: self.element
	                }));
	                self._trigger("contentChanged", e, $$.Event({
	                    element: self.element
	                }));
	            },
	            contentKeyPress: function (e) {
	                var event = e.which || e.keyCode || e.keyCode;
	                if ((event < 48 || event > 57) && event != 9) {
	                    return false;
	                }
	            },
	            contentChange: function (e) {
	                var self = e.data, options = self.options;
	                var a = /^\d+$/;
	                if (a.test(self._content[0].value)) {
	                    if (self.bindingData.value() < self.bindingData.minValue() || self.bindingData.value() > self.bindingData.maxValue()) {
	                        self._setOption("value", options.value);
	                        self.bindingData.value(options.value);
	                    } else {
	                        self._setOption("value", self.bindingData.value());
	                        self.bindingData.value();
	                    }
	                } else {
	                    self.bindingData.value(options.value);
	                    self._setOption("value", self.bindingData.value());
	                }
	                self._trigger("contentChanged", e, $$.Event({
	                    element: self.element
	                }));
	            }
	        },
	        /**
			 * 获取或设置控件的Content.
			 * @method value 
			 * @param {Number} value 设置控件的content。
			 * @return {Number} 获取控件的content。
	         * @example 获取控件中的content 。
	         * @example 
	         num.numericbox("value");
	         * @example 设置控件中的content。
	         * @example
	         num.numericbox("value",value);
			 */
	        value: function (value) {
	            if (arguments.length == 0) {
	                return this.options.value;
	            }
	            this._setOption("value", value);

	        },
	        width: function (value) {
	            this._containerDiv.width(value);
	        },
	        /**
			 * 获取或设置控件Content的最大值。
			 * @method maxValue
			 * @param {Number} value 设置控件的最大值。
			 * @return {Number} 获取控件的最大值。
	         * @example 获取控件中的maxValue 。
	         * @example 
	         num.numericbox("maxValue");
	         * @example 设置控件中的maxValue。
	         * @example
	         num.numericbox("maxValue",value);
			 */
	        maxValue: function (value) {
	            if (arguments.length == 0) {
	                return this.options.maxValue;
	            }
	            this._setOption("maxValue", value);
	        },
	        /**
			 * 获取或设置控件content的最小值。
			 * @method minValue
			 * @param {Number} value 设置控件的最小值。
			 * @return {Number} 获取控件的最小值。
	         * @example 获取控件中的minValue 。
	         * @example 
	         num.numericbox("minValue");
	         * @example 设置控件中的minValue。
	         * @example
	         num.numericbox("minValue",value);
			 */
	        minValue: function (value) {
	            if (arguments.length == 0) {
	                return this.options.minValue;
	            }
	            this._setOption("minValue", value);
	        },
	        /**
			 * 获取或设置控件是否可用。
			 * @method disabled
			 * @param {Boolean} value 设置控件是否可用。
			 * @return {Boolean} 获取控件是否可用。
	         * @example 获取控件中的disabled 。
	         * @example 
	         num.numericbox("disabled");
	         * @example 设置控件中的disabled。
	         * @example
	         num.numericbox("disabled",true);
			 */
	        disabled: function (value) {
	            if (arguments.length == 0) {
	                return this.options.disabled;
	            }
	            this._setOption("disabled", value);
	        }
	    });
	})(jQuery, AUI);

/***/ },
/* 34 */
/***/ function(module, exports) {

	"use strict";
	(function ($) {
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.overlay = {
	            init: function (element, valueAccessor, allBindingsAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).overlay(value);
	            },
	            update: function (element, valueAccessor, allbingsAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).overlay(value);
	            }
	        };
	    }
	    /**
		 * overlay控件，对不能进行操作的部分进行遮罩处理。
		 * 假设被遮罩的Div的id为“divid”，实现loading控件的js代码如下：
		 
		 $("#divid").overlay({
			 overlayBackground : "yellow",
			 overlayZIndex : 10,
			 overlayOpacity : 0.5,
		 });
		 
		 * 当要显示overlay时，需要调用show方法，反之，则调用hide方法，如下：
		 
		 $("#divid").overlay("show");
		 $("#divid").overlay("hide");
		 
		 * @class overlay
		 * @author Hongbin.Dou
		 * @constructor
		 * @param {Object} options 控件配置信息。
		 * @param {jQuery|DOM|String} options.enabledElement 获取或设置不需要disabled掉的jQuery对象。该值只有在控件初始化时设置有效。
		 * @param {String} options.overlayBackground 获取或设置overlay的background值。该值只有在控件初始化时设置有效。
		 * @param {Number} options.overlayOpacity 获取或设置overlay的opacity值。该值只有在控件初始化时设置有效。
		 * @param {Number} options.overlayZIndex 获取或设置overlay的z-index值。该值只有在控件初始化时设置有效。
		 * @param {Number} options.isScrollVisible 获取或设置一个值，该值表示当overlay出现的时候被遮罩元素的滚动条的显示隐藏。如果为true，表示出现滚动条，反之，表示隐藏滚动条。默认值为true。该值只有在控件初始化时设置有效。
		 */
	    $.widget("aui.overlay", {
	        options: {
	            enabledElement: null,
	            overlayBackground: "#000000",
	            overlayOpacity: 0.25,
	            overlayZIndex: 10,
	            isScrollVisible: true
	        },

	        _initContainer: function () {
	            var self = this, element = self.element, options = self.options;
	            //由于enabledElement有可能为非jquery元素，所以加判断
	            options.enabledElement = options.enabledElement instanceof jQuery ? options.enabledElement : $(options.enabledElement);
	            self.ATTR_ENABLED = $$.generateUUIDByControlName("attr_enable");
	            if (self._mainoverlay == undefined) {
	                //在overlay和mainhost之间添加一个temphost层div，可避免hostdiv必须为relative的问题
	                //由于_mainoverlay需要是absolute类型，但是temp层是relative类型，所以temp层不能和_mainoverlay变成一层
	                self._mainoverlay = $("<div class='aui-overlay'></div>");
	                element.prepend(self._mainoverlay);
	            }
	        },
	        _initParts: function () {
	            var self = this, element = self.element;
	            self._mainoverlay.css(
					{
					    "background": self.options.overlayBackground,
					    "opacity": self.options.overlayOpacity,
					    "z-index": self.options.overlayZIndex
					});
	            if (!element.is("body")) {
	                self._mainoverlay.css({ "height": element[0].clientHeight, "width": element[0].clientWidth });
	                element.css("position", "relative");
	                if (element.css("position") == "static") {
	                    self._mainoverlay.css(
							{
							    "top": element.position().top,
							    "left": element.position().left,
							    "margin-top": element.css("margin-top"),
							    "margin-left": element.css("margin-left")
							});
	                } else {
	                    self._mainoverlay.addClass("aui-overlay-place");
	                }
	            } else {
	                self._mainoverlay.addClass("aui-overlay-position-fixed");
	            }
	        },
	        //show:isdisabled=true; hide:isdisabled=false;
	        _setFocusDisabled: function (isdisabled) {
	            var self = this, element = self.element;
	            //disable
	            if (isdisabled) {
	                if (self.options.enabledElement) {
	                    self.options.enabledElement.find("*").each(function () {
	                        $(this).attr(self.ATTR_ENABLED, true);
	                    });
	                    self.options.enabledElement.attr(self.ATTR_ENABLED, true);
	                }
	                element.find("*").each(function () {
	                    var current = $(this);
	                    //对非enabledElement的元素记录原有的tabindex值，重新赋-1值
	                    if (!$(this).attr(self.ATTR_ENABLED)) {
	                        if (current.attr("tabindex") != undefined) {
	                            current.attr("oldtabindex", current.attr("tabindex"));
	                        } else {
	                            current.attr("oldtabindex", "c27b1721-07a0-050b-f85b-10a5feeffcfc");
	                        }
	                        $(this).attr("tabindex", -1);
	                    }
	                });
	            } else {
	                //enable
	                element.find("*").each(function () {
	                    var
	                        index,
	                        current = $(this);
	                    if (current.attr(self.ATTR_ENABLED)) {
	                        current.removeAttr(self.ATTR_ENABLED);
	                    } else {
	                        index = current.attr("oldtabindex");
	                        if (index != undefined) {
	                            current.attr("tabindex", current.attr("oldtabindex"));
	                        }

	                        if (index == "c27b1721-07a0-050b-f85b-10a5feeffcfc") {
	                            current.removeAttr("tabindex");
	                        }

	                        current.removeAttr("oldtabindex");
	                    }
	                });
	            }
	        },
	        _resetSize: function () {
	            var self = this, element = self.element;
	            if (element[0] != $("body")[0]) {
	                self._mainoverlay.css({ "height": element[0].clientHeight, "width": element[0].clientWidth });
	                if (element.css("position") == "static") {
	                    self._mainoverlay.css({
	                        "top": element.position().top,
	                        "left": element.position().left,
	                        "margin-top": element.css("margin-top"),
	                        "margin-left": element.css("margin-left")
	                    });
	                }
	            }
	        },
	        _create: function () {
	            var self = this;
	            self._isHidden = true;
	            self._initContainer();
	            self._initParts();
	            //当窗口大小改变时，可能会影响host的宽高值，要重新设置遮罩的宽高值
	            $(window).resize(function () {
	                self._resetSize();
	            });
	        },
	        //destroy改成_destroy，为私有方法
	        _destroy: function () {
	            var self = this;
	            if (!self._isHidden) {
	                self.hide();
	            }
	            self._mainoverlay.removeClass().remove();
	            self.element.empty();
	            //$.Widget.prototype.destroy.call(this);
	        },
	        ////////////////////Public Methods ////////////////////
	        /**
	         * 显示overlay控件。
	         * @method show
	         * @param {Number} overlayZIndex属性值。
	         * @return {overlay} overlay控件实例。
	         * @example
	         * $("#divid").overlay("show");
	         */
	        show: function (zindex) {
	            if (this._isHidden == true) {
	                var self = this, element = self.element;
	                self._mainoverlay.removeClass("aui-overlay-display-none").addClass("aui-overlay-display-block");
	                self._isHidden = false;
	                self._setFocusDisabled(true);
	                if (!self.options.isScrollVisible) {
	                    self._hostoverflow = element.css("overflow");
	                    self._hostoverflowX = element.css("overflowX");
	                    self._hostoverflowY = element.css("overflowY");
	                    //当显示时设置overflow的值为hidden，不出滚动条，避免遮罩无法遮住滚动条的问题
	                    element.css("overflow", "hidden").css("overflowX", "hidden").css("overflowY", "hidden");
	                }
	                if (element[0] != $("body")[0]) {
	                    self._mainoverlay.css({ "height": element[0].clientHeight, "width": element[0].clientWidth });
	                }
	                if (zindex) {
	                    self.resetZIndex(zindex);
	                };
	            }
	        },
	        /**
	         * 隐藏overlay控件。
	         * @method hide
	         * @return {overlay} overlay控件实例。
	         * @example
	         * $("#divid").overlay("hide");
	         */
	        hide: function () {
	            if (this._isHidden == false) {
	                var self = this;
	                self._mainoverlay.removeClass("aui-overlay-display-block").addClass("aui-overlay-display-none");
	                self._isHidden = true;
	                self._setFocusDisabled(false);
	                if (!self.options.isScrollVisible) {
	                    //当隐藏时还原overflow的值
	                    self.element.css("overflow", self._hostoverflow).css("overflowX", self._hostoverflowX).css("overflowY", self._hostoverflowY);;
	                }
	            }
	        },
	        /**
	         * 判断overlay控件是否显示。
	         * @method isHidden
	         * @return {Boolean} 显示状态，如果为true，表示隐藏，反之表示显示。
	         * @example
	         * $("#divid").overlay("isHidden");
	         */
	        isHidden: function () {
	            var self = this;
	            return self._isHidden;
	        },
	        /**
	         * 刷新overlay控件的显示位置，当父容器position为static时有用。例如初始化后相邻控件的占位是在overlay显示之后生成的，可能会影响布局，可调用该函数刷新。
	         * @method refresh
	         * @return {overlay} overlay控件实例。
	         * @example
	         * $("#divid").overlay("refresh")
	         */
	        refresh: function () {
	            this._resetSize();
	        },
	        /**
	         * 重置overlay控件的overlayZIndex属性值。
	         * @method resetZIndex
	         * @param {Number} overlayZIndex属性值。
	         * @return {overlay} overlay控件实例。
	         * @example
	         * $("#divid").overlay("resetZIndex",20);
	         */
	        resetZIndex: function (zindex) {
	            this._mainoverlay.css("z-index", parseInt(zindex));
	        }
	        ////////////////////End of Public Methods ////////////////////
	    });
	})(jQuery);


/***/ },
/* 35 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author mliu
	 * @fileoverview peoplepicker控件。
	 */
	(function ($, $$) {
	    //peoplepicker绑定
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.peoplepicker = {
	            init: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).peoplepicker(value);
	            },
	            update: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).peoplepicker(value);
	            }
	        };
	    }
	    /** 
		 * <p>用于生成peoplepicker控件，对其进行操作。可以对peoplepicker赋初始化数据源，也可以在用户搜索时动态提供数据源，peoplepicker有单选和多选两个模式。选中的数据会出现在上方的搜索框中，搜索框根据内容自动换行调整高度，当高度大于200px时出现滚动条。</p>
		 * peoplepicker的基本用法：

		var np = $("#peoplepicker").peoplepicker({
			itemsSource : [new data("aaaa",1,"aaaa@123.com"),
		 				new data("bbbb",2,"bbbb@123.com")],
		 	popupMaxHeight : 100,
			popupMaxWidth : 350,
			height :26,	
			hasLoading : false,
			isMultiSelection :true,
			disabled : false,
		});
		
		 *<p>以上是peoplepicker多选模式，其中itemsSource为数据源，需要传入对象数组，其中有三个属性：displayName,id和detail。displayName就是在popup中显示出来的匹配项，id是每条数据的唯一标识，detail是数据的详细信息，搜索时会通过tooltip的形式显示出来。</p>

	     *可以使用setItemsSource方法在搜索时动态传入数据源：

	     function callback() {
					var dataList1 = [new data("Mike", 1, "aaaa@123.com"),
									 new data("Penny", 2, "bbbb@123.com"), 
									 new data("Sam", 3, "abccc@123.com")]
					$("#peoplepickerDiv").peoplepicker("setItemsSource", dataList1);
				}

	     *可以使用reload方法设置回显时默认选中的数据：

	     function reloadWidget() {
					var data = function(name, id,detail) {
						this.displayName = name;
						this.id = id;
						this.detail = detail;
					}
					var dataList = [new data("nibiru", 1,"nibiru@123.com"), new data("micheal", 2,"micheal@123.com")]
					 $("#peoplepickerDiv").peoplepicker("reload", dataList);
				}

		 * @class peoplepicker
	     * @author Diana.Liu
	     * @constructor
	     * @requires <a href="popup.html">aui.popup.js</a>
		 * @param {Object} options 控件配置信息。
		 * @param {Array} options.itemsSource 获取或设置查询的源数组根据该数组生成popup内容，可以初始化时设定，也可以在触发searching事件时动态传入。
	     * @param {Number} options.width 获取或设置控件的宽度，默认为300px。该值只有在控件初始化时设置有效。
	     * @param {Number} options.height 获取或设置控件的最小高度。默认值是单行26px。该值只有在控件初始化时设置有效。
		 * @param {Number} options.popupMaxHeight 获取或设置popup的最大高度，超过该值显示滚动条。该值只有在控件初始化时设置有效。
		 * @param {Number} options.popupMaxWidth 获取或设置popup的最大宽度，默认100px。该值只有在控件初始化时设置有效。
	     * @param {Number} options.keywordLength 获取或设置开始search的输入字符个数，默认为3。该值只有在控件初始化时设置有效。
		 * @param {Boolean} options.isMultiSelection 获取或设置一个值，该值表示控件单选/多选模式，如果为true,多选模式，false为单选模式。默认true。该值只有在控件初始化时设置有效。
		 * @param {Boolean} options.hasLoading 获取或设置一个值，该值控制loading动画的显示隐藏，如果为true，表示loading动画显示，反之，表示隐藏。默认false隐藏。loading一般用于动态传输数据时显示。
		 * @param {Boolean} options.disabled 获取或设置一个值，该值指示用户是否可以与控件交互。如果为true，表示不可以交互，反之，表示可以交互。默认false。
	     * @param {Selector | Element | jQuery} options.within  获取或设置指定弹出层碰撞检测时比较的对象，影响碰撞检测结果。如果你提供一个选择器或jQuery对象,将使用第一个匹配的元素。默认值是window。该值只有在控件初始化时设置有效。
		 */
	    var
	        uuid = -1,
	        cssParam = {
	            inputContainerFocusClass: "aui-peoplepicker-default-container-focus",
	            inputContainerMouseOverClass: "aui-peoplepicker-default-container-mouseover",
	            itemInputClass: "aui-peoplepicker-item-input",
	            itemInputContainerClass: "aui-peoplepicker-item-input-container",
	            itemHightlightClass: "aui-peoplepicker-popup-item-highlight",
	            itemNormalClass: "aui-peoplepicker-popup-item-normal",
	            resolveditemPassedClass: "aui-peoplepicker-resolved-item-passed",
	            resolveditemUnpassedClass: "aui-peoplepicker-resolved-item-unpassed"
	        };
	    //ishide = {
	    //    "isdelete": false,
	    //    "popupopen": false,
	    //    "inputfocus": false
	    //}
	    $.widget("aui.peoplepicker", {
	        //listbox部件的id
	        listboxId: "aui-peoplepicker-listbox-",
	        //选定项的Id
	        selectedId: "aui-peoplepicker-selected-",
	        options: {
	            itemsSource: [],
	            reloadItem: [],
	            width: 300,
	            height: 24,
	            popupMaxHeight: 100,
	            popupMaxWidth: 320,
	            keywordLength: 3,
	            isMultiSelection: true,
	            hasLoading: false,
	            disabled: false,
	            i18nPath: null,
	            i18nLang: null,
	            within: window,
	            selectedTemplate: '<span data-bind="text:displayName"></span>',
	            /**
				 * 当输入keywordLength个字符时触发。
				 * @event searching
				 * @param {Object} 第一个参数e为触发事件。
				 * @param {Object} 第二个参数args为事件信息。
				 * @param {Object} args.newValue self._keyWords当前输入框中的字符串。
				 * @param {Object} args.element peoplepicker对象。
				 * @example 
			$("#peoplepickerDiv").peoplepicker({
				searching : function(e,args) {
				}
			});
				 */
	            searching: $.noop,
	            /**
	            *当选中项增加或删除时触发。
	            * @event resolvedItemsChanged
	            * @param {Object} 第一个参数e为触发事件。
				* @param {Object} 第二个参数args为事件信息。
				* @param {Object} args.newValue resolvedItem当前输入框中的所有选中项。
				* @param {Object} args.element peoplepicker对象。
	            */
	            resolvedItemsChanged: $.noop,
	            /**
	            *当输入框失去焦点时触发。
	            * @event  blur
	            * @param {Object} 第一个参数e为触发事件。
				* @param {Object} 第二个参数args为事件信息。
	            * @param {Object} args.element peoplepicker对象。
	            */
	            blur: $.noop,

	            quickPick: $.noop  //输入分号时触发，提供给labs暂用。
	        },
	        _create: function () {
	            var self = this, options = self.options;
	            self.ishide = {
	                "isdelete": false,
	                "popupopen": false,
	                "inputfocus": false
	            };
	            self._initMembers();
	            self._setDataBinding();
	            self._setOption("disabled", options.disabled);
	            if (options.reloadItem.length > 0) {
	                self.reload(options.reloadItem);
	            }
	            $$.close(self.element, "peoplepicker", "hide");
	            self._window = $(window).on('resize', self, self._onWindowResize);
	            self._updateLayout();
	        },
	        _onWindowResize: function (e) {
	            var self = e.data;
	            self._updateLayout();
	        },
	        _init: function () {
	            var self = this, options = self.options;
	            self._startSearch();
	            self._input.on("mouseup" + self.eventNamespace, function (e) {
	                self._keyWords = self._input.val();
	                if (self._keyWords != "") {
	                    options.searching({}, $.extend($$._EventArgs, {
	                        newValue: self._keyWords,
	                        element: self.element
	                    }));
	                }
	            });
	            self._mousePick();
	            self._setPopupMaxHeight();
	        },
	        _initId: function () {
	            var self = this;

	            self.listboxId += uuid;
	            self.selectedId += uuid;
	        },
	        _initMembers: function () {
	            var self = this, options = self.options;

	            ++uuid;
	            self._initId();

	            self._showLi = [];
	            self._selectID = -1;
	            self._keyWords = "";
	            self._showList = [];
	            // options._popupcontainer：下拉框最外层容器
	            self._main = $("<div></div>").addClass('aui-peoplepicker-default-container-border');
	            self._main.width(parseInt(options.width) + 20);
	            self._popupContainer = $("<div></div>").addClass('aui-peoplepicker-popup-container');
	            self._popupContainer.css('min-width', options.width);
	            // options._popupcontainerItems：包裹下拉列表<li>的内层容器
	            self._popupContainerItems = $("<div></div>").addClass('aui-peoplepicker-popup-container-items');
	            self._loading = $("<div></div>").addClass('aui-peoplepicker-search-loading');
	            self._main.append(self._getTemplateString().defaultContainer);
	            self.element.append(self._main);
	            $('body').append(self._popupContainer);
	            self._input = self.element.find('.' + cssParam.itemInputClass);
	            self._inputContainer = self.element.find('.' + cssParam.itemInputContainerClass);
	            //self._input.width(parseInt(options.width) - 10);
	            // 包裹输入框的最外层容器
	            self._defaultContainerElement = self.element.find(".aui-peoplepicker-default-container");
	            self._defaultContainerElement.width(parseInt(options.width));
	            self._defaultContainerElement.append(self._loading);
	            self._defaultContainerElement.css('min-height', options.height + "px");
	            self._popupContainer.css('max-width', options.popupMaxWidth + "px");
	            // 包裹itemsspan的外层容器
	            self._resolvedItemsElement = self.element.find(".aui-peoplepicker-resolved-items-span");
	            self._main.wrap("<div data-bind='stopBindings:true'></div>");
	            self._popUp = self._popupContainer.popup({
	                placement: "bottom-left",
	                within: options.within,
	                dependence: self._defaultContainerElement,
	                width: "auto"
	            })
	        },
	        /*
			 * options._defaultContainerElement的各种样式
			 */
	        _initEvent: function () {
	            var self = this, options = self.options;
	            self.stop = false;
	            self.element.off(self.eventNamespace).on("click" + self.eventNamespace, function () {
	                self._input.focus();
	            });

	            self._main.off(self.eventNamespace);

	            self._input.off(self.eventNamespace).on("focus" + self.eventNamespace, function () {
	                self._main.addClass(cssParam.inputContainerFocusClass);
	                self._defaultContainerElement.addClass(cssParam.inputContainerFocusClass);
	            }).on("blur" + self.eventNamespace, this, function (e) {
	                self.ishide.inputfocus = false;
	                self._main.removeClass(cssParam.inputContainerFocusClass);
	                self._defaultContainerElement.removeClass(cssParam.inputContainerFocusClass);
	                if (self.ishide.isdelete == self.ishide.inputfocus == self.ishide.popupopen == false) {
	                    options.blur({}, $.extend($$._EventArgs, {
	                        element: self.element,
	                        newValue: self.rootBindingData.resolvedItems()
	                    }));
	                }
	                self.ishide.popupopen = false;
	                self.ishide.inputfocus = true;
	            }).on("keydown" + self.eventNamespace, function (e) {
	                self._backSpace(e);
	                if (e.keyCode == 13 && !self.ishide.popupopen) {
	                    options.blur({}, $.extend($$._EventArgs, {
	                        element: self.element
	                    }));
	                }
	                self.ishide.popupopen = false;
	            });
	            self._defaultContainerElement.off(self.eventNamespace).on("mouseover" + self.eventNamespace, function () {
	                self.ishide.isdelete = true;
	                if (!options.disabled) {
	                    self._main.addClass(cssParam.inputContainerMouseOverClass);
	                    self._defaultContainerElement.addClass(cssParam.inputContainerMouseOverClass);
	                }
	            }).on("mouseout" + self.eventNamespace, function () {
	                self.ishide.isdelete = false;
	                self._main.removeClass(cssParam.inputContainerMouseOverClass);
	                self._defaultContainerElement.removeClass(cssParam.inputContainerMouseOverClass);
	            });

	            self._popupContainer
	                .off(self.eventNamespace)
	                .on("mousewheel" + self.eventNamespace, function () {
	                    $$.closeExcept(self.element, true);
	                })
	                .on("mouseover" + self.eventNamespace, function () {
	                    self.ishide.popupopen = true;
	                }).on("mouseout" + self.eventNamespace, this, function (e) {
	                    var self = e.data;
	                    self.ishide.popupopen = false;
	                    self._input.focus();
	                }).on("mousedown" + self.eventNamespace, this, function (e) {
	                    e.stopPropagation();
	                    $$.closeExcept(self.element, true);
	                });
	            if (options.i18nPath) {
	                I18N.register("aui.resultText", options.i18nPath, options.i18nLang);
	            }
	        },
	        //输入超过keywordLength个字符时开始search
	        _startSearch: function () {
	            var self = this, options = self.options;
	            self._input.off(self.eventNamespace);
	            self._initEvent();
	            self._input.on("keyup" + self.eventNamespace, function (e) {
	                var key = e.which || e.keyCode;
	                self._keycodePick(e);
	                //self._backSpace(e);
	                if (key == 8// Backspace
	                || key == 0// 兼容Android设备的Chrome
					|| key == 32// 空格
	                || key == 186//德文ü
					|| (48 <= key && key <= 57) || key == 61 || (65 <= key && key <= 90) || (96 <= key && key <= 111) || key == 173 || key == 188 || (190 <= key && key <= 192) || (219 <= key && key <= 222)) {
	                    self._keyWords = self._input.val();
	                    if (self._keyWords != "") {
	                        if (self._keyWords.length >= options.keywordLength) {
	                            var flag = options.searching({}, $.extend($$._EventArgs, {
	                                newValue: self._keyWords,
	                                element: self.element
	                            }));
	                            self._getSearchResult();
	                            //解决meetings搜索之后重新赋值itemsSource时，搜索结果位置不正确的问题。
	                            if (flag !== true) {
	                                self._show();
	                            } else {
	                                self.hide();
	                            }

	                            self._mousePick();
	                            self._selectID = -1;
	                            self._continueCheck();
	                        }
	                    } else {
	                        self._hide();

	                    }
	                }
	            });
	        },
	        _setOption: function (key, value) {
	            var self = this, options = self.options, itermId = [];
	            var args = {
	                oldValue: options[key],
	                newValue: value,
	                element: self.element
	            };
	            if (key == "hasLoading") {
	                //控制loading动画显示隐藏
	                value ? self._loading.show() : self._loading.hide();
	            }

	            $.Widget.prototype._setOption.apply(this, arguments);
	            if (key == "itemsSource" && value.length > 0) {
	                self.options.itemsSource = args.newValue;
	            }

	            if (key == "disabled") {
	                if (!value) {
	                    //enable
	                    self._defaultContainerElement.removeClass("aui-peoplepicker-default-container-disabled");
	                    self._input.removeAttr('disabled').removeClass("aui-peoplepicker-item-input-disabled");
	                    self._defaultContainerElement.find(".aui-peoplepicker-resolved-item").attr('tabindex', 0);
	                    self._input.attr('tabindex', 0);
	                    self._defaultContainerElement.find(".aui-peoplepicker-resolved-items-span-closebutton").removeClass("aui-peoplepicker-resolved-items-span-closebutton-disabled").addClass("aui-peoplepicker-resolved-items-span-closebutton-div");
	                    self._defaultContainerElement.find(".aui-peoplepicker-resolved-item-unpassed").removeClass("aui-peoplepicker-resolved-item-unpassed_disable");
	                    //self._initEvent();
	                } else {
	                    //disable
	                    self._defaultContainerElement.addClass("aui-peoplepicker-default-container-disabled");
	                    self._input.attr('disabled', 'disabled').addClass("aui-peoplepicker-item-input-disabled");
	                    self._defaultContainerElement.find("*").each(function () {
	                        $(this).attr('tabindex', -1);
	                    });
	                    self._defaultContainerElement.find(".aui-peoplepicker-resolved-items-span-closebutton").removeClass("aui-peoplepicker-resolved-items-span-closebutton-div").addClass("aui-peoplepicker-resolved-items-span-closebutton-disabled");
	                    self._defaultContainerElement.find(".aui-peoplepicker-resolved-item-unpassed").addClass("aui-peoplepicker-resolved-item-unpassed_disable");
	                    self._hide();
	                    self._defaultContainerElement.off(self.eventNamespace);
	                }
	            }
	        },

	        /*
			 * 鼠标选取
			 */
	        _mousePick: function () {
	            var self = this, options = self.options;
	            self._items = self._popupContainer.find('li');
	            self._items.on("mouseover" + self.eventNamespace, function (e) {
	                $(e.target).addClass(cssParam.itemHightlightClass);
	                self.ishide.popupopen = true;
	            }).on("mouseout" + self.eventNamespace, function (e) {
	                self.ishide.popupopen = false;
	                $(e.target).removeClass(cssParam.itemHightlightClass);
	            }).on("click" + self.eventNamespace, function (e) {
	                self.ishide.popupopen = false;
	                self._input.val("");
	                if (!options.isMultiSelection && self._resolvedItemsElement.children().length > 0) {
	                    self._hide();
	                    self._input.focus();
	                    return false;
	                } else {
	                    self._itemClick(self._getHighlightItem(), true);
	                }
	                self._updateLayout();
	                self._input.focus();
	                self._hide();
	            }).on("mousedown" + self.eventNamespace, function (e) {
	                $$.closeExcept(self.element, true);
	            });
	        },
	        hide: function () {
	            var self = this;
	            if (self._popUp.popup("isOpening")) {
	                self._hide();
	            }
	        },
	        _show: function () {
	            var self = this;
	            $$.closeVisibility(self.element, true);
	            self._popUp.popup("show");
	        },
	        _hide: function () {
	            var self = this;
	            $$.closeVisibility(self.element, false);
	            self._popUp.popup("hide");
	        },
	        /*
			 * 回删操作
			 */
	        _backSpace: function (e) {
	            var self = this, options = self.options, key = e.which || e.keyCode;
	            var args = {
	                oldValue: null,
	                newValue: null,
	                element: self.element
	            }
	            if (key == 8 && (self._input.val() == "")) {
	                self.rootBindingData.resolvedItems.pop();

	                options.resolvedItemsChanged({}, $.extend($$._EventArgs, {
	                    newValue: self.rootBindingData.resolvedItems(),
	                    element: self.element
	                }));
	                self._updateLayout();
	                self._input.focus();
	                e.preventDefault();
	            }
	        },
	        /*
			 * 键盘选取
			 */
	        _keycodePick: function (e) {
	            var
	                self = this,
	                options = self.options,
	                key = e.which || e.keyCode,
	                values = self._input.val().split(';');


	            // 分号
	            if (values.length > 1) {
	                self._validateInput();
	            }
	            if (self._showLi.length > 0) {
	                switch (key) {
	                    // 向下
	                    case 40:
	                        self.ishide.popupopen = true;
	                        if (self._selectID < self._showLi.length - 1) {
	                            //self._input.val()
	                            $(self._showLi[self._selectID]).removeAttr("id", self.selectedId)
	                                .removeClass(cssParam.itemHightlightClass)
	                                .addClass(cssParam.itemNormalClass);
	                            self._selectID = self._selectID + 1;
	                            $(self._showLi[self._selectID]).attr("id", self.selectedId)
	                                .removeClass(cssParam.itemNormalClass)
	                                .addClass(cssParam.itemHightlightClass);
	                            self._input.val($(self._showLi[self._selectID]).text());
	                        } else {
	                            $(self._showLi[self._selectID]).removeAttr("id", self.selectedId)
	                                .removeClass(cssParam.itemHightlightClass);
	                            self._selectID = -1;
	                            return false;
	                        }
	                        self._refreshScroll();
	                        break;
	                        // 向上
	                    case 38:
	                        self.ishide.popupopen = true;
	                        if (self._selectID > 0) {
	                            $(self._showLi[self._selectID]).removeAttr("id", self.selectedId)
	                                .removeClass(cssParam.itemHightlightClass)
	                                .addClass(cssParam.itemNormalClass);
	                            self._selectID = self._selectID - 1;
	                            $(self._showLi[self._selectID]).attr("id", self.selectedId)
	                                .removeClass(cssParam.itemNormalClass)
	                                .addClass(cssParam.itemHightlightClass);
	                            self._input.val($(self._showLi[self._selectID]).text());
	                        } else {
	                            $(self._showLi[self._selectID]).removeAttr("id", self.selectedId)
	                                .removeClass(cssParam.itemHightlightClass);
	                            self._selectID = self._showLi.length;
	                            return false;
	                        }
	                        self._refreshScroll();
	                        break;

	                        // enter
	                    case 13:
	                        if (!self._popUp.is(":hidden")) {
	                            self._input.val("");
	                            if (!options.isMultiSelection && self._resolvedItemsElement.children().length > 0) {
	                                self._hide();
	                                self._input.focus();
	                                return false;
	                            } else {
	                                self._itemClick(self._getHighlightItem(), true);
	                            }
	                            self._updateLayout();
	                            self._input.focus();
	                            self._hide();
	                        }

	                        break;
	                }
	            }
	            e.stopPropagation();
	            e.preventDefault();
	        },
	        _refreshScroll: function () {
	            var self = this,
	               seletedItem = self._popupContainerItems.find("." + cssParam.itemHightlightClass),
	               focusedItemOffsetTop = seletedItem[0].offsetTop,// 选中的item距离整个content区域最顶端的距离
	               contentClientHeight = self._popupContainerItems[0].clientHeight,// 可见区域的大小
	               contentScrollTop = self._popupContainerItems[0].scrollTop,// 现在的可见区域离内容最顶端的偏移
	               itemClientHeight = seletedItem[0].clientHeight;// 选中的item的本身高度

	            // 要选中的item在可见区域上面，将这个item放在可视区域的第一个位置
	            if (contentScrollTop - focusedItemOffsetTop
	                    + itemClientHeight > 0) {
	                self._popupContainerItems[0].scrollTop = focusedItemOffsetTop;
	                return;
	            }
	            // 要选中的item在可见区域下面，将这个item放在可视区域的最后一个位置
	            if (focusedItemOffsetTop - contentScrollTop >= contentClientHeight - itemClientHeight) {
	                self._popupContainerItems[0].scrollTop = focusedItemOffsetTop - contentClientHeight + itemClientHeight;
	                return;
	            }
	        },
	        /* 获取下拉列表匹配数据 */
	        _getSearchResult: function () {
	            var
	                self = this,
	                options = self.options,
	                //搜索时，popup中显示的数据源
	                dataList = options.itemsSource;
	            self._showList = [];
	            self._showLi = [];
	            self._searchResult = "";
	            self._popupContainer.find(".aui-peoplepicker-popup-container-items").empty();


	            for (var i = 0, count = dataList.length; i < count; i++) {
	                if (dataList[i].displayName.toLowerCase().indexOf(self._keyWords.toLowerCase()) >= 0 || dataList[i].detail.toLowerCase().indexOf(self._keyWords.toLowerCase()) >= 0) {
	                    self._searchResult = "<li role='option' index='" + i + "'  class='aui-peoplepicker-item-list-style'  title='" + dataList[i].detail + "'>" + dataList[i].displayName + "</li>";
	                    self._showList.push(dataList[i]);
	                    self.element.find('.' + cssParam.itemHightlightClass).removeClass(cssParam.itemHightlightClass).addClass(cssParam.itemNormalClass);
	                    self._popupContainerItems.append(self._searchResult);
	                    self._popupContainer.append(self._popupContainerItems);
	                    self._showLi.push(self._popupContainer.find("li[index=" + i + "]"));
	                }
	            }
	            self._popupContainer.find(".aui-peoplepicker-show-results-info-container").remove();
	            if (self._showList.length == 0) {
	                //no result           
	                self._NOresult = $("<div>" + $$.I18N.peoplepicker.noResults + "</div>").addClass("aui-peoplepicker-show-results-info-container");
	                self._popupContainer.append(self._NOresult);
	            } else if (self._showList.length == 1) {
	                self._resultCount = $("<div>" + $$.I18N.peoplepicker.result.format(1) + "</div>").addClass("aui-peoplepicker-show-results-info-container");
	                self._popupContainer.append(self._resultCount);

	            } else {
	                self._resultCount = $("<div>" + $$.I18N.peoplepicker.results.format(self._showList.length) + "</div>").addClass("aui-peoplepicker-show-results-info-container");
	                self._popupContainer.append(self._resultCount);
	            }
	            self._setPopupMaxHeight(self._showList.length);
	        },
	        /* 选中值模板 */
	        _getTemplateString: function (widget) {
	            var html = '<div id="resoveItems" class="aui-peoplepicker-default-container">';

	            html += '<span class="aui-peoplepicker-resolved-items-span" data-bind="foreach: { data:resolvedItems  ,as:\'resolvedItem\'}">';
	            html += '<span class="aui-peoplepicker-resolved-item" tabindex="0" role="application" data-bind="attr: {\'aria-span\': resolvedItem.displayName},event:{mouseenter:$parent.itemsmouseover,mouseleave:$parent.itemsmouseleave}">';

	            html += '<span class="aui-peoplepicker-resolved-item-text" data-bind="css:resolvedItemCss,attr:{title:resolvedItem.rootData.detail}">';
	            html += this.options.selectedTemplate;
	            html += '</span>';

	            html += '<input type="button"  role="button"  class="aui-peoplepicker-resolved-items-span-closebutton aui-peoplepicker-resolved-items-span-closebutton-div" data-bind="click: $parent.removeItem" aria-span="close"/>';

	            html += '</span>';
	            html += '</span>';

	            html += '<div class="aui-peoplepicker-item-input-container">';
	            html += '<input class="aui-peoplepicker-item-input" type="text" autocomplete="off" role="combobox" aria-owns="' + self.listboxId + '" aria-activedescendant="' + self.selectedId + '" aria-busy="false" />';
	            html += '</div>';

	            return {
	                //defaultContainer: '<div id="resoveItems" class="aui-peoplepicker-default-container" ><span class="aui-peoplepicker-resolved-items-span" data-bind="foreach: { data:resolvedItems  ,as:\'resolvedItem\'}"><span class="aui-peoplepicker-resolved-item" tabindex="0" role="application" data-bind="attr: {\'aria-span\': resolvedItem.displayName},event:{mouseenter:$parent.itemsmouseover,mouseleave:$parent.itemsmouseleave}"><span class="aui-peoplepicker-resolved-item-text"   data-bind="text:resolvedItem.displayName,css:resolvedItemCss,attr:{title:resolvedItem.rootData.detail}"></span>' + '<input type="button"  role="button"  class="aui-peoplepicker-resolved-items-span-closebutton aui-peoplepicker-resolved-items-span-closebutton-div" data-bind="click: $parent.removeItem" aria-span="close"/></span></span>' + '<div class="aui-peoplepicker-item-input-container"><input class="aui-peoplepicker-item-input" role="application" aria-span="input"/></div></div>',
	                defaultContainer: html,

	            };
	        },
	        /* 绑定数据源 */
	        _setDataBinding: function () {
	            var widget = this, options = widget.options, element = widget.element;
	            var peoplepickerViewModel = function () {
	                var self = this;
	                self.resolvedItems = ko.observableArray();
	                self.removeItem = function (item) {
	                    if (!options.disabled) {
	                        widget.ishide.isdelete = false;
	                        self.resolvedItems.remove(item);
	                        options.resolvedItemsChanged({}, $.extend($$._EventArgs, {
	                            newValue: widget.rootBindingData.resolvedItems(),
	                            element: widget.element
	                        }));
	                        widget._updateLayout();
	                        widget._input.focus();
	                    }
	                };
	                self.itemsmouseover = function () {
	                    widget.ishide.isdelete = true;
	                };
	                self.itemsmouseleave = function () {
	                    widget.ishide.isdelete = false;
	                };
	            }
	            widget.rootBindingData = new peoplepickerViewModel();
	            ko.applyBindings(widget.rootBindingData, widget._main[0]);
	        },
	        _setResolvedItems: function (data, isPassed) {
	            var self = this, options = self.options, displayName = "", resolvedItems = self.rootBindingData.resolvedItems(), cssString = cssParam.resolveditemPassedClass;
	            if (isPassed) {
	                displayName = data.displayName
	            } else {
	                cssString = cssParam.resolveditemUnpassedClass;
	                displayName = data;
	            }

	            //模板绑定属性
	            var resolvedItem = {
	                displayName: displayName,
	                rootData: data,
	                resolvedItemCss: cssString,
	                isResolvedPassed: isPassed,
	            }
	            if (resolvedItems.length == 0) {
	                this.rootBindingData.resolvedItems.push(resolvedItem);
	                options.resolvedItemsChanged({}, $.extend($$._EventArgs, {
	                    newValue: self.rootBindingData.resolvedItems(),
	                    element: self.element
	                }));
	            } else {
	                for (var i = 0, count = resolvedItems.length; i < count; i++) {
	                    if (resolvedItem.displayName == resolvedItems[i].displayName && resolvedItem.rootData.id == resolvedItems[i].rootData.id && resolvedItem.rootData.detail == resolvedItems[i].rootData.detail) {
	                        return false;
	                    }
	                }
	                this.rootBindingData.resolvedItems.push(resolvedItem);
	                options.resolvedItemsChanged({}, $.extend($$._EventArgs, {
	                    newValue: self.rootBindingData.resolvedItems(),
	                    element: self.element
	                }));
	            }
	            self._hide();
	        },
	        //用于动态加载数据源，分号操作
	        _reCheck: function () {
	            var self = this, options = self.options, data = self.options.itemsSource, filterList = [], itemsSource = self.rootBindingData.resolvedItems(), itemsSource2 = itemsSource.slice(0);
	            self.rootBindingData.resolvedItems.removeAll();
	            if (!options.isMultiSelection && itemsSource.length != 0) {
	                var value = itemsSource2[0].displayName;
	                filterList = ko.utils.arrayFilter(data, function (item) {
	                    return item.displayName.toLowerCase() == value.toLowerCase() || item.detail.toLowerCase() == value.toLowerCase();
	                });
	                if (filterList.length == 0) {
	                    self._itemClick(itemsSource2[0].displayName, false);
	                } else {
	                    self._itemClick(this._getRootDataByDisplayName(itemsSource2[0].displayName), true);
	                }
	            } else {
	                for (var i = 0, count = itemsSource2.length; i < count; i++) {
	                    var value = itemsSource2[i].displayName;
	                    filterList = ko.utils.arrayFilter(data, function (item) {
	                        return item.displayName.toLowerCase() == value.toLowerCase() || item.detail.toLowerCase() == value.toLowerCase();
	                    });
	                    if (filterList.length == 0) {
	                        self._itemClick(itemsSource2[i].displayName, false);
	                    } else {
	                        self._itemClick(self._getRootDataByDisplayName(itemsSource2[i].displayName), true);
	                    }
	                }
	            }


	        },
	        _destroy: function () {
	            var self = this;
	            self._popupContainer.removeClass();
	            self._popupContainerItems.removeClass();
	            self._loading.removeClass();
	            self._input.removeClass().removeAttr('disabled');
	            self._defaultContainerElement.removeClass().removeAttr('tabindex');
	            self._resolvedItemsElement.removeClass();
	            self.element.removeClass().off(this.eventNamespace).empty();
	            $$.offClose(self.element);
	        },
	        updateLayout: function () {
	            this._updateLayout();
	        },
	        /* 计算输入区域宽度，高度 */
	        _updateLayout: function () {
	            var widget = this, marginLeft = 0, inputMinWidth = 30, tempWidth = 0, defaultContainerWidth = widget._defaultContainerElement.width(), itemMaxWidth = defaultContainerWidth - inputMinWidth, children = widget._resolvedItemsElement.find(".aui-peoplepicker-resolved-item");
	            //widget._input.css("width", defaultContainerWidth - 10);
	            widget._resolvedItemsElement.find("br").remove();
	            //
	            children.each(function (i) {
	                if ((tempWidth + $(this).width() + 5) >= itemMaxWidth) {
	                    if ($(this).width() + 5 >= itemMaxWidth) {
	                        if ($(this).find(".aui-peoplepicker-resolved-item-text").width() >= itemMaxWidth) {
	                            if (i == children.length - 1) {
	                                $("<br />").insertAfter($(this));
	                            }
	                            $($(this).find("span")[0]).css("width", itemMaxWidth);
	                        }
	                    }
	                    if (i != 0) {
	                        $("<br />").insertBefore($(this));
	                    }
	                    tempWidth = 0;

	                }
	                tempWidth += $(this).width() + 5;

	                if (($(this).width() + 5) >= itemMaxWidth) {
	                    widget._inputContainer.width(defaultContainerWidth - 7);
	                } else {
	                    widget._inputContainer.width(defaultContainerWidth - tempWidth - 7);
	                }

	            });
	            /*没有选中项时*/
	            if (children.length == 0) {
	                widget._inputContainer.width(defaultContainerWidth - 7);
	            }
	            if (widget._main.height() > 200) {
	                widget._main.css("height", '200px');
	            }
	            if (widget._main.height() >= widget._defaultContainerElement.height()) {
	                widget._main.css("border-width", 0);
	                widget._defaultContainerElement.css("border-width", 1)
	            } else {
	                widget._main.css("border-width", 1);
	                widget._defaultContainerElement.css("border-width", 0)
	            }

	        },
	        /* 设置下拉框最大高度，超出显示滚动条 */
	        _setPopupMaxHeight: function (itemsCount) {
	            var self = this, options = self.options, popup = self._popupContainerItems, totalHeight = itemsCount * $$.removePx($(popup.children()[0]).css("height"));
	            if (popup != null) {
	                popup.css("height", "auto");
	                if (totalHeight < $$.removePx(this.options.popupMaxHeight)) {
	                    //popup.css("height", totalHeight);
	                } else {
	                    popup.css("height", this.options.popupMaxHeight);
	                }
	            }
	        },
	        /* 分号取值验证 */
	        _validateInput: function (value) {
	            var self = this, options = self.options, data = self._showList, filterList = [], value = self._keyWords.split(";")[0].toString(), quickpick = self.options.quickPick(value, false);
	            arguments.length > 0 ? self.value = value : self.value = self._keyWords.split(";")[0].toString();
	            if (value.replace(/(^\s*)|(\s*$)/g, '') == "") {
	                self._input.val("");
	                return false;
	            }
	            if (!options.isMultiSelection && self._resolvedItemsElement.children().length > 0) {
	                self._input.val("");
	                self._hide();
	                self._input.focus();
	                return false;
	            } else {
	                filterList = ko.utils.arrayFilter(data, function (item) {
	                    return item.displayName.toLowerCase() == value.toLowerCase() || item.detail.toLowerCase() == value.toLowerCase();
	                });
	                if (filterList.length == 0) {
	                    if (quickpick) {
	                        self._itemClick(quickpick, true);
	                        return;
	                    }
	                    this._itemClick(value, false);
	                    return false;
	                }
	                options.quickPick(value, true);
	                self._itemClick(self._getRootDataByDisplayName(value), true);
	            }
	        },
	        _itemClick: function (data, isPassed) {
	            var self = this;
	            self._setResolvedItems(data, isPassed)
	            self._updateLayout();
	            self._input.focus();
	            self._input.val("");
	        },
	        _getRootDataByDisplayName: function (displayName) {
	            var dataList = this.options.itemsSource;
	            for (var i = 0, count = dataList.length; i < count; i++) {
	                if (dataList[i].displayName.toLowerCase() == displayName.toLowerCase() || dataList[i].detail.toLowerCase() == displayName.toLowerCase()) {
	                    return dataList[i];
	                }
	            }
	            return displayName;
	        },
	        /* enter选取高亮元素，否则默认选取下拉框首个元素 */
	        _getHighlightItem: function () {
	            var self = this, itemsToShow = self._showLi;
	            for (var i = 0, count = itemsToShow.length; i < count; i++) {
	                if (itemsToShow[i].hasClass(cssParam.itemHightlightClass)) {
	                    return self._showList[i];
	                }
	            }
	            return self._showList[0];
	        },
	        //用于连续分号查询，例如：查询aaa;bbb;ccc;
	        _continueCheck: function () {
	            var self = this, options = self.options, data = options.itemsSource, nameString = self._input.val(), filterList = [], namestr = [];
	            if (nameString.indexOf(";") > 0) {
	                namestr = nameString.split(";");
	                //meetings 逻辑 by 郭春宇
	                if (namestr.length <= 2) return;
	                if (!options.isMultiSelection && self._resolvedItemsElement.children().length > 0) {
	                    self._input.val("");
	                    self._hide();
	                    self._input.focus();
	                    return false;
	                } else if (!options.isMultiSelection && self._resolvedItemsElement.children().length == 0) {
	                    var value = namestr[0];
	                    if (value.length > 0) {
	                        filterList = ko.utils.arrayFilter(data, function (item) {
	                            return item.displayName.toLowerCase() == value.toLowerCase() || item.detail.toLowerCase() == value.toLowerCase();
	                        });
	                        if (filterList.length == 0) {
	                            this._itemClick(value, false);
	                        } else {
	                            this._itemClick(this._getRootDataByDisplayName(value), true);
	                        }
	                    }
	                } else {
	                    for (var i = 0, count = namestr.length; i < count; i++) {
	                        var value = namestr[i];
	                        if (value.length > 0) {
	                            filterList = ko.utils.arrayFilter(data, function (item) {
	                                return item.displayName.toLowerCase() == value.toLowerCase() || item.detail.toLowerCase() == value.toLowerCase();
	                            });
	                            if (filterList.length == 0) {
	                                this._itemClick(namestr[i], false);
	                            } else {
	                                this._itemClick(this._getRootDataByDisplayName(namestr[i]), true);
	                            }
	                        }
	                    }
	                }
	            }
	        },
	        /**
	         * 获取或设置数据源。
	         * @method setItemsSource
	         * @param {Array} dataList 数据源的对象数组。
	         * @example 设置dataList
	         * @example 
	        function callback() {
	            var dataList1 = [new data("1234", 1, "diana@123.com"), 
	                            new data("1237", 2, "lenard@123.com"),
	                            new data("1239", 3, "sheldon@123.com")]
	            $("#peoplepickerDiv").peoplepicker("setItemsSource", dataList1);
	        }
	         */
	        setItemsSource: function (dataList) {
	            var self = this, options = self.options;
	            if (arguments.length == 0) {
	                return options.dataList;
	            } else {
	                self._setOption("itemsSource", dataList);
	                self._startSearch();
	                self._show();
	                self._getSearchResult();
	                self._mousePick();
	            }

	            if (self._input.val() == "") {
	                self._reCheck();
	                self._hide();
	            }
	        },
	        /**
	         * 清空输入框中全部数据。
	         * @method clearInput 
	         * @example 清空输入框中全部数据。
	         * @example
	        $("#peoplepickerDiv").peoplepicker("clearInput");
	         */
	        clearInput: function () {
	            this.rootBindingData.resolvedItems.removeAll();
	            this._input.val("");
	            this._updateLayout();
	            this._input.focus();
	        },
	        /**
	         * 重置输入框中的值，用于回显操作。
	         * @method reload
	         * @param {Array} datalist 设置输入框模板绑定数据源。
	         * @param {Boolean} value 可选参数，设置回显数据的样式，默认为check通过的样式，false为check未通过的样式。
	         * @return {object} 返回当前控件对象。
	         * @example 
	        function reloadWidget() {
	            var data = function(name, id,detail) {
	                this.displayName = name;
	                this.id = id;
	                this.detail = detail;
	            }
	            var dataList = [new data("nibiru", 1,"nibiru@123.com"), new data("micheal", 2,"micheal@123.com")]
	            $("#peoplepickerDiv").peoplepicker("reload", dataList);
	        } 
	         */
	        reload: function (dataList, value, focus, clear) {
	            if (clear) {
	                this.rootBindingData.resolvedItems.removeAll();
	            }

	            if (value == false) {
	                for (var i = 0, count = dataList.length; i < count; i++) {
	                    this._setResolvedItems(dataList[i].displayName, false);
	                }
	            } else {
	                for (var i = 0, count = dataList.length; i < count; i++) {
	                    this._setResolvedItems(dataList[i], true);
	                }
	            }
	            if (focus) {
	                this._input.focus();
	            }
	            this._updateLayout();
	            return this.element;
	        },
	        /**
	         * 获取已验证完毕的数据集合。
	         * @method getResolvedItems
	         * @param {Boolean} isPassed 可选参数，设置是否获取check通过的数据集合。true则返回check通过的数据集合，否则全部返回。
	         * @return　{Array} rootBindingData.resolvedItems() 已通过验证的数据集合。
	         * @example
	        function getResolvedItems() {
	        var items = $("#peoplepickerDiv").peoplepicker("getResolvedItems");
	            if(items.length > 0){
	                var data = items[0].rootData;
	            }
	        } 
	         */
	        getResolvedItems: function (isPassed) {
	            if (isPassed) {
	                for (var i = 0, count = this.rootBindingData.resolvedItems().length; i < count; i++) {
	                    if (this.rootBindingData.resolvedItems()[i].isResolvedPassed) {
	                        return this.rootBindingData.resolvedItems()[i];
	                    }
	                }
	            } else {
	                return this.rootBindingData.resolvedItems();
	            }
	        },
	        check: function () {
	            var self = this, value = self._input.val();
	            if (value != "") {
	                self._validateInput(value);
	            }
	        }
	    });
	})(jQuery, AUI);


/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * @author jptian
	 * @module AUI
	 */
	"use strict";
	(function ($, $$) {

	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable
	        ko.bindingHandlers.popup = {
	            init: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).popup(value);
	            },
	            update: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).popup(value);
	            }
	        };
	    }

	    var DOCUMENT = $(document.documentElement);

	    /**
		 * 将DOM元素转化成popup控件。popup一般是由一个DIV及其内部元素构成，popup会使该DIV悬浮于所有HTML元素之上，并可以通过修改placement与placementMode属性让其基于一个其他HTML元素的一个边或鼠标位置坐标进行显示。在指定的方向无法显示全的时候，会选择相对的方向进行显示，如果两侧都不能完整显示，则会对dependence对象进行一定的遮挡。
		 * 一个基于鼠标事件位置的简单实例：
		
		var po = $("#popup").popup({
		 	placement: "mouse",
			dependence: $("#popup_top"),
		 	width: 450,
		 	height: 150
		});
		
		 * 展开的代码实例，假设，该实例要求相对鼠标位置的展开位置产生25，50的偏差值：
		
		po.popup("show", { offsetHorizontal: 25, offsetVertical: 50 }, e);
		
		 * <p>其中，e为鼠标事件的Event对象。如果不是相对于鼠标位置，而是某一个元素，则要求在popup初始化或调用show方法时设置dependence属性。</p>
		 * @class popup
		 * @constructor
		 * @author Jiapeng.Tian
		 * @param {Object} option 控件配置信息。
		 * @param {String} option.popupClass 获取或设置控件的顶层DIV元素的class属性值。该值只有在控件初始化时设置有效。
		 * @param {jQuery} option.dependence 获取或设置控件展开时所依赖的元素。如果placement属性值为“mouse”，则该属性所代表的元素为触发该popup展开的元素（比如鼠标滑过某DIV展开popup，则该DIV应设置为dependence）。该值设置后会在下次展开时生效。
		 * @param {String} option.placement 获取或设置控件展开时相对所依赖元素的位置。默认值为“bottom-left”。可用值有“top-left”、“top-right”、“bottom-left”、“bottom-right”、“mouse”。当所设的展开方向上没有足够空间的时候，会自动调整为该方向上相对的布局方式。如果两种方式都无法完全显示，则会选取相对空间较大的布局方式并压缩进行展示，同时触发resized事件。
		 * @param {String} option.placementMode 获取或设置控件展开时，在依赖元素相对位置上的定位模式。默认模式为“vertical”，代表popup的显示位置会以dependence为基准纵向定位；可选模式还有“horizontal”，代表popup的显示位置会以dependence为基准横向定位。该值只有在控件初始化时设置有效。
		 * @param {Number} option.offsetHorizontal 获取或设置控件相对于默认展开位置的横向位移。该值可以为负数。该值设置后会在下次展开时生效。
		 * @param {Number} option.offsetVertical 获取或设置控件相对于默认展开位置的纵向位移。该值可以为负数。该值设置后会在下次展开时生效。
		 * @param {Boolean} option.isOpening 获取或设置一个值，该值表示当前控件是否处在展开状态。
		 * @param {Number} option.zIndex 获取或设置控件的z-index属性。
		 * @param {Number} option.width 获取或设置控件的宽度。
		 * @param {Number} option.height 获取或设置控件的高度。
	     * @param {String | DOM | jQuery} option.within  获取或设置弹出层碰撞检测时比较的对象，影响碰撞检测结果。如果提供一个选择器、DOM元素或jQuery对象,将使用第一个匹配的元素。默认值是window。
		 */
	    $.widget("aui.popup", {
	        options: {
	            uuid: '',
	            popupClass: "aui-popup",
	            dependence: null,
	            placement: "bottom-left",
	            placementMode: "v",
	            offsetHorizontal: 0,
	            offsetVertical: 0,
	            isOpening: false,
	            zIndex: 998,
	            width: "auto",
	            height: "auto",

	            /**
				 * 在该控件展开时触发。
				 * @event showing
				 * @param {Event} e 事件信息。
	             * @param {Object} data 事件附加信息。
	             * @param {Object} data.element 该listbox控件的jQuery对象。
				 * @returns {Boolean} 如果返回true，则操作继续执行，否则，不再继续执行，操作取消并终止。
				 */
	            showing: function (e, data) { return true; },
	            /**
				 * 在控件展开后触发。
				 * @param {Event} e 事件信息。
	             * @param {Object} data 事件附加信息。
	             * @param {Object} data.element 该listbox控件的jQuery对象。
				 * @event shown
				 */
	            shown: $.noop,
	            /**
				 * 在控件收起时触发。
				 * @event hiding
				 * @param {Event} e 事件信息。
	             * @param {Object} data 事件附加信息。
	             * @param {Object} data.element 该listbox控件的jQuery对象。
				 * @returns {Boolean} 如果返回true，则操作继续执行，否则，不再继续执行，操作取消并终止。
				 */
	            hiding: function (e, data) { return true; },
	            /**
				 * 在控件收起后触发。
				 * @event hidden
				 * @param {Event} e 事件信息。
	             * @param {Object} data 事件附加信息。
	             * @param {Object} data.element 该listbox控件的jQuery对象。
				 */
	            hidden: $.noop,
	            hiden: $.noop,
	            /**
				 * 在控件销毁后触发。
				 * @event destroyed
				 * @param {Event} e 事件信息。
	             * @param {Object} data 事件附加信息。
	             * @param {Object} data.element 该listbox控件的jQuery对象。
				 */
	            destroyed: $.noop,
	            /**
				 * 在控件展开后，由于空间不足，压缩控件大小后触发。
				 * @event resized
				 * @param {Event} e 事件信息。
	             * @param {Object} data 事件附加信息。
	             * @param {Object} data.element 该listbox控件的jQuery对象。
				 */
	            resized: $.noop,

	            _isResized: false
	        },
	        /**
			 * 展开该控件。该方法会触发showing和shown两个事件。根据showing事件的返回值，决定是否继续执行show方法。
			 * @method show
			 * @param {Object} options 临时的控件配置信息。此次展开的操作会根据这个临时的配置信息进行。
			 * @param {Event} event 鼠标事件的Event对象。如果需要根据鼠标定位，则需要传递该参数。
			 */
	        show: function (options, event) {
	            var self = this,
					elem = this.element,
					temp = {};
	            // TODO：将coordinates集成到options中，以节省参数
	            if (!self.options.showing({}, { "element": self.element })) {
	                return;
	            }

	            // 将控件恢复到初始状态（大小，定位）
	            self._init();

	            // 根据大小和位置定位
	            $.extend(true, temp, self.options);
	            $.extend(true, temp, options);

	            elem.addClass("aui-visibility-hidden");
	            elem.css("z-index", temp.zIndex).show();
	            self._updatePosition(temp, event);
	            elem.removeClass("aui-visibility-hidden");
	            self.option("isOpening", true);

	            // 采用冒泡的方式注册事件
	            self._docuemntMouseDown = function (e) {
	                var $elem = e.target;

	                if (self.element[0] == e.target) {
	                    return;
	                }

	                if (!$.contains(self.element[0], $elem) && (self.options.dependence && !$.contains(self.options.dependence[0], $elem))) {
	                    self.hide();
	                }
	            };
	            self._dependenceMouseDown = function (e) {
	                self._passHide = true;
	            };

	            DOCUMENT
	                .off("mousedown" + self.eventNamespace)
	                .on("mousedown" + self.eventNamespace, self._docuemntMouseDown)
	                .off("touchend" + self.eventNamespace)
	                .on("touchend" + self.eventNamespace, self._docuemntMouseDown);

	            if ($.inArray(self.element, window.AUI.popupArray) < 0) {
	                window.AUI.popupArray.push(self.element);
	            }

	            self.options.shown({}, { "element": self.element });
	        },
	        /**
			 * 收起控件。该方法会触发hiding和hidden两个事件。根据hiding事件的返回值，决定是否继续执行hide方法。
			 * @method hide
			 */
	        hide: function (type) {
	            var self = this;
	            type = type == undefined ? -1 : type;
	            if (!self.options.hiding({}, { "element": self.element })) {
	                return;
	            }

	            self.element.hide();
	            self.option("isOpening", false);
	            //$(window).off("mousedown" + self.eventNamespace);
	            window.AUI.popupArray.pop();

	            self.options.hidden({}, {
	                element: self.element,
	                parameters: {
	                    type: type
	                }
	            });

	            if (self.options.dependence) {
	                self.options.dependence.off("mousedown" + self.eventNamespace, self._dependenceMouseDown);
	                self.options.dependence.off("touchend" + self.eventNamespace, self._dependenceMouseDown);
	            }
	            DOCUMENT.off('mousedown' + self.eventNamespace).off('touchend' + self.eventNamespace);
	        },

	        /**
			 * 获取或设置控件的顶层DIV元素的class属性值。
			 * @method popupClass
			 * @param {String} value 需要设置的值。
			 */
	        popupClass: function (value) {
	            if (arguments.length == 0) {
	                return this.options.popupClass;
	            }
	            this.option("popupClass", value);
	        },
	        /**
			 * 获取或设置控件展开时所依赖的元素。
			 * @method dependence
			 * @param {jQuery} value 需要设置的值。
			 */
	        dependence: function (value) {
	            if (arguments.length == 0) {
	                return this.options.dependence;
	            }
	            this.option("dependence", value);
	        },
	        /**
			 * 获取或设置控件展开时相对所依赖元素的位置。默认值为“bottom-left”。可用值有“top-left”、“top-right”、“bottom-left”、“bottom-right”、“mouse”。当所设的展开方向上没有足够空间的时候，会自动调整为该方向上相对的布局方式。如果两种方式都无法完全显示，则会选取相对空间较大的布局方式并压缩进行展示，同时触发resized事件。
			 * @method placement
			 * @param {String} value 需要设置的值。
			 */
	        placement: function (value) {
	            if (arguments.length == 0) {
	                return this.options.placement;
	            }
	            this.option("placement", value);
	        },
	        /**
			 * 获取或设置控件展开时，在依赖元素相对位置上的定位模式。默认模式为“vertical”，代表popup的显示位置会以dependence为基准纵向定位；可选模式还有“horizontal”，代表popup的显示位置会以dependence为基准横向定位。
			 * @method placementMode
			 * @param {String} value 需要设置的值。
			 */
	        placementMode: function (value) {
	            if (arguments.length == 0) {
	                return this.options.placementMode;
	            }
	            this.option("placementMode", value);
	        },
	        /**
			 * 获取或设置控件相对于默认展开位置的横向位移。
			 * @method offsetHorizontal
			 * @param {String} value 需要设置的值。
			 */
	        offsetHorizontal: function (value) {
	            if (arguments.length == 0) {
	                return this.options.offsetHorizontal;
	            }
	            this.option("offsetHorizontal", value);
	        },
	        /**
			 * 获取或设置控件相对于默认展开位置的纵向位移。
			 * @method offsetVertical
			 * @param {String} value 需要设置的值。
			 */
	        offsetVertical: function (value) {
	            if (arguments.length == 0) {
	                return this.options.offsetVertical;
	            }
	            this.option("offsetVertical", value);
	        },
	        /**
			 * 获取或设置控件的宽度。
			 * @method width
			 * @param {String} value 需要设置的值。
			 */
	        width: function (value) {
	            if (arguments.length == 0) {
	                return this.options.width;
	            }
	            this.option("width", value);
	        },
	        /**
			 * 获取或设置控件的高度。
			 * @method height
			 * @param {String} value 需要设置的值。
			 */
	        height: function (value) {
	            if (arguments.length == 0) {
	                return this.options.height;
	            }
	            this.option("height", value);
	        },
	        /**
			 * 获取或设置一个值，该值表示当前控件是否处在展开状态。
			 * @method isOpening
			 * @param {String} value 需要设置的值。
			 */
	        isOpening: function () {
	            return this.options.isOpening;
	        },
	        /**
			 * 获取或设置控件的z-index属性。
			 * @method zIndex
			 * @param {String} value 需要设置的值。
			 */
	        zIndex: function (value) {
	            if (arguments.length == 0) {
	                return this.options.zIndex;
	            }
	            this.option("zIndex", value);
	        },

	        _create: function () {
	            var elem = this.element,
					self = this;
	            //self.oParent = elem.offsetParent();
	            elem.addClass(this.options.popupClass)
	                .on("touchend" + self.eventNamespace, function (e) {
	                    e.stopPropagation();
	                });

	            if (!window.AUI.popupArray) {
	                window.AUI.popupArray = [];
	            }
	        },
	        _init: function () {
	            var elem = this.element;
	            elem.width(this.options.width)
					.height(this.options.height)
					.css({ left: 0, top: 0 })
					.hide();
	        },
	        _destroy: function () {
	            var self = this,
					elem = self.element;
	            elem.removeClass(self.options.popupClass);

	            self.options.destroyed({}, { "element": self.element });
	        },
	        _setOption: function (key, value) {
	            var data = { "oldValue": this.options[key], "newValue": value };
	            switch (key) {
	                case "placement":
	                    $.Widget.prototype._setOption.apply(this, arguments);
	                    if (this.options.isOpening) {
	                        this._updatePosition();
	                    }
	                    break;
	                default:
	                    $.Widget.prototype._setOption.apply(this, arguments);
	                    break;
	            }
	        },

	        _updatePosition: function (options, event) {
	            var self = this,
					elem = self.element,
					popupOption = {};
	            if (!options) {
	                options = self.options;
	            }

	            popupOption.of = options.dependence;
	            popupOption.collision = "flipfit flipfit";
	            popupOption.within = options.within;
	            switch (options.placement.toLowerCase()) {
	                case "top-left":
	                    if (options.placementMode && "vertical".indexOf(options.placementMode.toLowerCase()) == 0) {
	                        popupOption.my = "left+" + options.offsetHorizontal + " bottom+" + options.offsetVertical;
	                    }
	                    else {
	                        popupOption.my = "right+" + options.offsetHorizontal + " top+" + options.offsetVertical;
	                    }
	                    popupOption.at = "left top";
	                    break;
	                case "top-right":
	                    if (options.placementMode && "vertical".indexOf(options.placementMode.toLowerCase()) == 0) {
	                        popupOption.my = "right+" + options.offsetHorizontal + " bottom+" + options.offsetVertical;
	                    }
	                    else {
	                        popupOption.my = "left+" + options.offsetHorizontal + " top+" + options.offsetVertical;
	                    }
	                    popupOption.at = "right top";
	                    break;
	                case "bottom-left":
	                    if (options.placementMode && "vertical".indexOf(options.placementMode.toLowerCase()) == 0) {
	                        popupOption.my = "left+" + options.offsetHorizontal + " top+" + options.offsetVertical;
	                    }
	                    else {
	                        popupOption.my = "right+" + options.offsetHorizontal + " bottom+" + options.offsetVertical;
	                    }
	                    popupOption.at = "left bottom";
	                    break;
	                case "bottom-right":
	                    if (options.placementMode && "vertical".indexOf(options.placementMode.toLowerCase()) == 0) {
	                        popupOption.my = "right+" + options.offsetHorizontal + " top+" + options.offsetVertical;
	                    }
	                    else {
	                        popupOption.my = "left+" + options.offsetHorizontal + " bottom+" + options.offsetVertical;
	                    }
	                    popupOption.at = "right bottom";
	                    break;
	                case "mouse":
	                    popupOption.my = "left+" + options.offsetHorizontal + " top+" + options.offsetVertical;
	                    popupOption.of = event;
	                    break;
	                default:
	                    break;
	            }

	            self.element.position(popupOption);
	        }
	    });
	}(jQuery, AUI));


/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * <p>创建一个progressbar控制器。</p>
	 * 普通的progressbar使用：
	 
	 * JavaScript内容：
	 
		$("#progressbar").progressbar({
			value : "0",
			width : "300px",
			height : "22px"
		});
	 	 	
	 * HTML内容：

		<div id="progressbar">

		</div>

	 * 设置progressbar 的进度值：

	 
		$("#progressbar").progressbar({
			value : "5"
		});


	 * 设置progressbar 是否显示百分比：

	 
		$("#progressbar").progressbar({
		    hasRate : false
		});


	 * @name progressbar
	 * @class progressbar
	 * @author Bing.Han
	 * @desc 创建一个progressbar控制器。

	 * @constructor
	 * @param {Object} options 控件配置信息。该配置信息中的属性建议都在控件生成之前进行设置，否则可能会发生设置的属性值没有产生效果的问题。
	 * @param {String} options.height 获取或设置区域高度，默认为auto。该值只有在控件初始化时设置有效。
	 * @param {String} options.width 获取或设置区域宽度，默认为auto。该值只有在控件初始化时设置有效。
	 * @param {Boolean} options.hasRate 获取或设置一个值，该值表示是否显示百分比，默认为true, 显示。
	 * @param {Number} options.value 获取或设置显示的值。
	 * @param {Number} options.min 获取或设置最小值，默认为0。该值只有在控件初始化时设置有效。
	 * @param {Number} options.max 获取或设置最大值，默认为100。该值只有在控件初始化时设置有效。
	 * 
	 */
	(function ($) {
	    "use strict"

	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable
	        ko.bindingHandlers.progressbar = {
	            init: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).progressbar(value);
	            },
	            update: function (element, valueAccessor) {
	                var value = ko.toJS(ko.unwrap(valueAccessor()));
	                $(element).progressbar(value);
	            }
	        };
	    }
	    var
	        //常量
	        _constant = {
	            //进度条的样式
	            PROGRESSBAR_CLASS: 'aui-progressbar',
	            //value部件的样式
	            PROGRESSBAR_VALUE_PART_CLASS: 'aui-progressbar-value',
	            //圆角样式
	            PROGRESSBAR_RADIUS_CLASS: 'aui-progressbar-radius-right',
	            //content部件的样式
	            PROGRESSBAR_CONTENT_PART_CLASS: 'aui-progressbar-text-content'
	        };
	    ko.bindingHandlers.progressValue = {
	        update: function (element, valueAccessor) {
	            $(element).progressbar({
	                value: ko.utils.unwrapObservable(valueAccessor())
	            });
	        }
	    };
	    ko.bindingHandlers.progressPercent = {
	        update: function (element, valueAccessor) {
	            $(element).progressbar({
	                hasRate: ko.utils.unwrapObservable(valueAccessor())
	            });
	        }
	    };
	    $.widget("aui.progressbar", {
	        options: {
	            width: "auto",
	            height: "auto",
	            hasRate: true,
	            value: 0,
	            min: 0,
	            max: 100,
	            hasAnimate: true
	        },

	        _create: function () {
	            var
	                self = this,
	                el = self.element;
	            el
	                .attr({
	                    role: 'progressbar',
	                    tabindex: 0,
	                    'aria-valuemin': self.options.min,
	                    'aria-valuemax': self.options.max,
	                    'aria-readonly': true
	                })
	                .addClass(_constant.PROGRESSBAR_CLASS)
	                //创建value部件
	                .append('<div class="' + _constant.PROGRESSBAR_VALUE_PART_CLASS + '"></div>')
	                //创建content部件
	                .append('<div class="' + _constant.PROGRESSBAR_CONTENT_PART_CLASS + '"></div>');

	            self._valuePart = el.children('div[class~="' + _constant.PROGRESSBAR_VALUE_PART_CLASS + '"]');
	            self._contentPart = el.children('div[class~="' + _constant.PROGRESSBAR_CONTENT_PART_CLASS + '"]');
	        },

	        _init: function () {
	            this._refreshProgressbar();
	        },

	        _value: function () {
	            var self = this, c = self.options.value;
	            if (typeof c !== "number") {
	                var b = parseInt(c);
	                if (isNaN(b)) {
	                    c = 0;
	                } else {
	                    c = b;
	                }
	            }
	            return Math.min(self.options.max, Math.max(self.options.min, c))
	        },

	        _percentage: function () {
	            return 100 * this._value() / this.options.max;
	        },

	        _setOption: function (key, value) {
	            var self = this;
	            if (key === "value") {
	                self.options.value = value;
	                self._refreshProgressbar();
	            }

	            if (key === "hasRate") {
	                self.options.hasRate = value;
	                self._showText();
	            }
	        },

	        _showText: function () {
	            var
	                self = this,
	                con = self._contentPart;
	            if (self.options.hasRate) {
	                con.css('opacity', 1);
	            } else {
	                con.css('opacity', 0);
	            }
	        },

	        _refreshProgressbar: function () {
	            var
	                self = this,
	                value = self._value(),
	                percentage = self._percentage(),
	                width = Math.round(percentage) + "%",
	                el = self._valuePart,
	                con = self._contentPart;

	            if (self.options.width !== "auto") {
	                self.element.width(self.options.width);
	            }

	            if (self.options.height !== "auto") {
	                self.element.height(self.options.height);
	            }

	            self.element.attr('aria-valuenow', percentage);
	            if (self.options.hasAnimate === true) {
	                el.animate({
	                    width: width
	                }, 300, function () {
	                });
	            } else {
	                el.width(width);
	            }

	            con.text(width);
	            if (self.options.hasRate) {
	                con.css({
	                    'opacity': 1,
	                    "line-height": self.element.height() + "px"
	                });
	            } else {
	                con.css('opacity', 0);
	            }
	        },
	        _destroy: function () {
	            var
	                self = this,
	                el = self.element;
	            self._valuePart.removeClass(_constant.PROGRESSBAR_VALUE_PART_CLASS);
	            self._contentPart.removeClass(_constant.PROGRESSBAR_CONTENT_PART_CLASS);
	            self.element.removeClass(_constant.PROGRESSBAR_CLASS);
	        }
	    });
	})(jQuery);


/***/ },
/* 38 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author fqwu
	 * @fileoverview radio button控件。
	 */
	(function ($) {
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.radiobutton = {
	            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
	                var
	                    element = $(element),
	                    data = valueAccessor(),
	                    value = ko.toJS(ko.unwrap(data)),
	                    checked = data.checked,
	                    isCheckedObservable = ko.isObservable(checked),
	                    disabled = data.disabled,
	                    isDisabledObservable = ko.isObservable(disabled),
	                    check = value.check,
	                    isEnabledChanged = value.isEnabledChanged,
	                    unCheck = value.unCheck;


	                element.radiobutton(value);

	                element.radiobutton("option", "check", function (e, args) {
	                    if (isCheckedObservable) {
	                        checked(args.newValue);
	                    }

	                    $$.executeEventHandler(null, "checked", check, null, args);
	                });

	                element.radiobutton("option", "unCheck", function (e, args) {
	                    if (isCheckedObservable) {
	                        checked(args.newValue);
	                    }

	                    $$.executeEventHandler(self, "unChecked", unCheck, null, args);
	                });

	                if (isCheckedObservable) {
	                    checked.subscribe(function () {
	                        element.radiobutton('isChecked', checked());
	                    });
	                }

	                element.radiobutton("option", "isEnabledChanged", function (e, args) {
	                    if (isDisabledObservable) {
	                        disabled(args.newValue);
	                    }
	                    $$.executeEventHandler(null, "IsEnabledChanged", isEnabledChanged, null, args);
	                });

	                if (isDisabledObservable) {
	                    disabled.subscribe(function () {
	                        element.radiobutton('isEnabled', !disabled());
	                    });
	                }
	            }
	        };
	    }

	    // 全局变量
	    var
		//radiobutton的唯一标识
		uuid = 1,
		//所有radio组的集合
		radiosGroup = {},
		/**
		 * 常量
		 */
		constant = {
		    // radiobutton的基础样式
		    RADIOBUTTON_CLASS: "aui-radiobutton",
		    /**
			 * 基础input的样式
			 */
		    RADIOBUTTON_INPUT_CLASS: "aui-radiobutton-source",
		    // radiobutton横向布局时的样式
		    RADIOBUTTON_HORIZONTAL_CLASS: "aui-radiobutton-horizontal",
		    // _radio part的基础样式
		    RADIOBUTTON_RADIO_CLASS: "aui-radiobutton-radio",
		    //
		    RADIOBUTTON_BG_CLASS: "fi-radiobutton-bg",
		    //
		    RADIOBUTTON_BORDER_CLASS: "fi-radiobutton-border",
		    //_radio部件图片的基础样式
		    RADIO_BORDER_CLASS: 'aui-radiobutton-radio-border',
		    RADIO_BORDER_FOCUS_CLASS: "aui-radiobutton-radio-border-focus",
		    // _radio part的鼠标移入时的样式
		    RADIO_PART_MOUSEOVER_CLASS: "aui-radiobutton-radio-mouseover",
		    RADIO_PART_FOCUS_CLASS: "aui-radiobutton-radio-focus",
		    //
		    BORDER_MOUSEOVER_CLASS: "aui-radiobutton-border-mouseover",
		    // _radio part的鼠标按下时的样式
		    RADIO_MOUSEDOWN_CLASS: "aui-radiobutton-radio-mousedown",
		    BORDER_MOUSEDOWN_CLASS: "aui-radiobutton-border-mousedown",
		    // _radio part的不可用时的样式
		    RADIO_DISABLED_CLASS: "aui-radiobutton-radio-disabled",
		    RADIO_BORDER_DISABLED_CLASS: "aui-radiobutton-radio-border-disabled",
		    // _checked part 的基础样式
		    RADIOBUTTON_CHECKED_CLASS: "fi-radiobutton-point",
		    // _checked部件图片的样式。
		    RADIOBUTTON_CHECKED_IMAGE_CLASS: 'aui-radiobutton-checked-image',
		    // _checked part 选中状态的样式
		    RADIO_CHECKED_CLASS: "aui-radiobutton-checked-checked",
		    /**
	         * _checked part 选中且不可用状体的样式
	         */
		    RADIO_CHECKED_DISABLED_CLASS: "aui-radiobutton-checked-disabled",
		    /**
	         * radiobutton的content区域的样式
	         */
		    RADIOBUTTON_CONTENT_CLASS: "aui-radiobutton-content",
		    /**
	         * radiobutton的content区域不换行时的样式
	         */
		    RADIOBUTTON_CONTENT_NOWRAP_CLASS: 'aui-radiobutton-content-nowrap'
		};

	    /**
	     * <div style="font-weight:600">表示一个按钮，使用该按钮，用户可从一组选项中选择一个选项。</div>
	     *html：
	    
	     <div>
	        <input class="my_class" type="radio" id="radio1" name="radio" checked="checked" content="This is test" wt-width="120" />
	        <input class="my_class" type="radio" id="radio3" name="radio" content="Test" />
	     </div>
	    
	     *js：
	    
	     $("input[class='my_class']").radiobutton();
	    
	     * @class radiobutton
	     * @author Fengqiang.Wu
	     * @constructor
	     * @param {Object} options 控件配置信息。
	     * @param {Boolean} options.disabled 获取或设置一个值，该值表示控件的可用状态。如果为true，则表示控件不可用，反之，则表示控件可用。
	     * @param {Boolean} options.checked 获取或设置一个值，该值表示控件是否被选中。如果为true，则表示选中控件，反之，则表示没有选中控件。
	     * @param {String} options.content 获取或设置content依赖项属性的值，该值表示控件的文字部分。该值只有在控件初始化时设置有效。
	     * @param {Boolean} options.isInline 设置一个值，该值表示控件是否是横向排列。如果为true，则表示控件是横向排列的，反之，则表示控件是纵向排列的。默认值是false。该值只有在控件初始化时设置有效。
	     * @param {Boolean} options.isWordwrap 设置一个值，该值表示控件的content部分是否可换行。如果为true，则表示控件的content部分，反之，则表示控件的content部分不可换行。默认值是true。该值只有在控件初始化时设置有效。
	     * @param {Object} options.check check事件对应的委托。
	     * @param {Object} options.unCheck unCheck事件对应的委托。
	     * @param {Object} options.isEnabledChanged isEnabledChanged事件对应的委托。
	     *
	     */
	    $.widget("aui.radiobutton", {
	        /** @lends radiobutton.prototype */
	        // These options will be used as defaults
	        options: {
	            disabled: null,
	            checked: null,
	            content: "",
	            isInline: false,
	            isWordwrap: true,
	            //事件自定义参数,参数的名称与事件名称一一对应。
	            parameters: {},
	            /**
	             * checked 事件的委托
	             */
	            check: $.noop,
	            /**
	             * unChecked 事件的委托
	             */
	            unCheck: $.noop,
	            /**
	             * isEnabledChanged 事件的委托
	             */
	            isEnabledChanged: $.noop
	        },
	        _create: function () {
	            var
	            //
	            self = this,
	            //获取承载元素的content属性
	            content = self.element.attr("content") || self.element.attr("data-content") || self.options.content,
	            //组名
	            name = self._name = self.element.attr("name");

	            self.options.content = content == null ? '' : content;

	            if (typeof self.options.checked != 'boolean') {
	                self.options.checked = !!self.element.prop('checked');
	            } else {
	                self.element.prop('checked', self.options.checked);
	            }
	            //触发选中radiobutton的checked事件。
	            self._oldChecked = self.options.checked ? null : self.options.checked;

	            if (typeof self.options.disabled != 'boolean') {
	                self.options.disabled = !!self.element.prop('disabled');
	            } else {
	                self.element.prop('disabled', self.options.disabled);
	            }
	            //触发disabled状态的radiobutton的enablechanged事件。
	            self._oldDisabled = self.options.disabled ? null : self.options.disabled;

	            //设置uuid
	            self._uuid = uuid;
	            self.element.data('uuid', uuid++);
	            self.element.addClass(constant.RADIOBUTTON_INPUT_CLASS);

	            // 设置宽度
	            //if (self.options.width === "auto" && $.isNumeric(self.element.attr("wt-width"))) {
	            //    self.options.width = self.element.attr("wt-width");
	            //}

	            // 设置isInline
	            if (self.element.attr("wt-isInline") && self.element.attr("wt-isInline") == "true") {
	                self.options.isInline = true;
	            }

	            // 创建 content part
	            self._label = self.element.wrap('<span >' + self.options.content + '</span>').parent();
	            self._content = self._label.wrap('<div class="' + constant.RADIOBUTTON_CONTENT_CLASS + '"></div>').parent();

	            // 创建 root part
	            self._root = self._content.wrap('<div></div>').parent();
	            self._root.addClass(constant.RADIOBUTTON_CLASS);

	            if (self.options.isWordwrap == false) {
	                self._label.addClass(constant.RADIOBUTTON_CONTENT_NOWRAP_CLASS);
	            }

	            self._createRadioPart();
	            //radio部件
	            self._radio = self._root.children("." + constant.RADIOBUTTON_RADIO_CLASS);
	            self._radioBorder = self._radio.children("." + constant.RADIO_BORDER_CLASS);
	            //checked部件
	            self._checkedImg = self._radio.find('.' + constant.RADIOBUTTON_CHECKED_IMAGE_CLASS);

	            self._createGroup();

	            self._onCheckedChanged(self.options.checked);
	            self._setOption("disabled", self.options.disabled);

	            self.refresh();
	            self._initializesEvent();
	        },
	        /**
	         * 创建radio部件。
	         * @method _createRadioPart
	         * @private
	         */
	        _createRadioPart: function () {
	            var
	            //
	            self = this,
	            //
	            html = '';
	            html += '<div class="' + constant.RADIOBUTTON_RADIO_CLASS + ' ' + constant.RADIOBUTTON_BG_CLASS + '">';
	            html += '<div class="' + constant.RADIO_BORDER_CLASS + ' ' + constant.RADIOBUTTON_BORDER_CLASS + '" ></div>';
	            html += '<div class="' + constant.RADIOBUTTON_CHECKED_IMAGE_CLASS + ' ' + constant.RADIOBUTTON_CHECKED_CLASS + '" /></div>';

	            html += '</div>';
	            self._root.append(html);
	        },
	        /**
	         * 注册控件内部事件
	         * @method _initializesEvent
	         * @private
	         */
	        _initializesEvent: function () {
	            var self = this;

	            self.element
	            //
	            .on('focus' + self.eventNamespace, self, self._radioFocus)
	            //
	            .on('blur' + self.eventNamespace, self, self._radioBlur);

	            self._radio
	            //
	            .on("mouseover" + self.eventNamespace, self, self._radioMouseOver)
	            //
	            .on("mouseout" + self.eventNamespace, self, self._radioMouseOut)
	            //
	            .on("click" + self.eventNamespace, self, self._radioClick)
	            //
	            .on("mousedown" + self.eventNamespace, self, self._radioMouseDown);
	            //
	            $(document).on("mouseup" + self.eventNamespace, self, self._radioMouseUp);

	            self.element
	            //
	            .on("keydown" + self.eventNamespace, self, self._elementKeyDown)
	            //
	            .on("keyup" + self.eventNamespace, self, self._elementKeyUp);

	            self._label
	            //
	            .on("mouseover" + self.eventNamespace, self, self._radioMouseOver)
	            //
	            .on("mouseout" + self.eventNamespace, self, self._radioMouseOut)
	            //
	            .on("click" + self.eventNamespace, self, self._radioClick);

	        },
	        _setOption: function (key, value, parameters) {
	            var
	            //
	            self = this,
	            //
	            group = radiosGroup[self._name],
	            //事件参数
	            eventArgs = $.extend(eventArgs, $$._EventArgs);

	            eventArgs.oldValue = self.options[key];

	            self.options[key] = value;

	            switch (key) {
	                case "checked":
	                    self._oldValue = eventArgs.oldValue;
	                    self.isChecked(value, parameters);
	                    break;
	                case "disabled":
	                    self._onIsEnabledChanged($.extend(eventArgs, {
	                        element: self.element,
	                        value: value,
	                        newValue: value
	                    }));
	                    break;
	                case "isInline":
	                    self.refresh();
	                    break;
	            }

	        },
	        /**
	         * 移除同组的所有radiobutton的选中样式
	         * @method _removeCheckedClass
	         * @private
	         */
	        _removeCheckedClass: function () {
	            var
	            //
	            name = this._name,
	            //
	            group = radiosGroup[name],
	            //
	            index = group.checkedIndex - group.minIndex;

	            group.radios[index]
	            //
	            .removeClass(constant.RADIO_CHECKED_CLASS + ' ' + constant.RADIO_CHECKED_DISABLED_CLASS);
	        },
	        /**
	         * 获取或设置一个值，该值指示用户是否可以与控件交互。
	         * @method isEnabled
	         * @param {Boolean} value 需要设置的值。不传值时，返回控件当前的isEnabled值。
	         */
	        isEnabled: function (value) {
	            var self = this;

	            if (typeof value == "boolean") {
	                self._setOption("disabled", !value);
	            } else {
	                return !self.options.disabled;
	            }
	        },
	        /**
	         * 获取或设置控件的选中状态。
	         * @method isChecked
	         * @param {Boolean} value 需要设置的值。不传值时，返回控件当前的选中状态。
	         * @param {Object} parameters 需要传递给checked的事件的额外参数。
	         */
	        isChecked: function (value, parameters) {
	            var self = this;
	            if (typeof value == "boolean") {
	                var
	                //
	                group = radiosGroup[self._name],
	                //
	                current_uuid = self.element.data('uuid'),
	                //
	                checked_uuid = null,
	                //
	                min_uuid = group ? group.minIndex : 0,
	                //变动前的值
	                oldValue = self._oldValue;

	                //如果当前radiobutton是没有选中的，获取同组的选中的radiobutton的序号
	                if (oldValue === false) {
	                    if (group) {
	                        checked_uuid = group.checkedIndex;
	                    }
	                }
	                //禁止在选中状态下连续触发
	                if (value !== oldValue) {
	                    self._onCheckedChanged(value, parameters);
	                    if (value == true) {
	                        //从false状态到true状态，并且组中当前选中的不是自己时，取消选中。
	                        if (checked_uuid != null && checked_uuid != current_uuid) {
	                            group.elements[checked_uuid - min_uuid].radiobutton("isChecked", false, parameters);
	                        }
	                    }
	                }
	            } else {
	                return self.options.checked;
	            }
	        },
	        //checked属性变化时触发
	        _onCheckedChanged: function (value, parameters) {
	            var
	            //
	            self = this,
	            //
	            group = radiosGroup[self._name],
	            //事件参数
	            eventArgs = $$.Event({ element: self.element });

	            self.options.checked = value;
	            self._oldValue = value;
	            if (value) {
	                //选中当前节点，更新组中的checkedIndex的属性
	                if (group) {
	                    group.checkedIndex = self._uuid;
	                }
	                self._onChecked($$.Event({
	                    oldValue: !value,
	                    newValue: value,
	                    element: self.element,
	                    parameters: parameters
	                }));
	            } else {
	                self._onUnChecked($$.Event({
	                    oldValue: !value,
	                    newValue: value,
	                    element: self.element,
	                    parameters: parameters
	                }));

	            }
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            if (args) {
	                args.parameters = self.options.parameters[type];
	            }
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        /**
	         * 获取或设置控件是否横向排列。
	         * @method isInline
	         * @param {Boolean} value 需要设置的值。不传值时，返回控件当前的isInline值。
	         */
	        isInline: function (value) {
	            var self = this;
	            if (typeof value == "boolean") {
	                self._setOption("isInline", value);
	            } else {
	                return !self.options.isInline;
	            }
	        },
	        /**
	         * 刷新布局和样式。
	         * @method refresh
	         */
	        refresh: function () {
	            var
	            //
	            self = this,
	            //
	            root = self._root,
	            //
	            span = self._label;
	            if (self.options.isInline == true) {
	                root.addClass(constant.RADIOBUTTON_HORIZONTAL_CLASS);
	            } else {
	                root.removeClass(constant.RADIOBUTTON_HORIZONTAL_CLASS);
	            }
	        },
	        getSelectedValue: function () {
	            var
	                group = radiosGroup[this._name],
	                inputs = group.elements,
	                i = 0,
	                c = inputs.length;

	            for (; i < c; i++) {
	                if (inputs[i].is(":checked")) {
	                    return inputs[i].val();
	                }
	            }
	        },
	        /**
	         * 清除所有添加到Dom元素上的修改。
	         * @method _destroy
	         * @private
	         */
	        _destroy: function () {
	            var
	            //
	            self = this,
	            //
	            nameSpace = self.eventNamespace;

	            self._radio.remove();

	            self._label.remove();

	            self._checked.remove();

	            self.element
	            //
	            .off(nameSpace)
	            //
	            .removeClass()
	            //
	            .unwrap();

	            self._updateGroup();

	            $$.clearEventHandler(self.options.check);
	            $$.clearEventHandler(self.options.isEnabledChanged);
	            $$.clearEventHandler(self.options.unCheck);
	        }
	    });

	    /**
	     *	键盘事件相关
	     */
	    $.extend($.aui.radiobutton.prototype, {
	        /**
	         * element部件在按键弹起时触发
	         * @method _elementKeyUp
	         * @private
	         * @param { jQuery.Ecent} e 事件参数
	         */
	        _elementKeyUp: function (e) {
	            switch (e.keyCode) {
	                // 左箭头
	                case 37:
	                    // 上箭头
	                case 38:
	                    // 右箭头
	                case 39:
	                    // 下箭头
	                case 40:
	                    e.data.isChecked(true);
	                    break;
	            }
	        },
	        /**
	         * element部件在按键弹起时触发
	         * @method _elementKeyDown
	         * @private
	         * @param { jQuery.Ecent} e 事件参数
	         */
	        _elementKeyDown: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            index = self.element.data('uuid'),
	            //
	            name = self._name,
	            //
	            group = radiosGroup[name],
	            //
	            max = group ? group.maxIndex : 0,
	            //
	            min = group ? group.minIndex : 0,
	            //
	            checkedIndex = group ? group.checkedIndex : null,
	            //
	            value = self.options.checked;

	            if (index == checkedIndex) {
	                return;
	            }

	            // 只更新样式，与原生控件同步，以及事件的触发在keyUp中执行
	            switch (e.keyCode) {
	                // 空格
	                case 32:
	                    //如果
	                    if (!value) {
	                        self.isChecked(true);
	                    }
	                    break;
	                    // 左箭头
	                case 37:
	                    // 上箭头
	                case 38:
	                    //如果控件处于选中状态，触发当前控件的unChecked事件，之后选中同组中的下一个控件
	                    if (value && --index >= min) {
	                        self._onCheckedChanged(false);
	                    }
	                    break;
	                    // 右箭头
	                case 39:
	                    // 下箭头
	                case 40:
	                    if (value && ++index <= max) {
	                        self._onCheckedChanged(false);
	                    }
	                    break;
	            }
	        }
	    });

	    /**
	     * 组相关逻辑
	     */
	    $.extend($.aui.radiobutton.prototype, {
	        /**
	         * 创建组的相关属性
	         * @method _createGroup
	         * @private
	         */
	        _createGroup: function () {
	            var
	            //
	            self = this,
	            //
	            name = self._name,
	            //
	            group = null;
	            if (name) {

	                //更新radio组中的所有radio的信息
	                group = radiosGroup[name] = radiosGroup[name] || {};

	                //与当前radiobutton一组的原生input
	                group.elements = group.elements || [];

	                //与当前radiobutton一组的radiobutton
	                group.radios = group.radios || [];

	                //与当前radiobutton一组的radiobutton的序号
	                group.uuids = group.uuids || [];
	                //组中选中radiobutton的uuid
	                group.checkedIndex = group.checkedIndex || null;
	                //
	                if (group.minIndex == null) {
	                    group.minIndex = self._uuid;
	                }

	                group.maxIndex = self._uuid;

	                if (self.options.checked === true) {
	                    group.checkedIndex = self._uuid;
	                }

	                //与当前radiobutton一组的原生input
	                group.elements.push(self.element);
	                //与当前radiobutton一组的radiobutton
	                group.radios.push(self._checked);

	                group.uuids.push(self._uuid);
	            }
	        },
	        /**
	         * 更新组的相关属性
	         * @method _updateGroup
	         * @private
	         */
	        _updateGroup: function () {
	            var
	            //
	            self = this,
	            //
	            name = self._name,
	            //
	            group = radiosGroup[name],
	            //
	            uuid = self._uuid,
	            //
	            min = group.minIndex,
	            //删除项在group.uuids的序号
	            index = uuid - min;

	            if (uuid == group.checkedIndex) {
	                group.checkedIndex = null;
	            }
	            delete group.elements[index];
	            delete group.radios[index];
	            delete group.uuids[index];
	        }
	    });

	    /**
	     * 鼠标操作相关逻辑
	     */
	    $.extend($.aui.radiobutton.prototype, {
	        /**
	         * _radio部件点击时触发
	         * @method _radioClick
	         * @private
	         */
	        _radioClick: function (e) {
	            var self = e.data;

	            // 只有在控件可用时才能进行radio的选中
	            if (!self.options.disabled) {
	                self.isChecked(true);
	            }
	        },
	        /**
	         * element部件获取焦点时触发
	         * @method _radioFocus
	         * @private
	         */
	        _radioFocus: function (e) {
	            var self = e.data;
	            self._radio.addClass(constant.RADIO_PART_FOCUS_CLASS);
	            self._radioBorder.addClass(constant.RADIO_BORDER_FOCUS_CLASS);
	        },
	        //element部件失去焦点时触发
	        _radioBlur: function (e) {
	            var self = e.data;
	            self._radio.removeClass(constant.RADIO_PART_FOCUS_CLASS);
	            self._radioBorder.removeClass(constant.RADIO_BORDER_FOCUS_CLASS);
	        },
	        //_radio部件鼠标移入时触发
	        _radioMouseOver: function (e) {
	            var self = e.data;
	            self._radio.addClass(constant.RADIO_PART_MOUSEOVER_CLASS);
	            self._radioBorder.addClass(constant.BORDER_MOUSEOVER_CLASS);
	        },
	        //_radio部件鼠标移出时触发
	        _radioMouseOut: function (e) {
	            var self = e.data;
	            self._radio.removeClass(constant.RADIO_PART_MOUSEOVER_CLASS);
	            self._radioBorder.removeClass(constant.BORDER_MOUSEOVER_CLASS);
	        },
	        //_radio部件鼠标左键按下时触发
	        _radioMouseDown: function (e) {
	            var self = e.data;
	            self._radio.addClass(constant.RADIO_MOUSEDOWN_CLASS);
	            self._radioBorder.addClass(constant.BORDER_MOUSEDOWN_CLASS);
	        },
	        //_radio部件鼠标右键弹起时触发
	        _radioMouseUp: function (e) {
	            var self = e.data;
	            self._radio.removeClass(constant.RADIO_MOUSEDOWN_CLASS);
	            self._radioBorder.removeClass(constant.BORDER_MOUSEDOWN_CLASS);
	        },
	    });

	    /**
	     * 事件相关逻辑
	     */
	    $.extend($.aui.radiobutton.prototype, {
	        /**
	         * 在选中radionutton时发生
	         * @event check
	         * @param {Function} handler 需要添加或者删除的方法
	         * @param {Boolean} isAdd 是否添加
	         */
	        check: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.check, handler, isAdd);
	        },
	        //引发checked事件
	        _onChecked: function (data) {
	            var self = this;

	            self._checkedImg.addClass(constant.RADIO_CHECKED_CLASS);

	            // 更新原生控件对应的属性
	            self.element.prop("checked", self.options.checked);

	            if (self.options.checked != self._oldChecked) {
	                self._trigger("check", null, data);
	                self._oldChecked = self.options.checked;
	            }

	        },
	        /**
	         * 在未选中 radiobutton 时发生。
	         * @event unCheck
	         * @param {Function} handler 需要添加或者删除的方法
	         * @param {Boolean} isAdd 是否添加
	         */
	        unCheck: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.unCheck, handler, isAdd);
	        },
	        //引发unChecked事件
	        _onUnChecked: function (data) {
	            var self = this;
	            self._checkedImg
	            //
	            .removeClass(constant.RADIO_CHECKED_DISABLED_CLASS + ' ' + constant.RADIO_CHECKED_CLASS);

	            self.element.prop("checked", self.options.checked);
	            if (self.options.checked != self._oldChecked) {
	                self._trigger("unCheck", null, data);

	                self._oldChecked = self.options.checked;
	            }

	        },
	        /**
	         * 当 IsEnabled 属性更改时发生。
	         * @event isEnabledChanged
	         * @param {Function} handler 需要添加或者删除的方法
	         * @param {Boolean} isAdd 是否添加
	         */
	        isEnabledChanged: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.isEnabledChanged, handler, isAdd);
	        },
	        //引发isEnable的事件
	        _onIsEnabledChanged: function (data) {
	            var
	            //
	            self = this;
	            if (self.options.disabled === false) {
	                self._radio.removeClass(constant.RADIO_DISABLED_CLASS);
	                self._radioBorder.removeClass(constant.RADIO_BORDER_DISABLED_CLASS);
	                self._checkedImg.removeClass(constant.RADIO_CHECKED_DISABLED_CLASS);
	            } else {
	                self._radio.addClass(constant.RADIO_DISABLED_CLASS);
	                self._radioBorder.addClass(constant.RADIO_BORDER_DISABLED_CLASS);
	                self._checkedImg.addClass(constant.RADIO_CHECKED_DISABLED_CLASS);
	            }

	            self.element.prop("disabled", self.options.disabled);

	            if (self._oldDisabled != self.options.disabled) {
	                // 执行委托
	                $$.executeEventHandler(self, "IsEnabledChanged", self.options.isEnabledChanged, null, data);
	                self._oldDisabled = self.options.disabled;
	            }

	        }
	    });
	}(jQuery));


/***/ },
/* 39 */
/***/ function(module, exports) {

	(function ($$, $) {

	    var uuid = -1,
	        _constant = {
	            //range picker 对应的class
	            RANGE_PICKER_CLASS: "aui-rangepicker",
	            //range picker 在disabled状态时使用的class
	            RANGE_PICKER_DISABLED_CLASS: "aui-rangepicker-disabled",
	            //RANGE_PICKER_END_CLASS: "aui-rangepicker1-end",
	            RANGE_PICKER_DISPLAY: "aui-rangepicker-display",
	            RANGE_PICKER_TITLE: "aui-rangepicker-title",
	            RANGE_PICKER_VALIDATION: "aui-rangepicker-validation",
	            RANGE_PICKER_OPERATER: "aui-rangepicker-operater",
	            RANGE_PICKER_NO_TIMEPICKER: "aui-rangepicker-no-timepicker",
	            RANGR_PICKER_BLOCK: "aui-rangepicker-block"
	        };
	    $.widget("aui.rangepicker", {
	        //window对应的jQuery对象
	        $window: null,
	        //body对应的jQuery对象
	        $body: null,
	        isValidate: true,
	        nowValidate: true,
	        startDPId: 'aui-rangepicker-start-',
	        endDPId: 'aui-rangepicker-end-',
	        validationId: 'aui-rangepicker-validation-',
	        order: 0,
	        options: {
	            //获取或设置一个值，该值表示显示日期的格式
	            dateTimeFormat: 'dd-MM-yy',
	            //获取或设置一个值，该值表示控件是否可用。
	            disabled: false,
	            //获取或设置一个值，该值表示是否开启timezone功能。默认值false
	            hasTimeZone: false,
	            hasTimePicker: true,
	            is24HourSupported: false,
	            //事件自定义参数,参数的名称与事件名称一一对应。
	            startDateTitle: "Start:",
	            endDateTitle: "End:",
	            parameters: {},
	            //选中的开始时间
	            selectedStartDate: null,
	            //选中的结束时间
	            selectedEndDate: null,
	            //设置一个值，该值表示按照那种视图显示，默认按照日视图显示。
	            displayMode: $$.gcalendar("view").month,
	            //获取或设置一个值，该值指示控件的值是否是只读的
	            isReadOnly: true,
	            //获取或设置一个值，该值表示是否对选中的日期进行验证。
	            validateTime: false,
	            width: 250,
	            zIndex: 1,
	            //
	            selectionChanged: $.noop,
	            //gcalendar部件打开时触发
	            shown: $.noop,
	            //gcalendar部件关闭时触发
	            hidden: $.noop

	        },
	        _create: function () {
	            this._initMembers()
	            ._createRangePicker()
	            ._initCalendar()
	            ._loaded();
	        },
	        _loaded: function () {
	            var self = this,
	                options = self.options;
	            if (options.selectedStartDate) {
	                self._setOption("selectedStartDate", options.selectedStartDate);
	            }
	            if (options.selectedEndDate) {
	                self._setOption("selectedEndDate", options.selectedEndDate);
	            }
	            self._disable(options.disabled);

	            $(window).resize(function () {
	                self._resizeContent();
	            });
	            self._resizeContent();
	            return self;
	        },
	        _resizeContent: function () {
	            var self = this;
	            var width = self.element.width();
	            if (width <= 700 && self.options.hasTimePicker) {
	                self.$operater.hide();
	                self.$endDP.parent().css({
	                    "margin-top": "20px"
	                });
	            } else {
	                self.$operater.show();
	                self.$endDP.parent().css({
	                    "margin-top": "0px"
	                });
	            }
	        },
	        _setOption: function (key, value) {
	            var self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;
	            switch (key) {
	                case "hasTimePicker":
	                    self.$startDP.datepicker("option", "hasTimePicker", value);
	                    self.$endDP.datepicker("option", "hasTimePicker", value);
	                    break;
	                case "selectedStartDate":
	                    self.$startDP.datepicker("option", "selectedStartDate", value);
	                    break;
	                case "selectedEndDate":
	                    self.$endDP.datepicker("option", "selectedStartDate", value);
	                    break;
	                case "disabled":
	                    self._disable(value)
	                    break;
	                default: break;
	            }
	        },
	        _disable: function (value) {
	            var self = this;
	            if (value && value.constructor.name == "String") value = value.toLowerCase();
	            var disable = { start: false, end: false };
	            if (value == "start" || value == "both" || value === true) disable.start = true;
	            if (value == "end" || value == "both" || value === true) disable.end = true;
	            self.$startDP.datepicker("option", "disabled", disable.start);
	            self.$endDP.datepicker("option", "disabled", disable.end);
	        },
	        _initMembers: function () {
	            var self = this, i;
	            ++uuid;
	            self._initId();
	            return self;
	        },
	        //初始化Id
	        _initId: function () {
	            var self = this;
	            self.startDPId += uuid;
	            self.endDPId += uuid;
	            self.validationId += uuid;
	        },
	        _createRangePicker: function () {
	            var self = this,
	                h = -1,
	                startHtml = [];
	            self.$startDP = $('<div id="' + self.startDPId + '"></div>');
	            self.$endDP = $('<div id="' + self.endDPId + '"></div>');
	            self.$operater = $('<div class="' + _constant.RANGE_PICKER_OPERATER + '">-</div>');
	            self.$validateDP = $('<div class="' + _constant.RANGE_PICKER_VALIDATION + '"></div>');

	            self.element.addClass(_constant.RANGE_PICKER_CLASS).append(self.$startDP).append(self.$operater).append(self.$endDP).append(self.$validateDP);
	            self.$validateDP.hide();
	            return self;
	        },
	        _initCalendar: function () {
	            var self = this, options = self.options, el = self.element,
	              startOptions = {
	                  dateTimeFormat: options.dateTimeFormat,
	                  disabled: options.disabled,
	                  hasTimeZone: options.hasTimeZone,
	                  hasTimePicker: options.hasTimePicker,
	                  is24HourSupported: options.is24HourSupported,
	                  parameters: options.parameters,
	                  selectedStartDate: options.selectedStartDate,
	                  displayMode: options.displayMode,
	                  isReadOnly: true,
	                  zIndex: 1,
	                  selectionChanged: function (e, args) {
	                      self._startDateChanged(e, args)
	                  }
	              },
	              endOptions = {
	                  dateTimeFormat: options.dateTimeFormat,
	                  disabled: options.disabled,
	                  hasTimeZone: options.hasTimeZone,
	                  hasTimePicker: options.hasTimePicker,
	                  is24HourSupported: options.is24HourSupported,
	                  parameters: options.parameters,
	                  selectedStartDate: options.selectedEndDate,
	                  displayMode: options.displayMode,
	                  isReadOnly: true,
	                  zIndex: 1,
	                  selectionChanged: function (e, args) {
	                      self._endDateChanged(e, args);
	                  }
	              };

	            self.$startDP
	                .datepicker(startOptions).before("<div class='" + _constant.RANGE_PICKER_TITLE + "'>" + options.startDateTitle + "</div>").parent().addClass(_constant.RANGE_PICKER_DISPLAY);
	            self.$endDP
	                .datepicker(endOptions).before("<div class='" + _constant.RANGE_PICKER_TITLE + "'>" + options.endDateTitle + "</div>").parent().addClass(_constant.RANGE_PICKER_DISPLAY);

	            if (!self.options.hasTimePicker) {
	                self.$startDP.css({ "width": "100%" });
	                self.$endDP.css({ "width": "100%" });
	                el.addClass(_constant.RANGR_PICKER_BLOCK);
	                self.$startDP.parent().addClass(_constant.RANGE_PICKER_NO_TIMEPICKER);
	                self.$endDP.parent().addClass(_constant.RANGE_PICKER_NO_TIMEPICKER);
	            }
	            return self;
	        },
	        _startDateChanged: function (e, args) {
	            var self = this,
	            oldStart = self.options.selectedStartDate,
	               oldEnd = self.options.selectedEndDate;

	            self.options.selectedStartDate = args.newValue;
	            self._trigger("selectionChanged", null, $$.Event({
	                element: self.element,
	                oldValue: {
	                    start: oldStart,
	                    end: oldEnd
	                },
	                newValue: {
	                    start: self.options.selectedStartDate,
	                    end: self.options.selectedEndDate
	                }
	            }));
	            self._changedValidation();
	        },
	        _endDateChanged: function (e, args) {
	            var self = this,
	                 oldStart = self.options.selectedStartDate,
	               oldEnd = self.options.selectedEndDate;
	            self.options.selectedEndDate = args.newValue;
	            self._trigger("selectionChanged", null, $$.Event({
	                element: self.element,
	                oldValue: {
	                    start: oldStart,
	                    end: oldEnd
	                },
	                newValue: {
	                    start: self.options.selectedStartDate,
	                    end: self.options.selectedEndDate
	                }
	            }));
	            self._changedValidation();
	        },
	        _changedValidation: function () {
	            var self = this,
	                options = self.options;

	            if (!isNaN(Date.parse(self.options.selectedStartDate)) || !isNaN(Date.parse(self.options.selectedEndDate))) {
	                self._validateNow();
	            }
	            if (!isNaN(Date.parse(self.options.selectedStartDate)) && !isNaN(Date.parse(self.options.selectedEndDate)) && self.nowValidate) {
	                self._validation();
	            }
	        },
	        _validateNow: function () {
	            var self = this,
	                options = self.options,
	                _now = new Date();
	            if (!!options.validateTime) {
	                var _type = options.validateTime.toLowerCase(),
	                    _timeStart = _getDate(self.options.selectedStartDate),
	                    _timeEnd = _getDate(self.options.selectedEndDate);

	                var _conditionStart = (_timeStart < Date.parse(_now)) && (!!_timeStart);
	                var _conditionEnd = (_timeEnd < Date.parse(_now)) && (!!_timeEnd);
	                if ((_type == "start" || _type == "both" || _type === true) && _conditionStart) {
	                    self.$validateDP.html($$.I18N.rangepicker.earlierStartTime).show();
	                    self.nowValidate = false;
	                    return false;
	                } else if ((_type == "end" || _type == "both" || _type === true) && _conditionEnd) {
	                    self.$validateDP.html($$.I18N.rangepicker.earlierEndTime).show();
	                    self.nowValidate = false;
	                    return false;
	                } else {
	                    self.nowValidate = true;
	                }
	                function _getDate(d) {
	                    if (!d) return null;
	                    var d = new Date(d);
	                    if (!options.hasTimePicker) {
	                        d.setDate(d.getDate() + 1);
	                        return Date.parse(d) - 1;
	                    } else {
	                        return Date.parse(d);
	                    }
	                }
	            }
	        },
	        _validation: function () {
	            var self = this,
	                start = self.options.selectedStartDate,
	                end = self.options.selectedEndDate;

	            self.isValidate = self._validateAssert(start, end);
	            if (self.isValidate && self.nowValidate) {
	                self.$validateDP.hide();
	            } else {
	                self.$validateDP.html($$.I18N.rangepicker.earlierStart).show();
	            }
	            if (!start || !end) {
	                self.$validateDP.html($$.I18N.rangepicker.incompleteTime).show();
	                self.isValidate = false;
	            }
	        },
	        _validateAssert: function (start, end) {
	            return Date.parse(start) < Date.parse(end);
	        },
	        validation: function () {
	            var self = this;
	            self._validateNow();
	            self._validation();
	            return self.isValidate && self.nowValidate;
	        },
	        _trigger: function (type, event, args) {
	            var self = this;
	            if (args) {
	                args.parameters = self.options.parameters[type] || {};
	                args.type = "rangepicker";
	            }
	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        }
	    });
	})(AUI, jQuery);

/***/ },
/* 40 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author fqwu
	 */
	(function ($) {
	    var
		//常量
		constant = {
		    //repeatbuttons的class
		    REPEATBUTTON_CLASS: 'aui-repeatbutton',
		    //repeatbutton鼠标滑过时的class
		    REPEATBUTTON_MOUSEOVER_CLASS: 'aui-repeatbutton-mouseover',
		    //repeatbutton按下时的class
		    REPEATBUTTON_PRESSED_CLASS: 'aui-repeatbutton-pressed'
		};

	    /**
		 * <div style="font-weight:600">表示从按下按钮到释放按钮的时间内重复引发其 click事件的控件。</div>
		 * 使用repeatbutton时，需要为repeatbutton注册click事件。
		 * 如果需要修改repeatbutton的样式，请参照aui.repeatbutton.css文件，在自己的css中重写相关的样式即可。不要修改和引用aui.repeatbutton.css,用法如下:
		 
		 *html:

		 <-- repeatbutton的宿主 -->
		 <div id="my_widget" class="my_repeatebutton"></div>

		 *js:
		 
		 $("#my_widget").repeatbutton({
		 	content:'this is content'
		 }).on('click', function(e) {
		 	//每次重复递增
		 	i++;
		 	$("#my_widget").repeatbutton('content', i);
		 });

		 * @class repeatbutton
		 * @author Fengqiang.Wu
		 * @constructor
		 * @param {Object} options 控件配置信息。
		 *
		 * @param {Boolean} options.isTabStop 获取或设置一个值，该值指示是否将某个控件包含在Tab导航中。如果为true，则表示将该控件在 Tab 导航之内，反之，则将该控件排除在 Tab 导航之外。该值只有在控件初始化时设置有效。
		 *
		 * @param {Number} options.delay 获取或设置click事件的延迟触发时间。
		 *
		 * @param {String} options.content 获取或设置控件的显示信息。该值只有在控件初始化时设置有效。
		 *
		 * @param {Boolean} options.isRepeatable 获取或设置一个值，该值表示控件是否处于repeat状态。如果为true，则表示控件处于repeat状态，反之，则不在repeat状态。该值只有在控件初始化时设置有效。
		 *
		 * @param {String} options.mouseoverClass 获取或设置鼠标移入时的样式。该值只有在控件初始化时设置有效。
		 *
		 * @param {String} options.pressClass 获取或设置控件按下时的样式。该值只有在控件初始化时设置有效。
		 *
		 */
	    $.widget("aui.repeatbutton", {
	        /** @lends repeatbutton.prototype */
	        // These options will be used as defaults
	        options: {
	            //该值指示是否将某个控件包含在 Tab导航中
	            isTabStop: true,
	            //延迟触发click事件的时间，单位毫秒
	            delay: 200,
	            //控件的内容
	            content: '',
	            //该值表示控件是否处于repeat状态
	            isRepeatable: false,
	            //鼠标移入时的样式
	            mouseoverClass: null,
	            //repeatbutton按下时的样式
	            pressClass: null
	        },
	        _create: function () {
	            var self = this;

	            self.element.append('<div class="' + constant.REPEATBUTTON_CLASS + '">' + self.options.content + '</div>');
	            self._content = self.element.children('.' + constant.REPEATBUTTON_CLASS);
	            //控件初始化时，isRepeatable永远为false
	            self._isRepeatable = false;
	            //获取或设置一个值该值表示，click触发的延迟时间
	            self._delay = self.options.delay;
	            self._pressClass = self.options.pressClass;
	            self._mouseoverClass = self.options.mouseoverClass;
	            //获取或设置一个值，该值表示重置定时器时的临时延迟,默认与delay相同
	            self._tempDelay = self._delay
	            //定时器
	            self._timer = null;
	            //获取或设置一个值，该值表示是否按下Enter键
	            self._isEnterDown = false;
	        },
	        _setOption: function (key, value) {
	            var self = this;
	            self.options[key] = value;

	            switch (key) {
	                case "delay":
	                    self._delay = value;
	                    break;
	            }
	        },
	        _init: function () {
	            var
				//
				self = this,
				//
				nameSpace = self.eventNamespace;
	            if (self.options.isTabStop === true) {
	                self._content.attr('tabindex', 0);
	            }

	            self._content
				//
				.attr('role', 'button')
				//
				.on('click' + nameSpace, self, self._onClick)
				//
				.on('mouseover' + nameSpace, self, self._onMouseOver)
				//
				.on('mouseout' + nameSpace, self, self._onMouseOut)
				//
				.on('mousedown' + nameSpace, self, self._onMouseDown)
				//
				.on('mouseup' + nameSpace, self, self._onMouseUp)
				//
				.on('mouseout' + nameSpace, self, self._stop)
				//
				.on('keypress' + nameSpace, self, self._onKeyPress)
				//
				.on('keydown' + nameSpace, self, self._onKeyDown)
				//
				.on('keyup' + nameSpace, self, self._onKeyUp)
				//
				.on('blur' + nameSpace, self, self._stop);
	        },
	        /**
			 * 鼠标按下时触发。
			 * @method _doRepeat
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _doRepeat: function (e) {
	            var self = this;
	            self._startTimer(self._delay, e);
	        },
	        /**
			 * 添加Pressed状态的样式。
			 * @method _addPressdClass
			 * @private
			 */
	        _addPressdClass: function () {
	            var
				//
				self = this,
				//
				content = this._content,
				//
				p_class = self._pressClass;

	            if (p_class != null) {
	                content.addClass(p_class);
	            } else {
	                content.addClass(constant.REPEATBUTTON_PRESSED_CLASS);
	            }
	        },
	        /**
			 * 移除Pressed状态的样式。
			 * @method _removePressdClass
			 * @private
			 */
	        _removePressdClass: function () {
	            var
				//
				self = this,
				//
				content = this._content,
				//
				p_class = self._pressClass;
	            if (p_class) {
	                content.removeClass(p_class);
	            } else {
	                content.removeClass(constant.REPEATBUTTON_PRESSED_CLASS);
	            }
	        },
	        /**
			 * 获取或设置显示信息。
			 * @method content
			 * @param {String} value 显示信息
			 */
	        content: function (value) {
	            var self = this;
	            if (value != null) {
	                self._content.html(value);
	                self._setOption("content", value);
	            } else {
	                return self.options.content;
	            }
	        },
	        /**
			 * 获取或设置click事件的延迟触发时间。
			 * @method delay
			 * @param {Number} value 要设置的延迟时间，单位毫秒
			 */
	        delay: function (value) {
	            var self = this;
	            if (value != null) {
	                self._setOption("delay", value);
	            } else {
	                return self.options.delay;
	            }
	        },
	        /**
			 * 获取一个值，该值表示控件是否处于重复触发click事件的状态。
			 * @method isRepeatable
			 */
	        isRepeatable: function () {
	            return this._isRepeatable;
	        },
	        /**
			 * 根据新的延迟时间重新启动定时器。
			 * @method resetTimer
			 * @param {Number} delay 延迟时间。
			 * @param {jQuery Event} e 触发函数事件的事件参数。
			 */
	        resetTimer: function (delay, e) {
	            var self = this;
	            if (self._isRepeatable === true && self._tempDelay != delay) {
	                self._tempDelay = delay;
	                self._startTimer(delay, e);
	            }
	        },
	        /**
			 * 获取一个值，该值表示定时器重置时的延迟时间。没有重置时，值与delay相同。
			 * @method tempDelay
			 */
	        tempDelay: function () {
	            return this._tempDelay;
	        },
	        /**
			 * 清除所有添加到Dom元素上的修改。
			 */
	        _destroy: function () {
	            var self = this;
	            self._content
				//
				.off(self.eventNamespace)
				//
				.removeClass()
				//
				.remove();
	        }
	    });

	    /**
		 * 定时器相关操作。
		 */
	    $.extend($.aui.repeatbutton.prototype, {
	        /**
			 * 启动定时器。
			 * @method _startTimer
			 * @private
			 * @param {Number} delay 延迟时间
			 * @param {jQuery.Event} original 事件参数
			 */
	        _startTimer: function (delay, origin) {
	            var self = this;
	            self._clearTimer();
	            delay = delay || self._delay;
	            self._timer = setInterval(function () {
	                self._onTimer(origin);
	            }, delay);
	        },
	        /**
			 * 关闭定时器。
			 * @method _clearTimer
			 * @private
			 */
	        _clearTimer: function () {
	            var timer = this._timer;
	            if (timer != null) {
	                clearInterval(timer);
	            }
	        },
	        /**
			 * 鼠标松开时触发。
			 * @method _stop
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _stop: function (e) {
	            var self = e.data;
	            self._clearTimer();
	            self._isRepeatable = false;
	            self._tempDelay = self.options.delay;
	            self._removePressdClass();
	        },
	        /**
			 * 定时器触发的回调。
			 * @method _onTimer
			 * @private
			 * @param {jQuery.Event} origin 触发onTimer事件的事件参数
			 */
	        _onTimer: function (origin) {
	            //调用onTimer的方法判断self是否为空，此处不需要判断
	            var
				//
				self = this,
				//事件参数
				b = new jQuery.Event("click"),
				//
				data = null;
	            if (origin != null) {
	                data = {
	                    offsetX: origin.offsetX || origin.originalEvent.layerX,
	                    offsetY: origin.offsetY || origin.originalEvent.layerY
	                }
	                b.offsetY = data.offsetY;
	                b.offsetX = data.offsetX;
	            }

	            self.element.trigger(b);
	            self._isRepeatable = true;
	        }
	    });
	    /**
		 * 鼠标操作相关逻辑。
		 */
	    $.extend($.aui.repeatbutton.prototype, {
	        /**
			 * 点击时触发。
			 * @methid _onClick
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onClick: function (e) {
	            //阻止repeat事件触发时的冒泡
	            e.stopPropagation();
	        },
	        /**
			 * 鼠标移入时触发。
			 * @method _onMouseOver
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onMouseOver: function (e) {
	            var
				//
				self = e.data,
				//
				content = self._content,
				//
				m_class = self._mouseoverClass;

	            if (m_class != null) {
	                content.addClass(m_class);
	            } else {
	                content.addClass(constant.REPEATBUTTON_MOUSEOVER_CLASS);
	            }
	        },
	        /**
			 * 鼠标移出时触发。
			 * @method _onMouseOut
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onMouseOut: function (e) {
	            var
				//
				self = e.data,
				//
				content = self._content,
				//
				m_class = self._mouseoverClass;

	            if (m_class != null) {
	                content.removeClass(m_class);
	            } else {
	                content.removeClass(constant.REPEATBUTTON_MOUSEOVER_CLASS);
	            }
	        },
	        /**
			 * 鼠标左键按下时触发。
			 * @method _onMouseDown
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onMouseDown: function (e) {
	            var self = e.data;
	            self._addPressdClass();
	            self._onTimer(e);
	            self._doRepeat(e);
	        },
	        /**
			 * 鼠标左键从按下到弹起时触发。
			 * @method _onMouseUp
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onMouseUp: function (e) {
	            e.stopPropagation();
	            var self = e.data;
	            self._removePressdClass();
	            self._stop(e);
	        }
	    });
	    /**
		 * 键盘操作相关逻辑。
		 */
	    $.extend($.aui.repeatbutton.prototype, {
	        /**
			 * 按键按住时触发。
			 * @method _onKeyPress
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onKeyPress: function (e) {
	            var self = e.data;
	            if (e.which == 32) {
	                self._onTimer();
	            }
	            //添加pressed的样式
	            if (e.which == 32 || e.which == 13) {
	                self._addPressdClass();
	            }
	        },
	        /**
			 * 按键按下时触发。
			 * @method _onKeyDown
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onKeyDown: function (e) {
	            if (e.which == 13) {
	                var self = e.data;
	                if (self._isEnterDown === false) {
	                    self._isEnterDown = true;
	                    self._onTimer();
	                }
	            }
	        },
	        /**
			 * 按键弹起时触发。
			 * @method _onKeyUp
			 * @private
			 * @param {jQuery.Event} e 事件参数
			 */
	        _onKeyUp: function (e) {
	            var self = e.data;
	            self._isEnterDown = false;
	            self._removePressdClass();
	        }
	    });
	}(jQuery));


/***/ },
/* 41 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @author fqwu
	 */
	(function ($$, $) {
	    function merger(s, t) {
	        var
	        i = 0,
	        c = t.length,
	        t = ko.mapping.fromJS(t)();
	        s.removeAll();
	        for (; i < c; i++) {
	            s.push(t[i])
	        }
	    }
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.richcombobox = {
	            init: function (element, valueAccessor) {
	                var
	                element = $(element),
	                //可选项集合对应的数据源
	                items = valueAccessor().viewModel.items,
	                //可选项集合是否是Observable
	                isItemsObservable = ko.isObservable(items),
	                //选定项集合对应的数据源
	                selectedItems = valueAccessor().viewModel.selectedItems,
	                //选定项集合是否是Observable
	                isSelectedItemsObservable = ko.isObservable(selectedItems),
	                //获取或设置一个值，该值表示是否触发了selectionChanged事件。
	                isSelectionChanged = false,
	                value = ko.toJS(ko.unwrap(valueAccessor()));

	                element.richcombobox(value);
	                //清空选定项集合，由selectionChanged事件进行更新。
	                selectedItems.removeAll();

	                //控件更新数据源
	                element.richcombobox('option', 'selectionChanged', function (e, data) {
	                    var temp = true;
	                    //加锁，避免selectionChanged执行对应的subscribe回调。
	                    isSelectionChanged = true;

	                    if (isItemsObservable) {
	                        merger(items, element.richcombobox('itemsSource'));
	                    } else {
	                        items = element.richcombobox('itemsSource');

	                    }
	                    if (isSelectedItemsObservable) {
	                        merger(selectedItems, element.richcombobox('selectedItems'));

	                    } else {
	                        selectedItems = element.richcombobox('selectedItems');
	                    }

	                    isSelectionChanged = false;
	                });

	                if (isItemsObservable) {
	                    items.subscribe(function () {
	                        if (isSelectionChanged === false) {
	                            element.richcombobox('itemsSource', ko.toJS(items));
	                        }
	                    });
	                }
	                if (isSelectedItemsObservable) {
	                    selectedItems.subscribe(function () {
	                        if (isSelectionChanged === false) {
	                            var ss = ko.toJS(selectedItems);
	                            element.richcombobox('selectedItems', ss);
	                        }
	                    });
	                }

	                element.richcombobox('itemsSource', value.viewModel.items);
	                element.richcombobox('selectedItems', value.viewModel.selectedItems);
	                return { 'controlsDescendantBindings': true };
	            }
	        };
	    }

	    var
	        uuid = -1,


		/**
		 * 输入部分的宽度补正。
		 * @property _areaReduced
		 * @type Number
		 * @private
		 */
		_areaReduced = -8,
		//筛选的
		_delay = 300,
		//
		_constant = {
		    //richcombobox的样式
		    RICHCOMBOBOX_CLASS: 'aui-richcombobox',
		    WITH_SCROLL_CLASS: 'aui-richcombobox-scroll',
		    //richcombobox输入部分的样式
		    RICHCOMBOBOX_TEXTAREA_CLASS: 'aui-richcombobox-textarea',
		    //richcombobox选定区域的样式
		    RICHCOMBOBOX_SELECTED_AREA_CLASS: 'aui-richcombobox-selected-area',
		    //richcombobox选中项的class
		    RICHCOMBOBOX_SELECTED_ITEM_CLASS: 'aui-richcombobox-selected-item',
		    //选中项内容区域的基本样式
		    RICHCOMBOBOX_SELECTED_ITEM_CONTENT_CLASS: 'aui-richcombobox-selected-item-content',
		    //
		    SELECTED_DISABLED_CLASS: 'aui-richcombobox-selected-item-disabled',
		    //选中项关闭区域的基本样式
		    RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CLASS: 'aui-richcombobox-selected-item-close',
		    //选中项关闭内容区域的样式
		    RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CONTENT_CLASS: 'aui-richcombobox-selected-item-close-content',
		    SEMICOLON_CLASS: 'aui-richcombobox-semicolon',
		    CLOSE_ICON_CLASS: 'fi-close-bs',
		    //选中项关闭按钮的内容区域在鼠标移入时的样式
		    RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CONTENT_MOUSEOVER_CLASS: 'aui-richcombobox-selected-item-close-content-mouseover',
		    //richcombobox选中项在鼠标移入时的样式
		    RICHCOMBOBOX_SELECTEDITEM_MOUSEOVER_CLASS: 'aui-richcombobox-selecteditem-mouseover',
		    //richcombobox选中项在按下状态下时 的样式
		    RICHCOMBOBOX_SELECTEDITEM_PRESSED_CLASS: 'aui-richcombobox-selecteditem-pressed',
		    //下拉框的样式
		    DROPDOWN_CLASS: 'aui-richcombobox-dropdown',
		    DROPDOWN_ICON_CLASS: 'aui-richcombobox-dropdown-icon',
		    DOWN_ICON_CLASS: 'fi-triangle-down-bs',
		    //下拉框图片的样式
		    RICHCOMBOBOX_DROPDOWN_IMG_CLASS: 'aui-richcombobox-dropdown-img',
		    //richcombobox选择区域的样式
		    RICHCOMBOBOX_SELECTION_AREA_CLASS: 'aui-richcombobox-selection-area',
		    //richcombobox选定区域的创建部分
		    RICHCOMBOBOX_SELECTION_CREATE_CLASS: 'aui-richcombobox-selection-create',
		    //richcombobox选定区域的创建部分鼠标移入时的样式
		    RICHCOMBOBOX_SELECTION_CREATE_MOUSEOVER_CLASS: 'aui-richcombobox-selection-create-mouseover',
		    //richcombobox选择区域,提示部分的样式
		    RICHCOMBOBOX_SELECTION_MESSAGE_CLASS: 'aui-richcombobox-selection-message',
		    //richcombobox选择区域容器的样式
		    RICHCOMBOBOX_SELECTION_CONTAINER_CLASS: 'aui-richcombobox-selection-area-container',
		    //richcombobox选择区域的遮罩的样式
		    RICHCOMBOBOX_SELECTION_AREA_POPUP_CLASS: 'aui-richcombobox-selection-popup',
		    //richcombobox可选项的样式
		    RICHCOMBOBOX_SELECTION_ITEM_CLASS: 'aui-richcombobox-selection-item',
		    //richcombobox可选项内容部分的样式
		    RICHCOMBOBOX_SELECTION_ITEM_CONTENT_CLASS: 'aui-richcombobox-selection-item-content',
		    //richcombobox可选项的选中样式
		    RICHCOMBOBOX_SELECTION_ITEM_SELECTED_CLASS: 'aui-richcombobox-selection-item-selected',
		    //richcombobox可选项的在鼠标移入时的样式
		    RICHCOMBOBOX_SELECTION_ITEM_MOUSEOVER_CLASS: 'aui-richcombobox-selection-item-mouseover',
		    //combobox禁用时的样式
		    RICHCOMBOBOX_DISABLED_CLASS: "aui-richcombobox-disabled",
		    MOUSEOVER_CLASS: 'aui-richcombobox-hover',
		    FOCUS_CLASS: 'aui-richcombobox-focus'
		},
		/**
		 * 视觉状态对应的class名称。
		 * @property _visualStates
		 * @type Object
		 * @private
		 */
		_visualStates = {
		    /**
			 * 可选项鼠标移入状态时的class。
			 * @property _visualStates.selectionMouseOver
			 * @type String
			 * @private
			 */
		    selectionMouseOver: "'aui-richcombobox-selection-item-mouseover'",
		    /**
			 * 可选项选中时的class。
			 * @property _visualStates.selectionSelected
			 * @type String
			 * @private
			 */
		    selectionSelected: "'aui-richcombobox-selection-item-selected'"
		},
		/**
		 * 视觉状态对应的绑定属性。
		 * @property _visualProperties
		 * @type Object
		 * @private
		 */
		_visualProperties = {
		    /**
			 * 可选项鼠标移入状态对应的绑定属性。
			 * @property _visualProperties.selectionMouseOver
			 * @type String
			 * @private
			 */
		    selectionMouseOver: '_isSelectionMouseOver',
		    /**
			 * 可选项选中状态对应的绑定属性。
			 * @property _visualProperties.selectionSelected
			 * @type String
			 * @private
			 */
		    selectionSelected: '_isSelectionSelected'
		},
		/**
		 * 视觉状态。
		 * @property _vsm
		 * @type Object
		 * @private
		 */
		_vsm = {
		    /**
			 * 可选项正常情况下的视觉状态。
			 * @property _vsm.selectionNormal
			 * @type Object
			 * @private
			 */
		    selectionNormal: {
		        add: [],
		        remove: [_visualProperties.selectionMouseOver, _visualProperties.selectionSelected]
		    },
		    /**
			 * 可选项在鼠标移入时的视觉状态。
			 * @property _vsm.selectionMouseOver
			 * @type Object
			 * @private
			 */
		    selectionMouseOver: {
		        add: [_visualProperties.selectionMouseOver],
		        remove: [_visualProperties.selectionSelected]
		    },
		    /**
			 * 可选项在选中时的视觉状态。
			 * @property _vsm.selectionSelected
			 * @type Object
			 * @private
			 */
		    selectionSelected: {
		        add: [_visualProperties.selectionSelected],
		        remove: [_visualProperties.selectionMouseOver]
		    }

		};

	    /**
		 * <div style="font-weight:600">表示一个复选框。</div>

		 * html：

		 <div id="first" class="my_rich"></div>
		 *js：

		 var
		 //
		 rich_host = $('.my_rich');

		 rich_host.richcombobox({
		 	width : 210,
		 	hasCreate : true,
		 	displayName : 'name',
		 	createTemplate : '<a data-bind="click: createNew">New Plan Group</a>',
		 	// isCaseSensitive : true,
		 	itemClick : {
		 		goToNextWindow : function() {
		 			alert('go to next window');
		 		}
		 	},
		 	viewModel  : {
		 		createNew : function() {
		 			alert('create new')
		 		}
		 	}
		 });
		 rich_host.richcombobox('itemsSource', data);
		 * @class richcombobox
		 * @author Fengqiang.Wu
		 * @constructor
		 * @param {Object} options 控件配置信息。
		 *
		 * @param {Number} options.width 获取或设置控件的宽度。该值只有在控件初始化时设置有效。
		 *
		 * @param {Number} options.height 获取或设置控件的高度。该值只有在控件初始化时设置有效。
		 *
		 * @param {Number} options.maxHeight 获取或设置可选区域的最大宽度。该值只有在控件初始化时设置有效。
		 *
		 * @param {Boolean} options.isMultiple 获取或设置是否支持多选。如果为true，表示支持多选，反之，则表示不支持多选。该值只有在控件初始化时设置有效。
		 *
		 * @param {Bollean} options.isDropDownHidden 获取或设置是否隐藏下拉按钮。如果为true，表示隐藏下拉按钮，反之，则表示不隐藏下拉按钮。该值只有在控件初始化时设置有效。
		 *
		 * @param {String} options.displayName 获取或设置向用户显示的属性的名称。该值只有在控件初始化时设置有效。
		 *
		 * @param {Boolean} options.isCaseSensitive 获取或设置搜索时是否区分大小写。如果为true，表示搜索时区分大小写，反之，则表示搜索时不区分大小写。该值只有在控件初始化时设置有效。
		 *
		 * @param {Boolean} options.autoSort 获取或设置可选区域改变后，是否对可选项进行排序。如果为true，表示进行排序，反之，则表示不进行排序。该值只有在控件初始化时设置有效。
		 *
		 * @param {Boolean} options.hasCreate 获取或设置是否提供创建功能。如果为true，表示提供创建功能，反之，则表示不提供创建功能。该值只有在控件初始化时设置有效。
		 *
		 * @param {String} options.createTemplate 获取或设置创建功能的模板。该值只有在控件初始化时设置有效。
		 *
	     * @param {Object} options.viewModel 获取或设置控件的绑定数据源。
		 *
		 * @param {Function} options.sortPredicate 获取或设置排序时使用的断言。
		 *
		 * @param {Object} options.itemClick itemClick事件的委托。
	     *
	     * @parm {Function} otions.selectionChanged selectionChanged事件。
	     * @param {Selector || Element || jQuery} options.within 指定可选部分碰撞检测时的定位元素。如果提供一个选择器或jQuery对象，怎匹配选择到的第一个元素。默认值window。
		 *
		 */
	    $.widget('aui.richcombobox', {
	        createNewId: 'aui-richcombobox-input-',
	        dropdownId: 'aui-richcombobox-dropdown-',
	        inputId: 'aui-richcombobox-input-',
	        listboxId: 'aui-richcombobox-listbox-id-',
	        messageId: 'aui-richcombobox-message-id-',
	        popupId: 'aui-richcombobox-popup-id-',
	        selectedAreaId: 'aui-richcombobox-selected-area-id-',
	        options: {
	            //获取或设置一个值，该值表示可选项是否自动排序。
	            autoSort: true,

	            //获取或设置一个值，该值表示创建功能的模板
	            createTemplate: '',

	            dataTextField: '',
	            //设置向用户显示的属性的名称
	            dataValueField: '',
	            //正在删除事件对应的委托
	            deleting: function (e, args) {
	                return true;
	            },
	            //获取或设置一个值，该值指示用户是否可以与控件交互。
	            disabled: false,
	            displayName: '',

	            height: 38,
	            //获取或设置一个值，该值表示是否提供创建功能
	            hasCreate: false,
	            hasFilter: true,

	            inputBlur: $.noop,
	            inputKeyup: $.noop,
	            //获取或设置一个值，该值表示是否支持多选
	            isMultiple: true,
	            //搜索时是否考虑大小写
	            isCaseSensitive: false,
	            isDropDownHidden: false,
	            //itemClick事件对应的委托
	            itemClick: $.noop,

	            //可选项的最大高度
	            maxHeight: 300,
	            maxSelectedHeight: null,
	            maxlength: null,

	            parameters: {},

	            readonly: false,

	            selectionChanged: $.noop,
	            stopeTimer: false,

	            //获取或设置一个值，该值表示控件的绑定数据源。
	            viewModel: {},

	            width: 'auto',
	            zIndex: null,

	            within: window
	        },
	        _create: function () {
	            this._initMembers()
	                ._createRichcombobox()
	                ._loaded()
	                ._initEvent()
	                ._applyBinding();
	        },
	        _initMembers: function () {
	            uuid++;
	            this._initId();

	            this._smartTimer = null;
	            this._measureTimer = null;

	            this.$body = $('body');
	            this._vm = {};
	            //选定项对应的jQuery对象的集合，类型[jQuery]
	            this._selectedItems = [];
	            //当前获得焦点的选定项
	            this._currentSelectedIndex = -1;
	            //当前选中的可选项的序号
	            this._currentSelectionIndex = -1;

	            this._displayName = this.options.displayName;
	            this._dropDownWidth = 15;
	            //获取或设置一个值，该值表示选择区域过滤后的第一个选项的序号
	            this._firstFilterIndex = -1;

	            this._isCaseSensitive = this.options.isCaseSensitive;
	            this._isDropDownHidden = this.options.isDropDownHidden;
	            //获取或设置一个值,该值表示选择区域是否已经过滤
	            this._isFilter = false;
	            //初始化时可选区域关闭    
	            this._isHidden = true;
	            //获取或设置一个值，该值表示textarea是否获取焦点
	            this._isTextAreaFocus = false;
	            //获取或设置一个值，该值表示$popup部件是否展开
	            this._isOpened = false;
	            // 可选项对应的jQuery对象
	            this._selections = [];

	            $.extend(this._vm, this.options.viewModel);

	            this._vm.disabled = ko.observable(this.options.disabled);

	            if (!ko.isObservable(this._vm.items)) {
	                this._vm.items = ko.observableArray();
	            }
	            if (!ko.isObservable(this._vm.selectedItems)) {
	                this._vm.selectedItems = ko.observableArray();
	            }

	            this.options.hasFilter = !this.options.stopeTimer;

	            return this;
	        },
	        _initId: function () {
	            this.dropdownId += uuid;
	            this.inputId += uuid;
	            this.listboxId += uuid;
	            this.messageId += uuid;
	            this.popupId += uuid;
	            this.selectedAreaId += uuid;
	        },
	        _createRichcombobox: function () {
	            var
	                h = -1,
	                html = [];
	            html[++h] = '<div>';
	            html[++h] = this._createSelectedArea();
	            html[++h] = '<input id="' + this.inputId + '" role="combobox" class="' + _constant.RICHCOMBOBOX_TEXTAREA_CLASS + '" />';
	            html[++h] = this._createArrow();
	            html[++h] = '</div>';

	            this.element
	                .addClass(_constant.RICHCOMBOBOX_CLASS)
	                .width(this.options.width)
	                .html(html.join(''));
	            if ($.isNumeric(this.options.maxSelectedHeight)) {
	                this.element
	                    .addClass(_constant.WITH_SCROLL_CLASS)
	                    .css('max-height', this.options.maxSelectedHeight);
	            }
	            this.$body.append(this._createPopup());

	            return this;
	        },
	        _createArrow: function () {
	            var
	                h = -1,
	                html = [];

	            html[++h] = '<div id="' + this.dropdownId + '" class="' + _constant.DROPDOWN_CLASS + '">';
	            html[++h] = '<div  class="' + _constant.DROPDOWN_ICON_CLASS + ' ' + _constant.DOWN_ICON_CLASS + '">';
	            html[++h] = '</div>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        _createSelectedArea: function () {
	            var
	                h = -1,
	                html = [];

	            html[++h] = '<div id="' + this.selectedAreaId + '" class="' + _constant.RICHCOMBOBOX_SELECTED_AREA_CLASS + '" data-bind="foreach: selectedItems">';

	            html[++h] = '<div role="gridcell" tabindex="0" class="' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLASS + '" data-bind="attr:{index: $index, \'aria-span\':' + this.options.displayName + '}">';

	            html[++h] = '<div class="' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CONTENT_CLASS + '" data-bind="attr:{index: $index},css:{\'' + _constant.SELECTED_DISABLED_CLASS + '\':$root.disabled},text:' + this.options.displayName + '"></div>';

	            html[++h] = '<div class="' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CLASS + '" data-bind="attr:{index: $index}, visible:!$root.disabled()">';
	            html[++h] = '<div class="' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CONTENT_CLASS + ' ' + _constant.CLOSE_ICON_CLASS + '" ></div>';
	            html[++h] = '</div>';

	            html[++h] = '<div class="' + _constant.SEMICOLON_CLASS + '" data-bind="visible:$root.disabled()">;</div>';

	            html[++h] = '</div>';

	            html[++h] = '</div>';

	            return html.join('');
	        },
	        _createPopup: function () {
	            var
	                h = -1,
	                html = [];
	            //selection container
	            html[++h] = '<div data-bind="stopBindings:richcombobox">';
	            html[++h] = '<div id="' + this.popupId + '" class="' + _constant.RICHCOMBOBOX_SELECTION_AREA_CLASS + '">';

	            //create new part
	            if (this.options.hasCreate) {
	                html[++h] = '<div id="' + this.createNewId + '" class="' + _constant.RICHCOMBOBOX_SELECTION_CREATE_CLASS + '">' + this.options.createTemplate + '</div>';
	            }
	            //No Match
	            html[++h] = '<div id="' + this.messageId + '" class="' + _constant.RICHCOMBOBOX_SELECTION_MESSAGE_CLASS + '">No Match</div>';

	            //selection area
	            html[++h] = '<div role="listbox" id="' + this.listboxId + '" class="' + _constant.RICHCOMBOBOX_SELECTION_CONTAINER_CLASS + '" data-bind="foreach: items">';

	            //item
	            html[++h] = '<div tabindex="0" role="option" class="' + _constant.RICHCOMBOBOX_SELECTION_ITEM_CLASS + '" data-bind="attr:{index: $index},css:{' + _visualStates.selectionMouseOver + ':_isSelectionMouseOver()>0,' + _visualStates.selectionSelected + ':_isSelectionSelected()>0},style: { display: _display}">';
	            //content区域
	            html[++h] = '<div class="' + _constant.RICHCOMBOBOX_SELECTION_ITEM_CONTENT_CLASS + '" data-bind="attr:{index: $index},text:' + this.options.displayName + ',\'aria-span\':' + this.options.displayName + '"></div>'
	            //end item
	            html[++h] = '</div>';

	            //end selection area
	            html[++h] = '</div>';

	            //end selection container
	            html[++h] = '</div>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        _loaded: function () {

	            this.$main = this.element.children()
	                .css('min-height', this.options.height);
	            this.$dropdown = this.$main.children('#' + this.dropdownId);
	            this.$input = this.$main.children('#' + this.inputId);
	            this._setMaxLength();
	            this.$selectedArea = this.$main.children('#' + this.selectedAreaId);

	            this.$popup = this.$body.find('#' + this.popupId)
	                .width(this.options.width - 2)
	                .css('max-height', this.options.maxHeight)
	                .hide();

	            if ($.isNumeric(this.options.zIndex)) {
	                this.$popup.css('z-index', this.options.zIndex);
	            }
	            this._updatePopupPosition();
	            this._measureSelectedItems();
	            this.$selectionMessage = this.$popup.children('#' + this.messageId);
	            //选择区域的创建部分对应的jQuery对象
	            this.$selectionCreate = this.$popup.children('#' + this.createNewId);
	            this.$listbox = this.$popup.children('#' + this.listboxId);

	            this.$window = $(window);

	            if (this.options.disabled === true) {
	                this._setDisabled(false, this.options.disabled);
	            }

	            if (this.options.readonly === true) {
	                this.$input.prop("readonly", true);
	            }
	            if (this._isDropDownHidden === true) {
	                this.$dropdown.hide();
	            }

	            return this;
	        },
	        _initEvent: function () {
	            var
	                self = this,
	                ens = this.eventNamespace;

	            this.$window.on('resize' + ens, this, this._onResize);

	            //注册element的相关事件
	            this.element
	                .on('click' + ens, this, function () {
	                    self.$input.focus();
	                })
	                .on('keydown' + ens, this, this._onMainKeyDown);


	            //注册textArea的相关事件
	            this.$input
	            //
	            .on('keydown' + ens, this, this._onTextAreaKeyDown)
	            //
	            .on('keypress' + ens, this, this._onTextAreaKeyPressed)
	            //
	            .on('keyup' + ens, this, this._onTextAreaKeyUp)
	            //
	            .on('focus' + ens, this, this._onTextAreaFocus)
	            //
	            .on('blur' + ens, this, this._onTextAreaBlur);

	            this.$dropdown
	                .on('mousedown' + ens, this, this._onDropdownMouseDown)
	                .on('click' + ens, this, this._onDropDownClick);

	            this.$selectionCreate.on('click' + ens, this, this._onCreateNewClick);

	            this.$selectedArea.on('keydown' + ens, this, this._onSelectedAreaKeyDown);

	            this.$popup
	                .on('mousedown' + ens, this._onPopupMouseDown)
	                .on("mousewheel" + ens, this, this._onPopupMouseWheel);

	            $$.close(this.element, "richcombobox", "hide");

	            return this;
	        },
	        _onPopupMouseDown: function (e) {
	            e.stopPropagation();
	        },
	        _onPopupMouseWheel: function (e) {
	            $$.closeExcept(e.data.element, true);
	        },
	        _onDropdownMouseDown: function (e) {
	            var self = e.data;
	            $$.closeExcept(self.element, true);
	        },
	        hide: function () {
	            this._hide();
	        },
	        show: function () {
	            this._show();
	        },
	        _applyBinding: function () {

	            ko.applyBindings(this._vm, this.$popup[0]);

	            ko.applyBindings(this._vm, this.$selectedArea[0]);

	            return this;
	        },
	        _hide: function () {
	            if (this._isOpened) {
	                this._isOpened = false;
	                $$.closeVisibility(this.element, false);
	                this.$popup.hide();
	            }

	            return this;
	        },
	        _show: function () {
	            if (!this._isOpened) {
	                this._isOpened = true;
	                $$.closeVisibility(this.element, true);
	                this.$popup.show();
	                this._updatePopupPosition();
	            }

	            return this
	        },
	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;

	            switch (key) {
	                case 'disabled':
	                    self._setDisabled(oldValue, value);
	                    break;
	            }
	        },
	        _setMaxLength: function () {
	            if ($.isNumeric(this.options.maxlength) && this.options.maxlength > 0) {
	                this.$input.attr("maxlength", this.options.maxlength)
	            }
	        },
	        _setDisabled: function (old, disabled) {
	            var self = this;

	            self.$input.prop("disabled", disabled);
	            this._vm.disabled(disabled);

	            if (disabled === false) {
	                self.element
	                    .removeClass(_constant.RICHCOMBOBOX_DISABLED_CLASS)
	                    .find('.' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLASS)
	                    .attr("tabIndex", 0);
	            } else {
	                self.element
	                    .addClass(_constant.RICHCOMBOBOX_DISABLED_CLASS)
	                    .find('.' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLASS)
	                    .removeAttr("tabIndex");
	            }

	            if (old != disabled) {
	                self._trigger("isEnabledChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: old,
	                    newValue: disabled
	                }));
	            }
	        },
	        _updatePopupPosition: function () {
	            var my = "left top+";

	            if (this.$popup.is(':visible ')) {
	                my = my + this.element.height();
	                this.$popup.position({
	                    my: my,
	                    at: "left top",
	                    of: this.element,
	                    collision: "flipfit flipfit"
	                }).width(this.element.width());
	            }
	            return this;
	        },
	        /**
	         * 选定项点击时触发。
	         * @event itemClick
	         * @param {Function} handler 需要在委托中添加或者删除的方法。
	         * @param {Boolean} isAdd 是否添加。
	         */
	        itemClick: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.itemClick, handler, isAdd);
	        },
	        /**
	         * 选定项点击时触发。
	         * @event itemClick
	         * @param {Function} handler 需要在委托中添加或者删除的方法。
	         * @param {Boolean} isAdd 是否添加。
	         */
	        deleting: function (handler, isAdd) {
	            $$.updateEventHandler(this.options.deleting, handler, isAdd);
	        },
	        /**
	         * 可选区域的显示状态改变时，更新对应的全局变量。
	         * @method _afterSelectionAreaDisplayChanged
	         * @private
	         * @param {Boolean} isFilter 表示选择区域是否已经过滤。
	         */
	        _afterSelectionAreaDisplayChanged: function (isFilter) {
	            var self = this;
	            if (self.$popup.css('display') == 'none') {
	                self._changeVisualStates(_vsm.selectionNormal);
	                self._currentSelectionIndex = -1;
	                self.$main.css('zIndex', 0);
	            } else {
	                self.$main.css('zIndex', 3);
	                //重置当前选定项的序号
	                self._currentSelectedIndex = -1;

	                if (self._selections.length > 0) {
	                    self._firstFilterIndex = (self._firstFilterIndex == -1) ? 0 : self._firstFilterIndex;
	                    //如果没有进行过滤，选择序号最低的项作为选择项
	                    //self._currentSelectionIndex = self._firstFilterIndex;
	                    self._firstFilterIndex = -1;
	                    self._changeVisualStates(_vsm.selectionSelected);
	                    //self._selections[self._currentSelectionIndex].focus();
	                } else {
	                    self._currentSelectionIndex = -1;
	                }
	            }
	        },
	        _onResize: function (e) {
	            var self = e.data;
	            self
	                ._updatePopupPosition()
	                ._hide()
	                ._measureSelectedItems();
	        },
	        /**
	         * 清除所有添加到Dom元素上的修改。
	         * @method _destroy
	         * @private
	         */
	        _destroy: function () {

	        }
	    });

	    /**
	     *  $main布局的相关逻辑。
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * $main部件在按键按下时触发。
	         * @method _onMainKeyDown
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onMainKeyDown: function (e) {
	            e.stopPropagation();
	            var
	            //
	            self = e.data,
	            //
	            count = self._selectedItems.length - 1;

	            if (self.options.disabled == true) {
	                return;
	            }
	            switch (e.which) {
	                case $.ui.keyCode.UP:
	                case $.ui.keyCode.DOWN:
	                    e.preventDefault();
	                    break;
	                    //左箭头
	                case 37:

	                    if (self._currentSelectedIndex == 0 || self._currentSelectedIndex == -1) {
	                        self._currentSelectedIndex = count;
	                    } else {
	                        self._currentSelectedIndex--;
	                    }
	                    break;
	                    //右箭头
	                case 39:
	                    if (self._currentSelectedIndex == count) {
	                        self._currentSelectedIndex = 0;
	                    } else {
	                        self._currentSelectedIndex++;
	                    }
	                    break;
	            }

	            if (e.which == 37 || e.which == 39) {
	                if (self._currentSelectedIndex >= 0 && self._currentSelectedIndex <= count) {
	                    self._selectedItems[self._currentSelectedIndex].focus();
	                }
	            } else if (e.which == 46 || e.which == 8) {
	                e.stopPropagation();
	                if (self._isTextAreaFocus == false) {
	                    e.preventDefault();
	                }
	                if ($$.executeEventHandler(self, "deleting", self.options.deleting, e, $$.Event({
	                    element: self.element,
	                    newValue: ko.toJS(self.selectedItems()[self._currentSelectedIndex])
	                }))) {
	                    self._removeSelectedItemByKeyboard();
	                }

	            }
	        }
	    });

	    /**
	     * _closeButtons部件的相关逻辑。
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * close按钮在鼠标移入时触发。
	         * @method _onCloseMouseOver
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onCloseMouseOver: function (e) {
	            var
	            //
	            self = e.data;
	            if (self != null) {
	                //$(this).children().addClass(_constant.RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CONTENT_MOUSEOVER_CLASS);
	            }
	        },
	        /**
	         * close按钮在鼠标移出时触发。
	         * @method _onCloseMouseOut
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onCloseMouseOut: function (e) {
	            var
	            //

	            self = e.data;
	            if (self != null) {
	                $(this).children().removeClass(_constant.RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CONTENT_MOUSEOVER_CLASS);
	            }
	        },
	        /**
	         * close按钮点击时触发。
	         * @method _onCloseClick
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onCloseClick: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            current = $(this),
	            //
	            index = current.attr("index"),
	            newItems,
	            newSelectedItems;

	            if (self.options.disabled == true) {
	                return;
	            }

	            if ($$.executeEventHandler(self, "deleting", self.options.deleting, e, $$.Event({
	                element: self.element,
	                newValue: ko.toJS(self.selectedItems()[index])
	            }))) {
	                self._lastSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	                self._lastItems = ko.mapping.toJS(self._vm.items);
	                self._removeSelectedItemByIndex(index);

	                newSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	                newItems = ko.mapping.toJS(self._vm.items);

	                self._trigger("selectionChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: self._lastSelectedItems,
	                    newValue: newSelectedItems
	                }));

	                self._trigger("itemsSourceChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: self._lastItems,
	                    newValue: newItems
	                }));

	                self._updateAndRearrange(true)
	            }
	        }
	    });

	    /**
	     * $dropdown部件的相关逻辑。
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * dropdown点击时触发。
	         * @method _onDropDownClick
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onDropDownClick: function (e, data) {
	            var
	            //
	            self = e.data;
	            if (self != null && !self.options.disabled) {
	                if (self._isOpened) {
	                    self._hide();
	                } else {
	                    self._show();
	                }

	                self._afterSelectionAreaDisplayChanged(false);
	                self.$input.focus();
	            }
	        }
	    });

	    /**
	     * $input部件的相关逻辑。
	     *
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * $input部件在按键按下时触发。
	         * @method _onTextAreaKeyDown
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onTextAreaKeyDown: function (e) {
	            var
	            //
	            self = e.data;

	            clearInterval(self._smartTimer);

	            //屏蔽textarea默认Enter键换行行为。
	            if (e.which == $.ui.keyCode.ENTER) {
	                e.preventDefault();
	            }
	            //空格
	            //(e.which == 32)
	            //输入法
	            //(e.which == 229)
	            //0-9
	            //e.which>=48 && e.which<=57
	            //a-z
	            //e.which>=65 && e.which<=90
	            //小键盘0-9 加特殊符号
	            //e.which>=96 && e.which<=111
	            //`-=[]\;
	            //e.which>=186 && e.which<=192
	            //',./
	            //e.which>=219 && e.which<=222
	            if ((e.which == 229) || (e.which == 32) || (e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90) || (e.which >= 96 && e.which <= 111) || (e.which >= 186 && e.which <= 192) || (e.which >= 219 && e.which <= 222)) {
	                self._startTimer(_delay);
	            } else if (e.which == 8 && self.$input.val() == '') {
	                if (self._currentSelectedIndex == 0 || self._currentSelectedIndex == -1) {
	                    self._currentSelectedIndex = self._selectedItems.length - 1;
	                } else {
	                    self._currentSelectedIndex--;
	                }
	            } else if (e.which == $.ui.keyCode.DOWN) {
	                if (!self._isOpened) {
	                    self.$dropdown.trigger('click', [{ isKeyDown: true }]);

	                }
	            }

	            switch (e.which) {
	                case 13:
	                    //Enter
	                    e.preventDefault();
	                    if (self._currentSelectionIndex != -1) {
	                        $(self._selections[self._currentSelectionIndex]).trigger('click');
	                    }
	                    break;
	                case 35:
	                    //End
	                    self._goToNextItem(35);
	                    break;
	                case 36:
	                    //Home
	                    self._goToNextItem(36);
	                    break;
	                case 38:
	                    //上箭头
	                    self._goToNextItem(38);
	                    break;
	                case 40:
	                    //下箭头
	                    self._goToNextItem(40);
	                    break;
	                case 27:
	                    //ESC
	                    self._changeVisualStates(_vsm.selectionNormal);
	                    self._hideSelectionArea();
	                    self.$input.focus();
	                    break;

	            }
	        },
	        /**
	         * $input部件在按键弹起时触发。
	         * @method _onTextAreaKeyUp
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onTextAreaKeyUp: function (e) {
	            var
	            //
	            self = e.data;
	            //
	            self._isTextAreaPressed = false;
	            //回退键弹起时,如果已经过滤了,进行一次新搜索
	            if (e.which == 8) {
	                if (self._isFilter == true) {
	                    self._startTimer(200);
	                }
	            }
	            self._trigger("inputKeyup", null, $$.Event({
	                newValue: self.$input.val()
	            }));
	            if (self.$input.val().length >= 1) {
	                clearInterval(self._smartTimer);
	                self._startSmartSearch();
	            }

	        },
	        _startSmartSearch: function () {
	            var self = this;
	            this._smartTimer = setInterval(function () {
	                if (self.$input.val().length >= 1) {
	                    clearInterval(self._smartTimer);
	                    self._trigger("smartSearch", null, $$.Event({
	                        newValue: self.$input.val()
	                    }));
	                }
	            }, 1000);
	        },
	        /**
	         * $input部件获取焦点时的触发。
	         * @method _onTextAreaFocus
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onTextAreaFocus: function (e) {
	            var
	            //
	            self = e.data;
	            //当前选中的可选项的序号
	            self._currentSelectedIndex = -1;
	            self._isTextAreaFocus = true;
	            self.$main.addClass(_constant.FOCUS_CLASS);
	        },
	        /**
	         * $input部件在按键按住时触发。
	         * @method _onTextAreaKeyPressed
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onTextAreaKeyPressed: function (e) {
	            var
	            //
	            self = e.data;
	            self._isTextAreaPressed = true;

	        },
	        /**
	         * textarea失去获取焦点时的触发。
	         * @method _onTextAreaBlur
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onTextAreaBlur: function (e) {
	            var
	            //
	            self = e.data;
	            self._isTextAreaFocus = false;
	            self.$main.removeClass(_constant.FOCUS_CLASS);

	            self._trigger("inputBlur", null, $$.Event({
	                newValue: self.$input.val()
	            }));
	        }
	    });

	    /**
	     * 视觉状态的相关逻辑.
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * 改变视觉状态。
	         * @method _changeVisualStates
	         * @private _changeVisualStates
	         * @param {Array} vsm 需要处理的视觉管理过程。
	         * @param {Array} vsm.add 需要添加的视觉状态。
	         * @param {Array} vsm.remove 需要移除的视觉状态。
	         */
	        _changeVisualStates: function (vsm) {
	            var
	            //
	            self = this,
	            //需要进行状态变化的项的序号
	            index = self._currentSelectionIndex,
	            //
	            add = vsm.add,
	            //
	            remove = vsm.remove,
	            //
	            i = 0,
	            //
	            al = add.length,
	            //
	            rl = remove.length;
	            if (index != -1) {
	                for (; i < al; i++) {
	                    self._vm.items()[index][add[i]](1);
	                }
	                for (i = 0; i < rl; i++) {
	                    self._vm.items()[index][remove[i]](0);
	                }
	            }
	        }
	    });

	    /**
	     * 可选项的相关逻辑
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * 可选项点击时调用。
	         * @method _onSelectionItemClick
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onSelectionItemClick: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            index = this.getAttribute('index'),
	            newItems,
	            newSelectedItems;

	            //清空过滤
	            self._clearFilter();
	            //关闭可选区域
	            self.hide();
	            self._currentSelectionIndex = -1;
	            self._lastSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	            self._lastItems = ko.mapping.toJS(self._vm.items);

	            //添加选定项
	            self._addSelectedItemByIndex(index);

	            newSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	            newItems = ko.mapping.toJS(self._vm.items);

	            self._trigger("selectionChanged", null, $$.Event({
	                element: self.element,
	                oldValue: self._lastSelectedItems,
	                newValue: newSelectedItems
	            }));

	            self._trigger("itemsSourceChanged", null, $$.Event({
	                element: self.element,
	                oldValue: self._lastItems,
	                newValue: newItems
	            }));

	            if (self.options.isMultiple === false && self._vm.selectedItems().length > 1) {
	                self.$main.find('div[class~="' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CLASS + '"][index=0]').trigger('click');
	            }
	            self._selections = self.$listbox.children();
	            self._measureSelectedItems(true);
	        },
	        /**
	         * 可选项在鼠标移入时触发。
	         * @method _onSelectItemMouseOver
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onSelectItemMouseOver: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            index = -1;
	            self._changeVisualStates(_vsm.selectionNormal);
	            index = self._currentSelectionIndex = this.getAttribute('index');

	            self._changeVisualStates(_vsm.selectionMouseOver);
	        },
	        /**
	         * 可选项在鼠标移出时触发。
	         * @method _onSelectItemMouseOut
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onSelectItemMouseOut: function (e) {
	            var
	            //
	            self = e.data;
	            self._changeVisualStates(_vsm.selectionNormal);
	        },

	        /**
	         * 关闭可选区域和遮罩。
	         * @param _hideSelectionArea
	         * @private
	         */
	        _hideSelectionArea: function () {
	            var self = this;
	            this.$popup.hide();
	            this.$main.css('zIndex', 0);
	        },
	        /**
	         * 获取可选项的显示名称，过滤时使用。
	         * @method _getDisplayName
	         * @private
	         * @param {Object} item 可选项。
	         *
	         */
	        _getDisplayName: function (item) {
	            var
	            //
	            self = this,
	            //
	            value,
	            //
	            name = self._displayName;
	            if (!self._isCaseSensitive) {
	                value = item[name]().toLowerCase();
	            } else {
	                value = item[name]();
	            }

	            return value;
	        },
	        /**
	         * 管理可选项的事件注册。
	         * @method _manageSelectionEvent
	         * @private
	         */
	        _manageSelectionEvent: function () {
	            var
	            //
	            self = this,
	            //
	            name = self.eventNamespace,
	            //
	            method = self._method;

	            self._selections
	            //
	            .off(name)
	            //
	            .on('click' + name, self, self._onSelectionItemClick)
	            //
	            .on('mouseout' + name, self, self._onSelectItemMouseOut)
	            //
	            .on('mouseover' + name, self, self._onSelectItemMouseOver);
	        },
	        /**
	         * 选定到下一个可选项。
	         * @method _goToNextItem
	         * @private
	         * @param {Number} key 键盘对应的数字标识。
	         */
	        _goToNextItem: function (key) {
	            var
	            //
	            self = this,
	            //当前选定项的序号
	            oldIndex = self._currentSelectionIndex,
	            //可选项对应的jQuery集合
	            selections = self._selections,
	            //最后一项的序号
	            max = selections.length - 1,
	            //将要选定的项的序号
	            index = -1;
	            switch (key) {
	                case 35:
	                    //End
	                    index = max;
	                    break;
	                case 36:
	                    //Home
	                    index = 0;
	                    break;
	                case 38:
	                    //上箭头
	                    index = self._getNextIndex(false, oldIndex);
	                    self._updateScrollbar(true, index);
	                    break;
	                case 40:

	                    index = self._getNextIndex(true, oldIndex);
	                    self._updateScrollbar(false, index);
	                    //下箭头
	                    break;
	            }
	            self._changeVisualStates(_vsm.selectionNormal);
	            self._currentSelectionIndex = index;
	            self._changeVisualStates(_vsm.selectionSelected);
	            //self._selections[index].focus();

	        },
	        _updateScrollbar: function (isUp, index) {
	            var
	                self = this,
	                first = $(self._selections[0]),
	                value = 0,
	                height = self.options.maxHeight,
	                current = $(self._selections[index]);

	            if (isUp) {
	                value = current.offset().top - first.offset().top - self.$popup.scrollTop();
	                if (value < 0) {
	                    self.$popup.scrollTop(self.$popup.scrollTop() + value);
	                }
	            } else {
	                value = current.offset().top - first.offset().top + 26 - height;
	                if (value > self.$popup.scrollTop()) {
	                    self.$popup.scrollTop(value);
	                }
	            }


	        },
	        _getNextIndex: function (isAdd, oldIndex) {
	            var
	                self = this,
	                index = -1,
	                selections = self._selections;
	            if (isAdd) {
	                index = ++oldIndex < selections.length - 1 ? oldIndex : selections.length - 1;
	            } else {
	                index = --oldIndex > 0 ? oldIndex : 0;
	            }
	            if ($(self._selections[index]).is(':hidden')) {
	                index = self._getNextIndex(isAdd, index);
	            }

	            return index;
	        },
	        /**
	         * Crete New点击时触发。
	         * @method _onCreateNewClick
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onCreateNewClick: function (e) {
	            var
	            //
	            self = e.data;
	            if (self != null) {
	                self._hideSelectionArea();
	            }
	        }
	    });

	    /**
	     * 选定项的相关逻辑
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * 选定区域按键按下时触发
	         */
	        _onSelectedAreaKeyDown: function (e) {
	            var
	            //
	            self = e.data,
	            //
	            key = e.which;

	            if (key == 9) {
	                e.preventDefault();
	                self.$input.focus();
	            }
	        },
	        /**
	         * 选定项点击时触发。
	         * @method _onSelectedItemClick
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onSelectedItemClick: function (e) {
	            var
	            //
	            self = e.data,
	            index = $(e.target).attr("index") - 0,
	            newValue;

	            if (!self.options.disabled) {
	                newValue = ko.mapping.toJS(self._vm.selectedItems()[index]);
	                delete newValue._display;
	                delete newValue._isSelectionMouseOver;
	                delete newValue._isSelectionSelected;
	                self._trigger("itemClick", null, $$.Event({
	                    element: self.element,
	                    newValue: newValue,
	                    parameters: {
	                        index: index
	                    }
	                }));
	            }

	        },
	        /**
	         * 选定项获取焦点时触发
	         * @method _onSelectedItemFocus
	         * @private
	         * @param {jQuery.Event} e 事件参数。
	         */
	        _onSelectedItemFocus: function (e) {
	            var
	            //
	            self = e.data;

	            //当前选中的可选项的序号
	            self._currentSelectedIndex = this.getAttribute('index');
	        },
	        /**
	         * 设置选定项。
	         * @method _setSelectedItems
	         * @private
	         * @param {Array} array 需要设置的集合。
	         */
	        _setSelectedItems: function (array) {
	            var
	            //
	            self = this,
	            //
	            i = 0,
	            //
	            j = 0,
	            //属性名称
	            p = '',
	            //
	            canAdd = false,
	            //
	            items = self._vm.items(),
	            //
	            addItem,
	            //
	            removeIndex = [],
	            //已经存在的选中项的个数
	            s_count = self._vm.selectedItems().length,
	            //
	            k = s_count - 1,
	            //待添加的选定项的个数
	            count = array.length,
	            newItems,
	            newSelectedItems;
	            self._lastSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	            self._lastItems = ko.mapping.toJS(self._vm.items);

	            if (self._isSelectedItemsChanged(array, self._lastSelectedItems)) {
	                if (s_count != 0) {
	                    for (; k >= 0; k--) {
	                        self._removeSelectedItemByIndex(k);
	                    }
	                }

	                for (; i < count; i++) {
	                    j = self._vm.items().length - 1;
	                    for (; j >= 0; j--) {
	                        canAdd = false;
	                        for (p in array[i]) {
	                            if (array[i][p] != items[j][p]()) {
	                                break;
	                            }
	                            canAdd = true;
	                        }
	                        if (canAdd == true) {
	                            self._addSelectedItemByIndex(j);
	                            break;
	                        }

	                    }
	                }
	                newSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	                newItems = ko.mapping.toJS(self._vm.items);

	                self._trigger("selectionChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: self._lastSelectedItems,
	                    newValue: newSelectedItems
	                }));
	                self._trigger("itemsSourceChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: self._lastItems,
	                    newValue: newItems
	                }));

	                self._updateAndRearrange(true);
	            }
	        },
	        /**
	         * 获取或设置选定项的集合。
	         * @method selectedItems
	         * @param {Array} array 选定项的集合。
	         */
	        selectedItems: function (array) {
	            var self = this;
	            if (array != null && $.isArray(array)) {
	                //设置选定项
	                self._setSelectedItems(array);
	            } else {
	                //返回选定项的集合
	                return self._vm.selectedItems();
	            }

	        }
	    });

	    /**
	     * 添加删除的相关逻辑。
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * 添加指定序号的选择项。
	         * @method _addSelectedItemByIndex
	         * @private
	         * @param {Number} index 需要添加的选择项的序号。
	         */
	        _addSelectedItemByIndex: function (index) {
	            var
	            //
	            self = this,
	            //
	            method = self._method,
	            //
	            name = self.eventNamespace,
	            //当前点击项对应的数据
	            item = null,
	            //添加项的jQuery对象
	            addItem = null,
	            //添加项的index
	            addindex = 0,
	            //添加项中的关闭按钮
	            close = null;

	            item = self._vm.items.splice(index, 1)[0];
	            //添加
	            self._vm.selectedItems.push(item);
	            addindex = self._selectedItems.length;

	            //注册事件
	            addItem = self.$main
	            //
	            .find('div[class~="' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLASS + '"][index=' + addindex + ']')
	            //
	            .on('click' + name, self, self._onSelectedItemClick)
	            //
	            .on('focus' + name, self, self._onSelectedItemFocus);

	            //关闭按钮的相关逻辑
	            self._closeButtons = addItem
	            //
	            .children('div[class~="' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLOSE_CLASS + '"][index=' + addindex + ']')
	            //
	            .on('mouseover' + name, self, self._onCloseMouseOver)
	            //
	            .on('mouseout' + name, self, self._onCloseMouseOut)
	            //
	            .on('click' + name, self, self._onCloseClick);

	            self._selectedItems.push(addItem);

	        },
	        _trigger: function (type, event, args) {
	            var
	                self = this,
	                parameters;


	            if (args) {
	                parameters = self.options.parameters[type] || {};
	                $.extend(true, args.parameters, parameters);
	                args.type = "richcombobox";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        /**
	         * 移除与指定序号的选定项
	         * @method _removeSelectedItemByIndex
	         * @private
	         * @param {Number} index 需要移除的选定项的序号
	         */
	        _removeSelectedItemByIndex: function (index) {
	            var self = this;
	            self._vm.items.push(self._vm.selectedItems.splice(index, 1)[0]);
	            self._selectedItems.splice(index, 1);
	        },
	        /**
	         * 点击delete按键或回退按键删除获得焦点的选择项
	         * @method _removeSelectedItemByKeyboard
	         * @private
	         */
	        _removeSelectedItemByKeyboard: function () {
	            var
	            //
	            self = this,
	            //删除项的序号
	            index = self._currentSelectedIndex,
	            //删除对象的前一个项的序号
	            preIndex = 0,
	            newItems,
	            newSelectedItems;
	            if (index != -1 && self._selectedItems.length > 0) {
	                self._lastSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	                self._lastItems = ko.mapping.toJS(self._vm.items);
	                self._removeSelectedItemByIndex(index);

	                newSelectedItems = ko.mapping.toJS(self._vm.selectedItems);
	                newItems = ko.mapping.toJS(self._vm.items);

	                self._trigger("selectionChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: self._lastSelectedItems,
	                    newValue: newSelectedItems
	                }));

	                self._trigger("itemsSourceChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: self._lastItems,
	                    newValue: newItems
	                }));

	                self._updateAndRearrange(true);
	                //如果当前选定项的序号不是0,减一
	                preIndex = (index <= 0) ? 0 : index - 1;

	                if (preIndex >= 0) {
	                    if (self._selectedItems[preIndex]) {
	                        self._selectedItems[preIndex].focus();
	                    }
	                    self._currentSelectedIndex = preIndex;
	                }
	            }
	        },
	        /**
	         * 重新计算可选项并进行布局
	         * @method _updateAndRearrange
	         * @private
	         * @param {Boolean} isFocus 是否设置$input部件的焦点。
	         */
	        _updateAndRearrange: function (isFocus) {
	            this._sortItemsSource();
	            //排序之后更新_selections
	            this._selections = this.$listbox.children();
	            this._manageSelectionEvent();
	            this._measureSelectedItems(isFocus);
	        },
	        _arrangeSelectedItems: function (isFocus) {
	            var
	                selectedsWidth = this.$selectedArea.width(),
	                eWidth = this.element.width(),
	                iWidth = eWidth - 45,
	                itop = 0,
	                last,
	                ileft,
	                position;

	            if (this.element.hasClass(_constant.WITH_SCROLL_CLASS) && $$.isScroll(this.element)) {
	                eWidth -= 17;
	                iWidth -= 17;
	            }

	            this.$selectedArea
	                .width('auto')
	                .css('margin-right', 90);

	            this.element
	                .find('.' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CONTENT_CLASS)
	                .css('max-width', iWidth - 105 - 32);
	            last = this.$main.find('.' + _constant.RICHCOMBOBOX_SELECTED_ITEM_CLASS + ':last');
	            if (last.length == 1 && this.selectedItems().length > 0) {
	                position = last.position();
	                iWidth = eWidth - 45 - position.left - last.width();
	                itop = position.top - 2;
	                ileft = 'auto';

	            } else {
	                iWidth = eWidth - 45;
	                itop = 2;
	            }

	            this.$input
	                .css({
	                    width: iWidth,
	                    top: itop
	                });

	            if (isFocus === true) {
	                this.$input.focus();
	            }
	        },
	        _measureSelectedItems: function (isFocus) {
	            var self = this;

	            clearInterval(this._measureTimer);

	            if (this.$selectedArea.is(':hidden')) {
	                this._measureTimer = setInterval(function () {
	                    if (self.$selectedArea.is(':visible')) {
	                        clearInterval(self._measureTimer);
	                        self._arrangeSelectedItems();
	                    }
	                }, 200);
	            } else {
	                this._arrangeSelectedItems();
	            }

	            return this;
	        },
	        /**
	         * 获取或设置可选项的集合。
	         * @method itemsSource
	         * @param {Array} source 可选项的集合
	         */
	        itemsSource: function (data) {
	            var self = this;

	            if (data === undefined) {
	                //获取控件的数据源  
	                return ko.mapping.toJS(self._vm.items);
	            } else {
	                var
	                //
	                i = 0,
	                source = [],
	                //
	                count = 0;
	                $.extend(true, source, data);
	                count = source.length;
	                for (; i < count; i++) {
	                    //数据的显示状态
	                    source[i]['_display'] = 'block';
	                    //可选项的视状态
	                    source[i][_visualProperties.selectionMouseOver] = 0;
	                    source[i][_visualProperties.selectionSelected] = 0;
	                }

	                self._setItemsSource(source);
	                self._selections = this.$listbox.children();
	                self._manageSelectionEvent();
	            }
	        },
	        /**
	         * 设置可选项
	         * @method _setItemsSourcesss
	         * @private
	         */
	        _setItemsSource: function (source) {
	            var self = this,
	            //当前的内容集合
	            current = self._vm.items(),
	            //当前内容集合的个数
	            count = current.length,
	            //数据源的个数
	            s_count = source.length,
	            //
	            i = 0,
	            //
	            j = 0;

	            self.options.itemsSource = source;

	            if (count === 0) {
	                //如果当前的内容集合中的数据个数为0，重新初始化数据源
	                self._vm.items(ko.mapping.fromJS(source)());
	                self._sortItemsSource();
	            } else {
	                //行缓存机制
	                if (count < s_count) {
	                    // 添加source中新数据
	                    for (j = count; j < s_count; j++) {
	                        self._vm.items.push(ko.mapping.fromJS(source[j]));
	                    }
	                } else if (count > s_count) {
	                    // 删除多余的行
	                    self._vm.items.splice(s_count);
	                }

	                // 将source中 的数据同步._vm.items中
	                for (var i = 0; i < count; i++) {
	                    for (var p in current[i]) {
	                        if (p == '__ko_mapping__') {
	                            continue;
	                        }

	                        if (ko.isObservable(current[i][p])) {
	                            current[i][p](source[i][p]);
	                        } else {
	                            current[i][p] = source[i][p];
	                        }
	                    }
	                }
	            }
	        },
	        /**
	         * 清除可选项和选择项。
	         * @method clearItems
	         */
	        clearItems: function () {
	            var self = this;
	            self._vm.items.removeAll();
	            self._vm.selectedItems.removeAll();

	            self._selectedItems.splice(0);

	            self._measureSelectedItems(false);
	        }
	    });

	    /**
	     * 过滤的相关逻辑。
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        /**
	         * 过滤可选区域
	         * @method _onTimer
	         * @private
	         */
	        _onTimer: function (self) {
	            if (self._isTextAreaPressed === false) {
	                self._clearTimer();
	                self._filterSelection();
	            }

	        },
	        /**
	         * 启动定时器
	         * @method _startTimer
	         * @private
	         * @param {Number} delay 延迟时间
	         */
	        _startTimer: function (delay) {
	            var self = this;
	            if (self.options.hasFilter) {
	                self._clearTimer();
	                self._timer = setInterval(function () {
	                    self._onTimer(self);
	                }, delay);
	            }
	        },
	        /**
	         * 关闭定时器
	         * @method _clearTimer
	         * @private
	         */
	        _clearTimer: function () {
	            if (this._timer != null) {
	                clearInterval(this._timer);
	            }
	        },
	        /**
	         * 获取比较条件
	         * @method _getFilterCondition
	         * @private
	         */
	        _getFilterCondition: function () {
	            var
	            //
	            self = this,
	            //
	            textArea = self.$input,
	            //
	            value = '';
	            if (!self._isCaseSensitive) {
	                value = textArea.val().toLowerCase();
	            } else {
	                value = textArea.val();
	            }

	            return value;
	        },
	        _isSelectedItemsChanged: function (value, last) {
	            var
	                isChanged = true,
	                i = 0,
	                c,
	                name = this._displayName;
	            if (last.length == value.length) {
	                c = value.length;
	                for (; i < c; i++) {
	                    if (value[i][name] != value[i][name]) {
	                        break;
	                    }
	                }

	                if (i == c) {
	                    isChanged = false;
	                }
	            }

	            return isChanged;
	        },
	        /**
	         * 过滤可选项
	         * @method _filterSelection
	         * @private
	         */
	        _filterSelection: function () {
	            var
	            //filter项的序号
	            i = 0,
	            //符合过滤条件的项的个数
	            j = 0,
	            //
	            self = this,
	            //
	            index = [],
	            //
	            messagePart = self.$selectionMessage,
	            //
	            condition = self._getFilterCondition();
	            //重置过滤首相的序号
	            self._firstFilterIndex = -1;

	            //过滤
	            ko.utils.arrayForEach(self._vm.items(), function (item) {
	                var o = self._getDisplayName(item);
	                item._display('block');
	                if (o.indexOf(condition) == -1) {
	                    //隐藏不符合条件的项
	                    item._display('none');
	                    index.push(i);
	                } else {
	                    j++;
	                    if (self._firstFilterIndex == -1) {
	                        self._firstFilterIndex = i;
	                    }
	                }
	                i++;
	            });
	            if (index.length != 0) {
	                self._isFilter = true;
	            } else {
	                self._isFilter = false;
	            }

	            self.show();
	            this._updatePopupPosition();
	            //搜索不到时，显示提示
	            if (j == 0) {
	                messagePart.show();
	            } else {
	                messagePart.hide();
	            }
	            self._changeVisualStates(_vsm.selectionNormal);
	            self._afterSelectionAreaDisplayChanged(true);

	        },
	        /**
	         * 清除可选项的过滤
	         * @method _clearFilter
	         * @private
	         */
	        _clearFilter: function () {
	            if (this.options.hasFilter && this.$input.val('') == '') {
	                //清空过滤等价于用空字符串过滤，由于_filterSelection需要设置选择项的状态，因此需要在clear时将选中状态还原。
	                this.$input.val('');
	                this._filterSelection();
	                this._changeVisualStates(_vsm.selectionNormal);
	            }
	        },
	        clearFilter: function () {
	            var self = this;
	            self._clearFilter();
	            //关闭可选区域 
	            self._hideSelectionArea();
	            self._currentSelectionIndex = -1;
	        },
	        /**
	         * 获取搜索条件。
	         * @method getSearchCondition
	         */
	        getSearchCondition: function () {
	            return this.$input.val();
	        },
	        setSearchCondition: function (val) {
	            return this.$input.val(val);
	        }
	    });

	    /**
	     * 排序的相关逻辑
	     */
	    $.extend($.aui.richcombobox.prototype, {
	        //用于排序的方法
	        _sortPredicate: function (p, n) {
	            var
	            //
	            value = 0,
	            //
	            a = p.name().toLowerCase(),
	            //
	            b = n.name().toLowerCase();
	            if (a < b) {
	                value = -1
	            }
	            if (a > b) {
	                value = 1
	            }
	            return value;
	        },
	        /**
	         * 对可选项进行排序
	         * @method _sortItemsSource
	         * @private
	         */
	        _sortItemsSource: function () {
	            var self = this;
	            if (self.options.autoSort === true) {
	                if (self.options.sortPredicate) {
	                    self._vm.items.sort(self.options.sortPredicate);
	                } else {
	                    self._vm.items.sort(function (p, n) {
	                        var
	                        //
	                        value = 0,
	                        //
	                        name = self.options.displayName,
	                        //
	                        a = p[name]().toLowerCase(),
	                        //
	                        b = n[name]().toLowerCase();
	                        if (a < b) {
	                            value = -1
	                        }
	                        if (a > b) {
	                            value = 1
	                        }
	                        return value;
	                    });
	                }
	            }
	        }
	    });

	}(AUI, jQuery));

/***/ },
/* 42 */
/***/ function(module, exports) {

	(function ($$, $) {
	    "use strict";

	    var
	        uuid = -1,
	        _constant = {
	            //包含separator的容器的样式
	            SEPARATOR_CLASS: "aui-separator",
	            //
	            GRID_CLASS: "aui-separator-grid",
	            //
	            CONTAINMENT_CLASS: "aui-separator-containment",
	            //拖拽部件对应的
	            THUMB_CLASS: "aui-separator-thumb",
	            //
	            THUMB_FONT_CLASS: "aui-separator-thumb-font",
	            //
	            THUMB_FONT_V_CLASS: "aui-icon-splitter-v",
	            //
	            BORDER_CLASS: "aui-separator-border",
	            //
	            THUMB_VERTICAL_CLASS: "aui-separator-thumb-vertical",
	        },
	        _orientation = {
	            horizontal: "horizontal",
	            vertical: "vertical"
	        };

	    $.widget("aui.separator", {
	        firstId: "aui-separator-first-",
	        lastId: "aui-separator-last-",
	        //容器对应的jQuery对象
	        $grid: null,
	        //拖拽部件对应的jQuery对象
	        $thumb: null,
	        //容器对应的jQuery对象
	        $panels: null,
	        //拖拽区域对应的jQuery对象
	        $containment: null,
	        //第一列或第一行对应的jQuery对象
	        $first: null,
	        //最后一列或最后一行对应的jQuery对象
	        $last: null,
	        options: {
	            start: '20',
	            minimum: 0,
	            maximize: '100',
	            orientation: _orientation.horizontal
	        },
	        _create: function () {
	            this._initMembers()
	                ._createSeparator()
	                ._loaded()
	                ._initEvent();
	        },
	        _initMembers: function () {
	            var self = this;

	            ++uuid;
	            self._initId();

	            self.element.addClass(_constant.SEPARATOR_CLASS);
	            self.$panels = self.element.children();

	            return self;
	        },
	        _initId: function () {
	            var self = this;

	            self.firstId += uuid;
	            self.lastId += uuid;
	        },
	        _createSeparator: function () {
	            var
	                self = this,
	                html = [],
	                h = -1;
	            html[++h] = self._createThumb();

	            html[++h] = '<table class="' + _constant.GRID_CLASS + ' ' + _constant.BORDER_CLASS + '">';

	            html[++h] = '<colgroup>';
	            html[++h] = '<col id="' + self.firstId + '" />';
	            html[++h] = '<col style="width:1px;" />';
	            html[++h] = '<col style="width:7px;" />';
	            html[++h] = '<col style="width:1px;" />';
	            html[++h] = '<col id="' + self.lastId + '" />';
	            html[++h] = '</colgroup>';

	            html[++h] = '<tbody>';
	            html[++h] = '<tr>';
	            html[++h] = '<td></td>';

	            html[++h] = '<td><div style="width:1px;height:100%;"></div></td>';
	            //thumb占位
	            html[++h] = '<td></td>';
	            html[++h] = '<td><div style="width:1px;height:100%;"></div></td>';

	            html[++h] = '<td></td>';
	            html[++h] = '</tr>';
	            html[++h] = '</tbody>';

	            html[++h] = '</table>';

	            html[++h] = '<div class="' + _constant.CONTAINMENT_CLASS + '"></div>';
	            self.element.append(html.join(''));

	            return self;
	        },
	        _createThumb: function () {
	            var
	                self = this,
	                html = [],
	                h = -1;

	            if (self.options.orientation == _orientation.horizontal) {
	                html[++h] = '<div class="' + _constant.THUMB_CLASS + ' ' + _constant.THUMB_VERTICAL_CLASS + ' ' + _constant.BORDER_CLASS + '">';

	                html[++h] = '<div class="' + _constant.THUMB_FONT_CLASS + ' ' + _constant.THUMB_FONT_V_CLASS + '" >';
	                html[++h] = '</div>';

	                html[++h] = '</div>';
	            } else {

	            }

	            return html.join('');
	        },
	        _loaded: function () {
	            var
	                self = this,
	                options = self.options,
	                start = typeof options.start == "string" ? options.start + '%' : options.start,
	                min = typeof options.minimum == "string" ? options.minimum + '%' : options.minimum + 'px',
	                max = typeof options.maximize == "string" ? options.maximize + '%' : options.maximize;

	            self.$grid = self.element.children('table[class~="' + _constant.GRID_CLASS + '"]');
	            if (self.options.minWidth != undefined) {
	                self.element.css("min-width", self.options.minWidth);
	            }

	            self.$first = self.$grid.find("#" + self.firstId)
	                .width(start);
	            self.$last = self.$grid.find("#" + self.lastId);

	            self._resetPanels(self.$grid, self.$panels);

	            self.$containment = self.element.children('div[class~="' + _constant.CONTAINMENT_CLASS + '"]')
	                .width(max)
	                .css("padding-left", min);

	            self.$thumb = self.element.children('div[class~="' + _constant.THUMB_CLASS + '"]')
	                .css("left", start)
	                .draggable({
	                    separator: self,
	                    containment: self.$containment,
	                    cursor: "e-resize",
	                    disabled: self.options.disabled,
	                    drag: self._onThumbDrag
	                });

	            return self;
	        },
	        //将panel放都对应的cell中
	        _resetPanels: function (grid, panels) {
	            var
	                self = this,
	                tds = grid.find('td');

	            if (panels.length != 3) {
	                //throw error
	            }

	            $(tds[0]).append(panels[0]);
	            $(tds[4]).append(panels[1]);

	        },
	        //获取拖拽区域的宽度
	        _getContainmentWidth: function () {

	        },
	        _onThumbDrag: function (e, ui) {
	            var self = ui.helper.draggable("option", "separator");

	            self.$first.width(ui.position.left);
	        },
	        _initEvent: function () {
	            var
	                self = this,
	                ns = self.eventNamespace;

	            return self;
	        }
	    });
	})(AUI, jQuery);

/***/ },
/* 43 */
/***/ function(module, exports) {

	(function ($$, $) {
	    "use strict";

	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.slider = {
	            init: function (element, valueAccessor, allBindings, viewModel) {
	                var
	                    element = $(element),
	                    data = valueAccessor(),
	                    disabled = data.disabled,
	                    disabledObservable = ko.isObservable(disabled),
	                    selectedValue = data.selectedValue,
	                    selectedValueObservable = ko.isObservable(selectedValue),
	                    value = ko.toJS(ko.unwrap(data)),
	                    executeEventHandler = $$.executeEventHandler,
	                    isEnabledChanged = value.isEnabledChanged,
	                    //valueChanged事件的回调
	                    valueChanged = value.valueChanged;
	                value.parameters = viewModel.parameters;

	                element.slider(value);

	                if (selectedValueObservable) {
	                    element.slider("option", "valueChanged", function (e, args) {
	                        selectedValue(args.newValue);
	                        executeEventHandler(null, "valueChanged", valueChanged, e, args);
	                    });

	                    selectedValue.subscribe(function () {
	                        element.slider("option", "selectedValue", selectedValue());
	                    });
	                }

	                if (disabledObservable) {
	                    element.slider("option", "isEnabledChanged", function (e, args) {
	                        disabled(args.newValue);
	                        executeEventHandler(null, "isEnabledChanged", isEnabledChanged, e, args);
	                    });

	                    disabled.subscribe(function () {
	                        element.slider("option", "disabled", disabled());
	                    });
	                }

	                return { 'controlsDescendantBindings': true };
	            }
	        };
	    }

	    var
			//常量
			_constant = {
			    //slider的样式
			    SLIDER_CLASS: "aui-slider",
			    //slider不可用状态的样式
			    SLIDER_DISABLED_CLASS: "aui-slider-disabled",
			    //刻度容器使用的样式
			    SLIDER_SCALE_CLASS: "aui-slider-scale",
			    //横向刻度使用的样式
			    SLIDER_SCALE_HORIZONTAL_CLASS: "aui-slider-scale-horizontal",
			    //纵向刻度使用的样式
			    SLIDER_SCALE_VERTICAL_CLASS: "aui-slider-scale-vertical",
			    //刻度部件使用的样式
			    SCALE_PART_CLASS: "aui-slider-scale-part",
			    //刻度部件内容部分的样式
			    SCALE_PART_CONTENT_CLASS: "aui-slider-scale-part-content",
			    //轨道容器使用的样式
			    ORBIT_CONTAINER_CLASS: "aui-slider-orbit-container",
			    ORBIT_CONTAINER_HORIZONTAL_CLASS: "aui-slider-orbit-container-horizontal",
			    ORBIT_CONTAINER_VERTRICAL_CLASS: "aui-slider-orbit-container-vertical",
			    //轨道部件使用的样式
			    ORBIT_CLASS: "aui-slider-orbit",
			    ORBIT_HORIZONTAL_CLASS: "aui-slider-orbit-horizontal",
			    ORBIT_VERTICAL_CLASS: "aui-slider-orbit-vertical",
			    //滑块部件使用的样式
			    THUMB_CLASS: "aui-slider-thumb",
			    //滑块部件在纵向模式下使用的样式
			    THUMB_VERTICAL_CLASS: "aui-slider-thumb-vertical",
			    //滑块部件在横向模式下使用的样式
			    THUMB_HORIZONTAL_CLASS: "aui-slider-thumb-horizontal",
			    //进度部件使用的样式
			    PROGRESS_CLASS: "aui-progress",
			    PROGRESS_HORIZONTAL_CLASS: "aui-progress-horizontal",
			    PROGRESS_VERTICAL_CLASS: "aui-progress-vertical",
			    PROGRESS_SPEAKERS_CLASS: "aui-progress-speakers",
			    //遮罩部件使用的样式
			    OVERLAY_CLASS: "aui-slider-overlay"
			},
	        _orientation = {
	            horizontal: "horizontal",
	            vertical: "vertical",
	            speakers: "speakers"
	        };
	    $$.slider = function (type) {
	        var value = null;
	        if (type == "orientation") {
	            value = $.extend(true, value, _orientation);
	        }

	        return value;
	    }
	    $.widget("aui.slider", {
	        $scale: null,
	        //轨道容器对应的jQuery对象      
	        $orbitContainer: null,
	        //滑块部件对应的jQuery对象
	        $thumb: null,
	        //进度部件对应的jQuery对象
	        $progress: null,
	        // 1/increment。根据精度放大的倍数。
	        _pow: 1,
	        //slider的方向,
	        _mode: null,
	        //thumb偏移属性
	        _direction: null,
	        //scale的编译属性
	        _reDirection: null,
	        //刻度。
	        _values: [],
	        //该值表示范围元素的最小值。
	        _minimum: 0,
	        //第二个值
	        _second: 1,
	        //该值表示范围元素的最大值。
	        _maximum: 100,
	        //值的范围
	        _valuerange: 1,
	        //slider的范围（控件的长度或者高度）
	        _range: 1,
	        //键盘移动的最小步长
	        _step: 1,
	        //
	        _oldValue: -1,
	        //宽度或者高度
	        _wh: null,
	        //高度或者宽度
	        _hw: null,
	        //鼠标点击位置的偏移量
	        _offset: null,
	        _draggable: false,
	        options: {
	            //获取或设置一个值，该值表示是否显示刻度。只在控件初始化时设置有效。
	            hasScale: true,
	            //可滑动区域的范围
	            range: 300,
	            //设置一个数组，该值表示刻度。数组的每一项是数字(number)，或者可以被转换成数字的字符串。按递增顺序排列。
	            values: [],
	            //获取或设置一个值，该值表示，滑块位置对应的刻度值。
	            selectedValue: 0,
	            //获取或设置一个值，该值表示控件是否可用，true表示不可用，默认值false
	            disabled: false,
	            //获取或设置slider的方向。只在控件初始化时设置有效。
	            orientation: _orientation.horizontal,
	            //获取或设置一个值，该值表示控件是否可以拖拽。只在控件初始化时设置有效。
	            draggable: false,
	            //获取或设置一个值，该值表示控件的精度，即两个刻度间的值等分成多少。只在draggable设置成true时有效
	            increment: 1,
	            //获取或设置一个方法，该方法在disabled属性变化后触发
	            isEnabledChanged: $.noop,
	            //获取或设置一个方法，该方法在滑块的位置变化后触发
	            valueChanged: $.noop
	        },
	        _create: function () {
	            this._initMembers()
	                ._createSlider()
	                ._loaded()
	                ._setScalePosition();
	        },
	        //初始化成员
	        _initMembers: function () {
	            var self = this;

	            if (self.options.orientationMode == "horizontal") {
	                self.options.orientation = _orientation.horizontal;
	            } else if (self.options.orientationMode == "vertical") {
	                self.options.orientation = _orientation.vertical;
	            }

	            self._values = self.options.values;
	            self._draggable = self.options.draggable;
	            self._mode = self.options.orientation;
	            self._range = self.options.range;
	            self._pow = 1 / self.options.increment;

	            self._initDirection();

	            self.element
	                [self._wh](self._range)
	                .addClass(_constant.SLIDER_CLASS);

	            if (self._values.length == 0) {
	                $.error('Please set "values" when using slider.');
	            } else {
	                self._minimum = parseInt(self._values[0]) || 0;
	                self._second = parseInt(self._values[1]) || 0;
	                self._maximum = parseInt(self._values[self._values.length - 1]) || 0;
	            }

	            //精度转换
	            self._minimum = self._minimum * self._pow;
	            self._second = self._second * self._pow;
	            self._maximum = self._maximum * self._pow;

	            if (self._minimum >= self._maximum || self._maximum == 0) {
	                $.error('Minimum must less than Maximum.Please check your initialize settings for "values".');
	            }

	            self._step = (self._second - self._minimum) / self._pow;

	            self._valuerange = self._maximum - self._minimum;

	            return self;
	        },
	        _initDirection: function () {
	            var self = this;

	            switch (self.options.orientation) {
	                case _orientation.horizontal:
	                    self._direction = "left";
	                    self._reDirection = "right";
	                    self._wh = "width";
	                    self._hw = "height";
	                    self._offset = "offsetX";
	                    break;
	                case _orientation.vertical:
	                    self._direction = "top";
	                    self._reDirection = "bottom";
	                    self._wh = "height";
	                    self._hw = "height";
	                    self._offset = "offsetY";
	                    break;
	                case _orientation.speakers:
	                    self._direction = "bottom";
	                    self._reDirection = "top";
	                    self._wh = "height";
	                    self._hw = "height";
	                    self._offset = "offsetY";
	                    break;
	                default:
	                    break;
	            }

	            return self;
	        },
	        //创建slider  
	        _createSlider: function () {
	            var
	                self = this,
	                h = -1,
	                html = [];

	            html[++h] = self._createScale();
	            html[++h] = '<div class="' + _constant.OVERLAY_CLASS + '"></div>';
	            html[++h] = self._createOrbit();

	            self.element.html(html.join(''));

	            return self;
	        },
	        //创建刻度
	        _createScale: function () {
	            var
	                self = this,
	                h = -1,
	                i = 0,
	                values = self._values,
	                c = values.length,
	                percent = 0,
	                direction = self._direction,
	                sliderClass = _constant.SLIDER_SCALE_CLASS + " ",
	                html = [];
	            if (self._mode == "horizontal") {
	                sliderClass += _constant.SLIDER_SCALE_HORIZONTAL_CLASS;
	            } else {
	                sliderClass += _constant.SLIDER_SCALE_VERTICAL_CLASS;
	            }
	            if (c > 2) {
	                percent = 100 / (c - 1);
	            }
	            if (self.options.hasScale) {
	                html[++h] = '<div class="' + sliderClass + '">';
	            } else {
	                html[++h] = '<div class="' + sliderClass + '" style="display:none;">';
	            }

	            for (; i < c; i++) {
	                html[++h] = '<div class="' + _constant.SCALE_PART_CLASS + '" style="' + direction + ':' + i * percent + '%"><div class="' + _constant.SCALE_PART_CONTENT_CLASS + '">' + values[i] + '</div></div>';
	            }

	            html[++h] = '</div>';

	            return html.join('');
	        },

	        //创建滑动区域
	        _createOrbit: function () {
	            var
	                self = this,
	                h = -1,
	                containerClass = _constant.ORBIT_CONTAINER_CLASS + " ",
	                orbitClass = _constant.ORBIT_CLASS + " ",
	                thumbClass = _constant.THUMB_CLASS,
	                progressClass = _constant.PROGRESS_CLASS + " ",
	                html = [];
	            if (self._mode != "horizontal") {
	                thumbClass += " " + _constant.THUMB_VERTICAL_CLASS;
	                orbitClass += _constant.ORBIT_VERTICAL_CLASS;
	                containerClass += _constant.ORBIT_CONTAINER_VERTRICAL_CLASS;
	                if (self._mode == _orientation.speakers) {
	                    progressClass += _constant.PROGRESS_SPEAKERS_CLASS;
	                } else {
	                    progressClass += _constant.PROGRESS_VERTICAL_CLASS;
	                }

	            } else {
	                thumbClass += " " + _constant.THUMB_HORIZONTAL_CLASS;
	                orbitClass += _constant.ORBIT_HORIZONTAL_CLASS;
	                containerClass += _constant.ORBIT_CONTAINER_HORIZONTAL_CLASS;
	                progressClass += _constant.PROGRESS_HORIZONTAL_CLASS;
	            }
	            html[++h] = '<div class="' + containerClass + '">';
	            html[++h] = '<div class="' + orbitClass + '"></div>';
	            html[++h] = '<div role="slider" tabindex="0" class="' + thumbClass + '" aria-valuemin="' + self._minimum + '" aria-valuemax="' + self._maximum + '">';
	            //tooltip 
	            html[++h] = '</div>';
	            //progress
	            html[++h] = '<div class="' + progressClass + '"></div>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        //部件文档结构加载成功后触发
	        _loaded: function () {
	            var self = this;

	            self.element.children('div[class~="' + _constant.OVERLAY_CLASS + '"]').on("click", self, self._onElementClick);

	            self.$scale = self.element
	                .find('[class~="' + _constant.SLIDER_SCALE_CLASS + '"]')
	                .find('[class~="' + _constant.SCALE_PART_CONTENT_CLASS + '"]');
	            self.$orbitContainer = self.element.children('div[class~="' + _constant.ORBIT_CONTAINER_CLASS + '"]')
	                .on("click", self, self._onElementClick);
	            self.$thumb = self.$orbitContainer
	                .children('[class~="' + _constant.THUMB_CLASS + '"]')
	                .draggable({
	                    slider: self,
	                    disabled: !self._draggable,
	                    containment: self.$orbitContainer,
	                    drag: self._onThumbDrag,
	                    zIndex: 2
	                })
	                .on("mousedown", self, self._onThumbMouseDown)
	                .on("keydown", self, self._onThumbKeyDown)
	                .on("click", self._onThumbClick);
	            self.$progress = self.$orbitContainer.children('div[class~="' + _constant.PROGRESS_CLASS + '"]');

	            if ($.isNumeric(self.options.selectedValue)) {
	                self._setOption("selectedValue", self.options.selectedValue, false);
	            } else {
	                $.error('"selectedValue" is not numeric.Please check your initialize settings for "selectedValue".');
	            }

	            self._setOption("disabled", self.options.disabled);
	            return self;
	        },
	        //thumb部件键盘按下时触发
	        _onThumbKeyDown: function (e) {
	            if (e.which == $.ui.keyCode.LEFT || e.which == $.ui.keyCode.UP || e.which == $.ui.keyCode.RIGHT || e.which == $.ui.keyCode.DOWN) {
	                var
	                    self = e.data,
	                    step = self._step,
	                    canChangeValue = false,
	                    value = self.$thumb.data("value-now");

	                if (!self.options.disabled) {
	                    if (e.which == $.ui.keyCode.LEFT || e.which == $.ui.keyCode.UP) {
	                        e.preventDefault();
	                        if (self._mode == _orientation.speakers) {
	                            value += step;
	                        } else {
	                            value -= step;
	                        }

	                        canChangeValue = true;
	                    } else if (e.which == $.ui.keyCode.RIGHT || e.which == $.ui.keyCode.DOWN) {
	                        e.preventDefault();
	                        if (self._mode == _orientation.speakers) {
	                            value -= step;
	                        } else {
	                            value += step;
	                        }
	                        canChangeValue = true;
	                    }
	                    if (canChangeValue) {
	                        self._selectedValue(value, false);
	                    }
	                }
	            }
	        },
	        //element点击时触发
	        _onElementClick: function (e) {
	            var
	                self = e.data,
	                step = self._step,
	                direction = self._direction,
	                offset = self._getOffset(e),
	                value = self.$thumb.data("value-now");

	            if (!self.options.disabled) {
	                if (self._draggable) {
	                    value = parseInt((offset + 2) * self._valuerange / (self._range - 2) + self._minimum);
	                    if (self._mode == _orientation.speakers) {
	                        value = self._maximum - value;
	                        $$.log(value)
	                    }
	                } else {
	                    if (self._stepAssert(offset)) {
	                        value += step;
	                    } else {
	                        value -= step;
	                    }
	                }
	                self._selectedValue(value);
	            }
	        },
	        _getOffset: function (e) {
	            var
	                self = this,
	                range = self.element[self._wh](),
	                offset;

	            offset = e[self._offset];
	            if ($(e.target).hasClass(_constant.PROGRESS_CLASS) && self._mode == _orientation.speakers) {
	                offset = self.element[self._wh]() - self.$progress[self._hw]() + offset;
	            }

	            return offset;
	        },
	        //鼠标点击时，判断滑块移动方向的断言
	        _stepAssert: function (offset) {
	            var
	                self = this,
	                direction = self._direction,
	                range = self.element[self._wh](),
	                offset;

	            if (self._mode != _orientation.speakers) {
	                return offset > parseInt(self.$thumb.css(direction));
	            } else {
	                return offset < range - parseInt(self.$thumb.css(direction));
	            }
	        },
	        _onThumbMouseDown: function (e) {
	            e.stopPropagation();
	            e.data.$thumb.focus();
	        },
	        _onThumbClick: function (e) {
	            e.stopPropagation();
	        },
	        _onThumbDrag: function (e, ui) {
	            var
	                self = ui.helper.draggable("option", "slider"),
	                direction = self._mode == _orientation.speakers ? "top" : self._direction,
	                wh = self._wh,
	                progress = parseFloat(self.$thumb.css(direction));
	            if (self._mode == _orientation.speakers) {
	                progress = self.element[wh]() - progress;
	            }
	            self.$progress[wh](progress);
	        },
	        _onThumbDragStop: function (e, ui) {
	            var
	                self = ui.helper.draggable("option", "slider"),
	                direction = self._mode == _orientation.speakers ? "top" : self._direction,
	                value;

	            value = (parseFloat(self.$thumb.css(direction)) + 2) * self._valuerange / (self._range - 2) + self._minimum;

	            value = parseInt(value);

	            if (self._mode == _orientation.speakers) {
	                value = self._maximum - value;
	            }

	            self._selectedValue(value);
	        },

	        _onValueChanged: function (old, value) {
	            var self = this;
	            self._oldValue = value;
	            self.options.selectedValue = value;
	            self.$thumb.attr("aria-valuenow", value);
	            if (old != value) {
	                self._trigger("valueChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: old,
	                    newValue: value
	                }));
	            }
	        },
	        //设置刻度部件的布局
	        _setScalePosition: function () {
	            var
	                self = this,
	                scale = self.$scale,
	                i = 0,
	                current = null,
	                maxHeight = 0,
	                maxWidth = 0,
	                c = self.$scale.length;

	            if (self._mode == "horizontal") {
	                if (c > 0) {
	                    maxHeight = $(scale[0]).height();
	                }

	                self.element.height(maxHeight + 11 + 4);
	                for (; i < c; i++) {
	                    current = $(scale[i]);
	                    current.css(self._reDirection, current[self._wh]() / 2 - 2);
	                }
	            } else {
	                if (c > 0) {
	                    maxWidth = $(scale[scale.length - 1]).width();
	                }
	                scale.width(maxWidth);
	                self.element.width(maxWidth + 11 + 4);
	                self.$orbitContainer.css("right", 0);
	                scale.css(self._reDirection, scale[self._wh]() / 2 - 2);
	            }

	        },
	        _setOption: function (key, value, args) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;
	            switch (key) {
	                case "selectedValue":
	                    if (self.options.selectedValue < self._minimum) {
	                        self.options.selectedValue = self._minimum / self._pow;
	                    } else if (self.options.selectedValue > self._maximum) {
	                        self.options.selectedValue = self._maximum / self._pow;
	                    }
	                    self._selectedValue(parseInt(value * self._pow), args);
	                    break;
	                case "disabled":
	                    self._setDisabled(value)
	            }
	        },
	        /**
	         * 设置控件的可用性
	         * @param {boolean} 需要设置    的值，true表示控件不可用。
	         */
	        _setDisabled: function (value) {
	            var self = this;
	            if (value) {
	                self.$thumb.draggable("disable");
	                self.$thumb.addClass(_constant.SLIDER_DISABLED_CLASS);
	                self.$progress.addClass(_constant.SLIDER_DISABLED_CLASS);
	            } else {
	                if (self._draggable) {
	                    self.$thumb.draggable("enable");
	                }
	                self.$thumb.removeClass(_constant.SLIDER_DISABLED_CLASS);
	                self.$progress.removeClass(_constant.SLIDER_DISABLED_CLASS);
	            }
	            $$.executeEventHandler(self, "isEnabledChanged", self.options.isEnabledChanged, null, $$.Event({
	                element: self.element,
	                oldValue: !value,
	                newValue: value
	            }));

	        },
	        //设置slider的值
	        _selectedValue: function (value, isFocus) {
	            var
	                self = this,
	                range = self._range,
	                distance,
	                valueRange = self._valuerange;

	            if (value < self._minimum) {
	                value = self._minimum;
	            } else if (value > self._maximum) {
	                value = self._maximum;
	            }
	            distance = (value - self._minimum) * range / valueRange;
	            self.$thumb.data("value-now", value);
	            value = value / self._pow;
	            self.$progress[self._wh](distance);
	            self.$thumb
	                .attr("aria-valuenow", value)
	                .css(self._reDirection, "auto")
	                .css(self._direction, distance);

	            if (isFocus !== false) {
	                self.$thumb.focus();
	            }

	            self._onValueChanged(self._oldValue, value);
	        },
	        //兼容旧版本控件
	        setValue: function (value) {
	            var self = this;
	            value = parseInt(value);
	            if ($.isNumeric(value)) {
	                self._setOption("selectedValue", value);
	            }

	        },
	        //兼容旧版本控件
	        getValue: function () {
	            return this.options.selectedValue;
	        },
	        _trigger: function (type, event, args) {
	            var self = this;
	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            if (args) {
	                args.type = "slider";
	            }
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        _destroy: function () {
	            var self = this;
	            self.element.empty();

	            self._trigger("destroy", null, $$.Event({
	                element: self.element
	            }));
	        }
	    });
	})(AUI, jQuery);

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * @author swang
	 * @fileoverview Splitter控件。
	 */
	"use strict";
	(function ($) {
	    /**
	     * <p>用于生成一个splitter控件。</p>
		 * 普通的splitter使用：

	     $("#splitterDiv").splitter({
			//0:horizonal,1:vertical
			orientation : 0,
			panels : [{
				defaultSize : "15%",
				minSize : "10%"
			}, {
				defaultSize : "80%",
				minSize : "200"
			}]
		});

	     * HTML内容：

	     <div style="height:300px;margin-left:20px;margin-top:20px;">
				<div id='splitterDiv' style="margin-left:30px;margin-top:30px;background:white;border:1px solid gray;">
			        <div id="splitterDiv1" style="overflow-y: hidden;">
						<div>c</div>
						<div>d
						a<br />
						a<br />
						a<br />
						a<br />
						a<br />
						a<br />
						a<br />
						</div>
					</div>
			        <div>
			        	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb
							a<br />
							a<br />
							a<br />
							a<br />
							a<br />
							a<br />
							a<br />
			        </div>
		    	</div>
			</div>

		 * @class splitter
		 * @constructor
		 * @author Shuang.Wang
		 * @param {Object} options - 控件配置信息。
		 * @param {Number} options.orientation - 获取或设置控件呈现模式，0:横向拉伸 1:纵向拉伸。该值只有在控件初始化时设置有效。
		 * @param {Object} options.panels - 获取或设置控件包含的panel的默认size和拖拽时的最小size。其内包含defaultSize和minSize属性，可用于设置被控件分隔开的两个元素的默认Size和拖拽所能达到的最小Size。该值只有在控件初始化时设置有效。
		 */

	    /**
	     * 所有代码中用到的css
	     */
	    var classString = {
	            classBarDisabled : "aui-splitter-split-bar-disabled",
	            classBarNormal : "aui-splitter-split-bar-normal",
	            classBarMouseover : "aui-splitter-split-bar-mouseover",
	            classBarMousedown : "aui-splitter-split-bar-mousedown"
	    }
		$.widget("aui.splitter", {
			// These options will be used as defaults
			options : {
				//0:horizonal,1:vertical
				orientation : 0,
				width : "100%",
				height : "100%",
				panels : [{
					defaultSize : "15%",
					minSize : "10%"
				}, {
					defaultSize : "80%",
					minSize : "200"
				}],
				//鼠标按下时距离左侧距离
				offsetX : 0,
				//鼠标按下时距离上侧距离
				offsetY : 0
			},
			//控件初始化
			_create: function () {
			    //是否处于拖拽当中
			    this.dragBar = this._createSplitBar();
			    this.isInDrag = false;
			    this._addHandler();
			    this._setChildrenClass();
			    this._initDefaultData();
			},
			// Use the destroy method to clean up any modifications your widget has made to the DOM
			_destroy : function() {
			    this.element.empty();
			},
			_setOption: function (key, value) {
			    this.options[key] = value;
			    if (key == "disabled") {
			        this.disable(value);
			    }
			},
			disable:function(status){
				this.element.prop( "disabled", true );
				var dragBar = this.element.find(".aui-splitter-split-bar");
				if(dragBar != null){
					dragBar.addClass(classString.classBarDisabled);
				}
			},
			enable : function(){
				this.element.prop( "disabled", false );
				var dragBar = this.element.find(".aui-splitter-split-bar");
				if(dragBar != null){
					dragBar.removeClass(classString.classBarDisabled);
				}
			},
			///////////////////////////////////自定义方法///////////////////////////////////
			_initDefaultData : function(){
				this.options.offsetX = this.element.offset().left;
				this.options.offsetY = this.element.offset().top;
			},
			_setChildrenClass : function() {
			    var children = this.element.children(), split = $('<div class="aui-splitter-split-bar-middle-div"><img class="aui-splitter-split-bar-middle-div-img" src="' + $$.path + '/image/splitter.png" alt=""/></div>');
				if (this.options.orientation == 0) {
				    this.element.addClass("aui-splitter-main-div-horizonal");
				    $(children[0]).width(this.options.panels[0].defaultSize)
					.addClass("aui-splitter-split-left-div");
					$(children[2]).addClass("aui-splitter-split-right-div");
				    //$(children[1]).append('<tr><td></td></tr><tr><td class="aui-splitter-split-bar-middle-div"></td></tr><tr><td></td></tr>');
					$(children[1]).append(split);
					split.css("marginTop", (this.element.height() - split.height()) / 2);
				}else{
				    this.element.addClass("aui-splitter-main-div-vertical");
				    $(children[0]).height(this.options.panels[0].defaultSize)
					.addClass("aui-splitter-split-top-div");
				    //$(children[1]).append('<tr><td></td><td class="aui-splitter-split-bar-middle-div"></td><td></td></tr>')
				    $(children[1]).append(split);
				    //split.css("marginLeft", (this.element.width() - split.width()) / 2);
				    $(children[2]).height(this.element.height() - $(this.element.children()[1]).height() - this._reverseSize(this.options.panels[0].defaultSize, this.element.height()))
					.addClass("aui-splitter-split-bottom-div");
				};
			},
			_resetSplitSpace : function() {
			    var split = $(this.dragBar.find(".aui-splitter-split-bar-middle-div"));
			    if (this.options.orientation == 0) {
			        split.css("marginTop", (this.element.height() - split.height()) / 2);
			    } else {
			        //split.css("marginLeft", (this.element.width() - split.width()) / 2);
			    }
			},
			_createSplitBar : function() {
			    //var bar = $('<table class="aui-splitter-split-bar" tabindex="0"></table>');
			    var bar = $('<div class="aui-splitter-split-bar" tabindex="0" role="separator" aria-grabbed="true"></div>');
				bar.insertAfter(this.element.children()[0]);

				return bar;
			},
			/**
			 * 转化Size
			 */
			_reverseSize : function(reverseSize, elementSize){
				if (reverseSize.indexOf("px") != -1) {
					return parseInt(reverseSize.substr(0, reverseSize.length - 2));
				}else if(reverseSize.indexOf("%") != -1){
					return parseInt(reverseSize.substr(0, reverseSize.length - 1)) * elementSize/100;
				}else{
					return parseInt(reverseSize);
				};
			},
			_setBarClass : function(dragBar, statusStr){
			    var dragBarChild = $(dragBar.find(".aui-splitter-split-bar-middle-div"));
				if(statusStr == "mouseover"){
					dragBar.removeClass(classString.classBarNormal)
					.addClass(classString.classBarMouseover)
					.removeClass(classString.classBarMousedown);
					
					//dragBarChild.removeClass(classString.classBarMiddleDivNormal)
					//.addClass(classString.classBarMiddleDivMouseover)
					//.removeClass(classString.classBarMiddleDivMousedown);
				}else if(statusStr == "mousedown"){
					dragBar.removeClass(classString.classBarNormal)
					.removeClass(classString.classBarMouseover)
					.addClass(classString.classBarMousedown);
					
					//dragBarChild.removeClass(classString.classBarMiddleDivNormal)
					//.removeClass(classString.classBarMiddleDivMouseover)
					//.addClass(classString.classBarMiddleDivMousedown);
					dragBarChild[0].focus();
				}else{
					dragBar.addClass(classString.classBarNormal)
					.removeClass(classString.classBarMouseover)
					.removeClass(classString.classBarMousedown);
					
					//dragBarChild.addClass(classString.classBarMiddleDivNormal)
					//.removeClass(classString.classBarMiddleDivMouseover)
					//.removeClass(classString.classBarMiddleDivMousedown);
				}
				
			},
			_addHandler: function () {
			    var dragBar = this.dragBar;
			    var globalObj = this;

			    if (dragBar != null) {

			        $(document).on("mouseup", function () {
			            globalObj._releaseBarCapture();
			        });
			        dragBar.bind("mouseover", function (e) {
			            if (globalObj.element.prop("disabled")) {
			                return;
			            }
			            globalObj._setBarClass(dragBar, "mouseover");
			            globalObj._resetSplitSpace();
			        }).bind("mouseout", function (e) {
			            if (globalObj.element.prop("disabled")) {
			                return;
			            }
			            globalObj._setBarClass(dragBar, "normal");
			        }).bind("mousedown", function (e) {

			            if (globalObj.element.prop("disabled")) {
			                return;
			            }

			            if (globalObj.isInDrag == true) {
			                globalObj.isInDrag = false;
			                globalObj._releaseBarCapture();
			            }
			            globalObj._setBarClass(dragBar, "mousedown");
			            globalObj._setBarCapture();
			            //当处于拖拽当中时，给element注册各种事件，在mouseup时再移除，这么做是为了兼容chrome
			            globalObj.element.bind("mousemove", function (e) {
			                if (globalObj.element.prop("disabled")) {
			                    return;
			                }

			                if (globalObj.isInDrag) {
			                    //左右结构，计算，左侧拉动不能超过设置的minSize，向右拉动也不能超过设置的minSize
			                    if (globalObj.options.orientation == 0) {
			                        globalObj._setLeftChildSize(globalObj, e, null);
			                    } else {
			                        globalObj._setTopChildSize(globalObj, e, null);
			                    };
			                }
			            }).bind("selectstart", function () {
			                return false;
			            }).addClass("aui-splitter-main-div-use-select-none");
			        }).bind("mouseup", function (e) {
			            if (globalObj.element.prop("disabled")) {
			                return;
			            }
			            globalObj._releaseBarCapture();
			            globalObj.element.unbind("mousemove").unbind("mouseup").unbind("selectstart").removeClass("aui-splitter-main-div-use-select-none");

			        }).bind("mousemove", function (e) {
			            //				if(globalObj.element.prop("disabled")){
			            //					return;
			            //				}
			            //				var src = e.target || e.srcElement;
			            //				if(globalObj.options.isInDrag) {
			            //					左右结构，计算，左侧拉动不能超过设置的minSize，向右拉动也不能超过设置的minSize
			            //					if (globalObj.options.orientation == 0) {
			            //						globalObj._setLeftChildSize(globalObj, e, null);
			            //					}else{
			            //						globalObj._setTopChildSize(globalObj, e, null);
			            //					};
			            //				}
			        }).bind("keydown", function (e) {
			            if (globalObj.element.prop("disabled")) {
			                return;
			            }
			            //globalObj._setBarCapture();
			            var evnt = e.which || event.keyCode || e.keyCode;
			            if (globalObj.options.orientation == 0) {
			                switch (evnt) {
			                    //右
			                    case 39:
			                        globalObj._setLeftChildSize(globalObj, null, 39);
			                        break;
			                        //左
			                    case 37:
			                        globalObj._setLeftChildSize(globalObj, null, 37);
			                        break;
			                    default: break;
			                }
			            } else {
			                switch (evnt) {
			                    //上
			                    case 38:
			                        globalObj._setTopChildSize(globalObj, null, 38);
			                        break;
			                        //下
			                    case 40:
			                        globalObj._setTopChildSize(globalObj, null, 40);
			                        break;
			                    default: break;
			                }
			            };
			        });

			    }
			},
			_setLeftChildSize : function(globalObj, e, keyCode){
				var children = globalObj.element.children();
				var leftChild = children[0];
				var barChild = children[1];
				var rightChild = children[2];
				
				var leftChildWidth = 0;
				var leftChildReversedMinSize = globalObj._reverseSize(globalObj.options.panels[0].minSize, globalObj.element.width());
				var leftChildReversedDefaultSize = globalObj._reverseSize(globalObj.options.panels[0].defaultSize, globalObj.element.width());
				
				var rightChildWidth = globalObj.element.width() - leftChildWidth - barChild.clientWidth;
				var rightChildReversedMinSize = globalObj._reverseSize(globalObj.options.panels[1].minSize, globalObj.element.width());
				
				//键盘操作
				if (e == null) {
					leftChildWidth = leftChild.clientWidth;
					if (keyCode == 39) {
						leftChildWidth += 10;
					}else if(keyCode == 37){
						leftChildWidth -= 10;
					};
				//鼠标操作
				}else{
					leftChildWidth = e.clientX - globalObj.options.offsetX;
				};
				//若左面宽度到达最大时，则不计算了，返回
				if (leftChildWidth >=  (globalObj.element.width()-barChild.clientWidth - rightChildReversedMinSize)) {
					return;
				};
				
				//这种情况说明左侧，defaultSize设的比minSize小了
				if (leftChildWidth >= leftChildReversedDefaultSize && leftChildWidth <=  leftChildReversedMinSize) {
					globalObj.options.panels[0].minSize = leftChildWidth;
				}else{
					//若宽度到达设置的最小宽度时，设置firstChildWidth为最小宽度
					if (leftChildWidth <=  leftChildReversedMinSize) {
						return;
					};
				};
				leftChild.style.width = leftChildWidth + "px"; 
			},
			_setTopChildSize : function(globalObj, e, keyCode){
				var children = globalObj.element.children();
				var topChild = children[0];
				var barChild = children[1];
				var bottomChild = children[2];
				
				var topChildHeight = 0;
				var topChildReversedMinSize = globalObj._reverseSize(globalObj.options.panels[0].minSize, globalObj.element.height());
				var topChildReversedDefaultSize = globalObj._reverseSize(globalObj.options.panels[0].defaultSize, globalObj.element.height());
				
				var bottomChildReversedMinSize = globalObj._reverseSize(globalObj.options.panels[1].minSize, globalObj.element.height());
				
				if (e == null) {
					topChildHeight = topChild.clientHeight;
					if (keyCode == 40) {
						topChildHeight += 10;
					}else if(keyCode == 38){
						topChildHeight -= 10;
					};
				// //鼠标操作
				}else{
					topChildHeight = e.clientY - globalObj.options.offsetY;
				};
				var bottomChildHeight = globalObj.element.height() - topChildHeight - $(globalObj.element.children()[1]).height();
				
				
				//若宽度到达设置的最小宽度时，则不动了，返回
				if (topChildHeight >=  (globalObj.element.height()-barChild.clientHeight - bottomChildReversedMinSize)) {
					return;
				};
				
				if (topChildHeight >= topChildReversedDefaultSize && topChildHeight <=  topChildReversedMinSize) {
					globalObj.options.panels[0].minSize = topChildHeight;
				}else{
					if (topChildHeight <=  topChildReversedMinSize) {
						return;
					};
				};
				
				topChild.style.height = topChildHeight + "px"; 
				bottomChild.style.height = bottomChildHeight + "px"; 
			},
			_setBarCapture : function(){
				if (this.dragBar.setCapture) {
				    this.dragBar.setCapture();
				} else if(window.captureEvents) {
					window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
				};

				this.isInDrag = true;
			},
			_releaseBarCapture : function(){
				if(this.dragBar.releaseCapture) {
				    this.dragBar.releaseCapture();
				} else if (window.releaseEvents) {
				    window.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP);
				};

				this.isInDrag = false;
			},
			_getOptions : function() {
				return this.options;
			}
		});
	})(jQuery);


/***/ },
/* 45 */
/***/ function(module, exports) {

	//@author fqwu
	(function ($$, $) {
	    "use strict";
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.stackpanel = {
	            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
	                var
	                    element = $(element),
	                    data = valueAccessor(),
	                    disabled = data.disabled,
	                    disabledObservable = ko.isObservable(disabled),
	                    sp = $('<div></div>'),
	                    vm = {},
	                    value = ko.toJS(ko.unwrap(data));

	                sp.append(element.children());
	                element.append(sp);
	                sp.stackpanel(value);

	                vm = {
	                    $data: bindingContext.$data,
	                    $parent: bindingContext.$parent,
	                    $parentContext: bindingContext.$parentContext,
	                    $parents: bindingContext.$parents,
	                    $root: bindingContext.$root,
	                    item: bindingContext.item,
	                };
	                vm = $.extend(true, vm, viewModel);

	                ko.applyBindings(vm, sp[0]);
	                if (disabledObservable) {
	                    sp.stackpanel("option", "isEnabledChanged", function (e, args) {
	                        disabled(args.newValue);
	                        executeEventHandler(null, "isEnabledChanged", isEnabledChanged, e, args);
	                    });

	                    disabled.subscribe(function () {
	                        sp.stackpanel("option", "disabled", disabled());
	                    });
	                }

	                return { 'controlsDescendantBindings': true };
	            }
	        };
	    }

	    var
	        //radiobutton的唯一标识
		    uuid = -1,
	        panelGroups = {},
	        _constant = {
	            STACKPANEL_CLASS: 'aui-stackpanel',
	            TOP_NONE_CLASS: 'aui-stackpanel-top-none',
	            TITLE_CLASS: 'aui-stackpanel-title',
	            LOGO_CLASS: 'aui-stackpanel-logo',
	            TITLE_TEMPLATE_CLASS: 'aui-stackpanel-title-template',
	            PANEL_CLASS: 'aui-stackpanel-panel',
	            FOLD_CLASS: 'fi-arrow-right-bs',
	            UNFOLD_CLASS: 'fi-arrow-down-bs',
	            TITLE_WIDGET: 'aui-stackpanel-title-widget',
	            STRIPT_CLASS: 'aui-stackpanel-stript'
	        };

	    $.widget("aui.stackpanel", {
	        //input部件的id
	        titleId: 'aui-stackpanel-title-',
	        panelId: 'aui-stackpanel-panel-',
	        logoId: 'aui-stackpanel-logo-',
	        templateId: 'aui-stackpanel-header-template-',
	        options: {
	            groupName: null,
	            isExpand: false,
	            selectedIndex: -1,
	            shown: $.noop,
	            hidden: $.noop
	        },
	        _create: function () {
	            this._initMembers()
	                ._createStackPanel()
	                ._loaded()
	                ._initEvent();

	            if (this._isGrouped) {
	                this._initGroup();
	            }
	            if (this.options.selectedIndex != -1) {
	                this._setSelectedIndex()
	            }

	        },
	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;

	            switch (key) {
	                case 'disabled':
	                    self._setDisabled(oldValue, value);
	                    break;
	            }
	        },
	        //初始化成员
	        _initMembers: function () {
	            this._uuid = ++uuid;
	            this._initId();

	            this._isGrouped = !!this.options.groupName;
	            this._groupName = this.options.groupName;
	            //初始化时panel处于关闭状态
	            this._expand = false;

	            return this;
	        },
	        _initId: function () {
	            this.titleId += uuid;
	            this.panelId += uuid;
	            this.logoId += uuid;
	            this.templateId += uuid;
	        },
	        //创建combobox
	        _createStackPanel: function () {
	            var
	                h = -1,
	                html = [];

	            if (this.element.children().length > 2) {
	                $.error('stackpanel\'s children is more than 2. ');
	            }
	            html[++h] = '<div class="' + _constant.TITLE_CLASS + '" id="' + this.titleId + '">';
	            html[++h] = '<div class="' + _constant.STRIPT_CLASS + '" ></div>';
	            html[++h] = '<div style="display:table-cell;width:6px;"></div>';
	            html[++h] = '<div class="' + _constant.LOGO_CLASS + ' ' + _constant.FOLD_CLASS + '" id="' + this.logoId + '"></div>';
	            html[++h] = '<div class="' + _constant.TITLE_TEMPLATE_CLASS + '" id="' + this.templateId + '"></div>';
	            html[++h] = '</div>';

	            html[++h] = '<div class="' + _constant.PANEL_CLASS + '" id="' + this.panelId + '"></div>';

	            this.element.append(html.join(''));

	            return this;
	        },
	        //部件创建成功后触发
	        _loaded: function () {
	            this.element.addClass(_constant.STACKPANEL_CLASS);

	            this.$titleTemplate = $(this.element.children()[0]);
	            this.$panelTemplate = $(this.element.children()[1]);
	            this.$title = this.element.children('#' + this.titleId);
	            this.$logo = this.$title.children('#' + this.logoId);
	            this.$titleTemplate = this.$title.children('#' + this.templateId).append(this.$titleTemplate);
	            this.$panel = this.element.children('#' + this.panelId).append(this.$panelTemplate);

	            this.$titleWidgets = this.$title.find('.aui-stackpanel-title-widget');

	            return this;
	        },
	        _initGroup: function () {
	            var group;

	            group = panelGroups[this._groupName] || {};

	            group.titles = group.titles || [];

	            //展开panel的序号
	            group.selectedIndex = group.selectedIndex >= 0 ? group.selectedIndex : -1;
	            this._index = group.titles.length;
	            group.titles[group.titles.length] = this.$title;

	            this.$title.data('index', this._index);

	            panelGroups[this._groupName] = group;

	        },
	        // 注册事件
	        _initEvent: function () {
	            var
	                ns = this.eventNamespace;

	            this.$title.on('click' + ns, this, this._onTitleClick);
	            this.$titleWidgets.on('click' + ns, this, this._onTitleWidgetClick);
	            return this;
	        },
	        _onTitleWidgetClick: function (e) {
	            e.stopPropagation();
	        },
	        _onTitleClick: function (e) {
	            var
	                self = e.data,
	                group;

	            if (self._isGrouped) {
	                //互斥模式
	                group = panelGroups[self._groupName];

	                if (self._expand) {
	                    group.selectedIndex = -1;
	                } else {
	                    if (group.selectedIndex > -1) {
	                        group.titles[group.selectedIndex].click();
	                    }
	                    group.selectedIndex = self._index;
	                }

	            }

	            if (self._expand) {
	                self._onHide();
	            } else {
	                self._onShow();
	            }
	        },
	        _onHide: function () {
	            this._expand = false;
	            this._updateLogo(this.$logo, false);
	            this.$panel.hide();

	            this._trigger("hidden", null, $$.Event({
	                element: this.element,
	                newValue: this._index
	            }));
	        },
	        _onShow: function () {
	            this._expand = true;
	            this._updateLogo(this.$logo, true);
	            this.$panel.show();

	            this._trigger("shown", null, $$.Event({
	                element: this.element,
	                newValue: this._index
	            }));
	        },
	        _updateLogo: function (logo, isExpand) {
	            var
	                removeClass,
	                addClass;

	            if (isExpand) {
	                removeClass = _constant.FOLD_CLASS;
	                addClass = _constant.UNFOLD_CLASS;
	            } else {
	                removeClass = _constant.UNFOLD_CLASS;
	                addClass = _constant.FOLD_CLASS;
	            }

	            logo.removeClass(removeClass).addClass(addClass);
	        },
	        expandByIndex: function (index) {
	            if (!this._expand) {
	                this.options.selectedIndex = index;
	                this._setSelectedIndex();
	            }
	        },
	        closeByIndex: function (index) {
	            if (this._expand) {
	                this.$title.click();
	            }
	        },
	        _setSelectedIndex: function () {
	            var index = this.options.selectedIndex;

	            if ($.isNumeric(index)) {
	                if (this._isGrouped) {
	                    var group = panelGroups[this._groupName];

	                    if (index > -1 && index < group.titles.length && index != group.selectedIndex) {
	                        group.titles[index].click();
	                    }
	                } else {
	                    if (index == 0) {
	                        this.$title.click();
	                    }
	                }
	            }

	            return this;
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            if (args) {
	                args.type = "stackpanel";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        _updateGroup: function () {
	            var
	                group = panelGroups[this._groupName],
	                titles,
	                i = 0,
	                c;

	            titles = group.titles;
	            c = titles.length;
	            for (; i < c; i++) {
	                if (titles[i].attr('id') == this.titleId) {
	                    if (titles[i].data('index') == group.selectedIndex) {
	                        group.selectedIndex = -1;
	                    }
	                    titles.splice(i, 1);
	                    break;
	                }
	            }

	        },
	        //销毁
	        _destroy: function () {
	            if (this._isGrouped) {
	                this._updateGroup();
	            }

	            this._trigger("destroy", null, $$.Event({
	                element: this.element
	            }));
	        }
	    });
	})(AUI, jQuery);

/***/ },
/* 46 */
/***/ function(module, exports) {

	(function ($) {
	    

	    window.af.Suspender = window.af.Suspender || {};
	    window.af.Suspender.CONSTENTS = {

	    };

	    $.widget('aui.suspender', {
	        options: {
	            scrollCount: 3
	        },

	        _create: function () {
	            $(document).on("scroll.aui.suspender", this, function (e) {
	                if (e.data._checkScrollHeight())
	                    e.data.element.addClass('show');
	                else
	                    e.data.element.removeClass('show');
	            });

	            this._body = $('body')[0];
	            this._html = $('html')[0];
	        },
	        _checkScrollHeight: function () {
	            if (this._body.scrollTop >= window.innerHeight * parseInt(this.options.scrollCount) ||
	                this._html.scrollTop >= window.innerHeight * parseInt(this.options.scrollCount))
	                return true;
	            else
	                return false;
	        }
	    });
	}(jQuery));

/***/ },
/* 47 */
/***/ function(module, exports) {

	(function ($) {
	    "use strict";

	    window.af.TabControl = {
	        CONSTENTS: {
	            TABCONTROL: 'aui-tabcontrol',
	            TABCONTROL_NAV: 'aui-tabcontrol-nav',
	            TABCONTROL_WIZARD: 'aui-tabcontrol-wizard'
	        }
	    };

	    $.widget("aui.tabcontrol", $.aui.tabbase, {
	        options: {
	            tabcontrolClass: 'aui-tabcontrol',
	            
	            selectedIndex: 0,

	            selectedIndexChanged: $.noop
	        },
	        checkIndex: function (a) {
	            if (window.console) {
	                console.warn('Function "checkIndex" is deprecated.');
	            }
	            return this._li.index($(a).closest('li'));
	        },
	        resetElement: function () {
	            this._dealWithLi();
	        },

	        _create: function () {
	            $(this.element.children('ul').find('li')[this.options.selectedIndex]).addClass('');

	            this._super();

	            this._initElement();
	            this._initUl();
	            this._initLi();

	            this._selectItem(this._li[this.options.selectedIndex]);
	        },
	        _initElement: function () {
	            this.element.addClass(this.options.tabcontrolClass);
	        },
	        _initUl: function () {
	            if (this._ul && this._ul.length > 0) {
	                this._ul.attr('role', 'tablist').on('click', 'a', function (e) {
	                    var $link = $(e.target);
	                    // Prevent link routing the url
	                    if ($link.closest('a') && $link.closest('a').attr('href')
	                        && $link.closest('a').attr('href').indexOf('#') === 0) {
	                        e.preventDefault();
	                    }
	                });
	            }
	        },
	        _initLi: function () {
	            var _self = this;
	            if (_self._li && _self._li.length > 0) {
	                _self._li.each(function (index, el) {
	                    var _selected = false,
	                        _$el = $(el);
	                    if (index === _self.options.selectedIndex) {
	                        _selected = true;
	                        _$el.addClass('select');
	                    }

	                    _$el.attr({
	                        'role': 'tab',
	                        'tabindex': _selected  ? 0 : -1,
	                        'aria-selected': _selected
	                    });
	                });
	            }
	        },
	        _getSelectedIndexByItem: function (li) {
	            return this._li.index(li);
	        },
	        _selectedItemChanged: function (oldItem, newItem) {
	            this.option('selectedIndex', this._getSelectedIndexByItem(newItem));
	        },
	        _setExtendOption: function (key, value) {
	            var _doIt = this._super(key, value);

	            var _self = this;
	            if (key === 'selectedIndex') {
	                if (_self.options[key] !== value) {
	                    return _doIt && true;
	                }
	                else return false;
	            }

	            return _doIt;
	        },
	        _optionChanged: function (key, param) {
	            this._super(key, param);

	            if (key === 'selectedIndex') {
	                this._changeSelectedItem(this._li[param.newValue], this._li[param.oldValue]);
	                this.element.trigger('selectedIndexChanged', param);
	                this.options.selectedIndexChanged.apply(this.element, [{}, param]);
	            }
	        }
	    });
	}(jQuery));

/***/ },
/* 48 */
/***/ function(module, exports) {

	(function ($) {
	    

	    window.af.Textbox = window.af.Textbox || {};
	    window.af.Textbox.CONSTENTS = {
	        TEXTBOX: 'aui-textbox',
	        TEXTBOX_SEARCH: 'aui-textbox-search'
	    };

	    $.widget("aui.textboxes", {
	        options: {
	            type: window.af.Textbox.CONSTENTS.TEXTBOX_SEARCH,

	            searched: $.noop,
	            stopped: $.noop
	        },
	        doSearch: function (e) {
	            this._doSearch(e);
	        },
	        stopSearch: function (e) {
	            this._doStop(e);
	        },
	        toggleSearch: function (e) {
	            var _self = this;
	            if (this.element.hasClass('ui-state-disabled') || this.options.disabled || this.element.hasClass('disabled')) {
	                return;
	            }
	            if (!_self.icon.hasClass('afui-icon-close fi-close-bs') && _self.input.val() !== '') {
	                _self._doSearch(e);
	            }
	            else {
	                _self._doStop(e);
	            }
	        },

	        _create: function () {
	            var _self = this,
	                _el = _self.element;

	            switch (_self.options.type) {
	                case window.af.Textbox.CONSTENTS.TEXTBOX_SEARCH:
	                    _self._initSearch();
	                    break;
	            }

	            _el.find('input').on('focus', _el, function (e) {
	                e.data.addClass('focus');
	            }).on('blur', _el, function (e) {
	                e.data.removeClass('focus');
	            });
	        },
	        _initSearch: function () {
	            var _self = this,
	                _el = _self.element;
	            _self.input = _el.children('input[type=text]');
	            _self.icon = _el.children('div');

	            _self.input.on('keydown', function (e) {
	                switch (e.keyCode) {
	                    case 13:    // enter
	                        //if (_self.input.val() !== '') {
	                        //    _self._doSearch(e);
	                        //}
	                        _self._doSearch(e);
	                        e.preventDefault();
	                        break;
	                    case 27:    // esc
	                        if (_self.input.val() !== '') {
	                            _self._doStop(e);
	                        }
	                        e.preventDefault();
	                        break;
	                }
	            })
	            .on('input propertychange', function (e) {
	                _self.icon.removeClass('afui-icon-close fi-close-bs')
	            });
	            _self.icon.on('click', _self, function (e) {
	                e.data.toggleSearch(e);
	            });
	        },
	        _doSearch: function (e) {
	            var _self = this,
	                _el = _self.element;

	            _self.icon.addClass('afui-icon-close fi-close-bs');
	            _el.trigger('searched', [e, { element: _el, newValue: _self.input.val() }]);
	            _self.options.searched.apply(_el, [e, { element: _el, newValue: _self.input.val() }]);
	        },
	        _doStop: function (e) {
	            var _self = this,
	                _el = _self.element;

	            _self.input.val('');
	            _self.icon.removeClass('afui-icon-close fi-close-bs');
	            _el.trigger('stopped', [e, { element: _el, oldValue: _self.input.val() }]);
	            _self.options.stopped.apply(_el, [e, { element: _el, oldValue: _self.input.val() }]);
	        }
	    });
	}(jQuery));

/***/ },
/* 49 */
/***/ function(module, exports) {

	(function ($) {
	    

	    var checkSelectedIndex = function (itemsSource) {
	            for (var i = itemsSource.length - 1; i >= 0; i--) {
	                if (!itemsSource[i].isDone()) {
	                    return i;
	                }
	            }
	            return 0;
	        },
	        getNextYearPosition = function (itemsSource) {
	            var currentYear = itemsSource[itemsSource.length - 1].year();
	            for (var i = 0, length = itemsSource.length; i < length; i++) {
	                var tempYear = itemsSource[i].year();
	                if (tempYear == currentYear && i == 0) {
	                    return -1;
	                }
	                else if (tempYear == currentYear && i != 0) {
	                    return i;
	                }
	            }
	            return -1;
	        },
	        setNextYearPosition = function (index, element) {
	            
	        };

	    window.af.Timeline = {
	        CONSTENTS: {
	            TIMELINE: 'aui-timeline'
	        },
	        ViewModel: function (itemsSource, selectedIndex, template) {
	            var self = this,
	                _template = $('<li role="option"></li>')
	                    .append($('<a tabindex="0" href="##" data-bind="{ css: { done: isDone, selected: $index() == $parent.selectedIndex() }, attr: { \'aria-span\': span } }"></a>')
	                    .append($('<span></span>').addClass('icon').append('<span class="afui-icon-dot fi-dot-bs" data-bind="css: { \'afui-icon-circle-finished fi-round-finish-a\': isDone, \'afui-icon-circle-concentric fi-circle-dot-a\': $index() == $parent.selectedIndex() }"></span>'))
	                    .append($('<div></div>').addClass('date').append($('<div></div>').attr('data-bind', '{ text: dateAndMonth }'))));

	            self.itemsSource = ko.observableArray(itemsSource ? itemsSource : []);
	            self.selectedIndex = ko.observable(selectedIndex ? selectedIndex : checkSelectedIndex(self.itemsSource()));
	            self.selectedItem = ko.computed(function () {
	                return self.itemsSource()[self.selectedIndex()];
	            });
	            self.hasPast = ko.observable(true);
	            self.hasFuture = ko.observable(true);
	            self.template = template ? template : _template;

	            self.itemClick = function (vm, e, data) {
	                self.selectedIndex($.inArray(ko.dataFor(data.target), self.itemsSource()));
	            };
	        },
	        DateViewModel: function (date, isDone) {
	            var self = this;

	            self.dateValue = ko.observable(date);
	            self.isDone = ko.observable(isDone);

	            self.year = ko.computed(function () {
	                return self.dateValue().getFullYear();
	            });
	            self.month = ko.computed(function () {
	                return self.dateValue().getMonth();
	            });
	            self.date = ko.computed(function () {
	                return self.dateValue().getDate();
	            });
	            self.dateAndMonth = ko.computed(function () {
	                return self.date() + ' ' + window.af.Date.I18N.Months[self.month()];
	            });
	            self.span = ko.computed(function () {
	                return self.date() + ' ' + window.af.Date.I18N.FullMonths[self.month()];
	            });
	        },
	        Utils: {
	            checkCurrentYear: function (dates) {
	                return dates[dates.length - 1].year();
	            }
	        }
	    };

	    ko.bindingHandlers.AUITimelineBinding = {
	        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
	            var _el = $(element),
	                _itemsSource = valueAccessor().itemsSource(),
	                _ul = $('<ul></ul>');

	            viewModel._lastItemsSource = _itemsSource;

	            _ul.append('<!-- ko foreach: itemsSource -->').append(viewModel.template).append('<!-- /ko -->');

	            _el.attr('data-toggle', 'aui-timeline')
	                .addClass('aui-timeline')
	                .append('<div><button tabindex="0" class="afui-icon-circle-arrow-up fi-circle-arrow-up-bs"></button><div></div></div>')
	                .append(_ul)
	                .append('<div><button tabindex="0" class="afui-icon-circle-arrow-down fi-circle-arrow-down-bs"></button><div></div></div>');

	            var index = getNextYearPosition(_itemsSource);
	            //setNextYearPosition(index, _el);

	            _el.data('aui.timeline', _el.timeline({
	                itemsSource: _itemsSource,
	                selectedIndex: $.inArray(valueAccessor().selectedIndex),
	                preButtonLabel: valueAccessor().topButtonLabel,
	                nextButtonLabel: valueAccessor().bottomButtonLabel
	            }));

	            var _timeout = function (id) {
	                return function () {
	                    $('#' + id).timeline('setYears', valueAccessor().itemsSource());
	                };
	            };

	            window.setTimeout(_timeout(_el.attr('id')), 1);
	        },
	        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
	            var _el = $(element),
	                value = ko.unwrap(valueAccessor());
	            if (viewModel._lastItemsSource != value.itemsSource()) {

	                //setNextYearPosition(getNextYearPosition(value.itemsSource()), _el);
	                viewModel._lastItemsSource = value.itemsSource();

	                window.setTimeout(function () {
	                    _el.timeline('setYears', valueAccessor().itemsSource());
	                }, 1);
	            }
	        }
	    };

	    $.widget("aui.timeline", {
	        options: {
	            itemsSource: [],
	            selectedIndex: 0,
	            preButtonLabel: 'Previous',
	            nextButtonLabel: 'Next'
	        },
	        setYears: function (itemsSource) {
	            var _self = this,
	                _tempYear = 0,
	                _lists = _self.element.find('li');

	            $(_self.element.find('li.year')).remove();

	            for (var i = itemsSource.length - 1; i > -1; i--) {
	                if (_tempYear != itemsSource[i].year()) {
	                    _tempYear = itemsSource[i].year();

	                    $(_lists[i]).after('<li class="year">' + _tempYear + '</li>');
	                }
	            }
	        },
	        previousButton: function () {
	            return this._topButton;
	        },
	        nextButton: function () {
	            return this._bottomButton;
	        },

	        _create: function () {
	            var _self = this;

	            _self._initElement();
	            _self._initEvent();
	        },
	        _initElement: function () {
	            var _self = this,
	                _el = _self.element,
	                _buttons = $('button', _el);

	            _self._topButton = $(_buttons[0]).attr('aria-span', _self.options.preButtonLabel);
	            _self._bottomButton = $(_buttons[1]).attr('aria-span', _self.options.nextButtonLabel);

	            _self._ul = $('ul', _el);
	            _self._lists = _self._ul.children('li');
	        },
	        _initEvent: function () {
	            var _self = this,
	                _el = _self.element;
	            _self._topButton.on('click' + _self.eventNamespace, function (e) {
	                _el.trigger('topButtonClick', [{ element: _el }]);
	            });
	            _self._bottomButton.on('click' + _self.eventNamespace, function (e) {
	                _el.trigger('bottomButtonClick', [{ element: _el }]);
	            });
	            _self._ul.on('click', 'a', function (e) {
	                e.preventDefault();
	                _el.trigger('itemClick', [{ element: _el, target: this }]);
	            });
	        }
	    });
	}(jQuery));

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * <p>创建一个tree 基类控制器。</p>
	 * 原生tree使用， 只提供span, 以及展开关闭的图标：
	 
	 * JavaScript内容：
	 
		 $("#tree").tree();
	 	 	
	 * HTML内容：

		<div id="tree" >
			
		</div>
		

	  * 自定义tree使用, 继承基类treeview, 生成子类checkboxTreeView， 重写getNodeTemplate, updateCustomizedLayout 这两个方法，如下：
	 
	 * JavaScript内容：


		(function ($) {
		    "use strict"
		    $.widget("aui.checkboxTreeView", $.aui.treeView, {
		        options: {
		            checkclick: $.noop,
		            dynamicLoad: $.noop
		        },
		
		        getNodeTemplate: function (item) {
		            return "<div class='aui-treeview-item-checkbox'></div><div class='aui-treeview-item'>" + item.span + "</div>";
		        },
		
		        updateCustomizedLayout: function (oNode) {
		            if (!oNode) {
		                return true;
		            }
		            var self = this, sl = self.root;
		            $(oNode.find(".aui-treeview-item-checkbox")).checkbox({ hasTabindex: false, click: self._checkboxClick });
		            self.getLabel(oNode).on("dblclick", function (e) {
		                alert('db click');
		                e.stopPropagation();
		                return true;
		            }).on("click", function (e) {
		                self._selectItem($(e.target));
		                if (self.selectedItem.data("hasItems")) {
		                    var child = $(this).closest("li").children(".aui-treeview-dropdown");
		                    if (child.is(":visible")) {
		                        self._collapse($(this).closest("li"));
		                    } else {
		                        self._expand($(this).closest("li"));
		                    }
		                } else {
		                    self.options.dynamicLoad(self.selectedItem);
		                }
		                e.stopPropagation();
		            });
		        },
		
		        _init: function () {
		            this._bindCustomizeHandlers();
		        },
		
		        _bindCustomizeHandlers: function () {
		            var self = this;
		            self.element.on("keydown", function (e) {
		                var l = e.keyCode;
		                switch (l) {
		                    case 32: //space
		                        $(e.target).find(".aui-treeview-item-checkbox").click();
		                        e.stopPropagation();
		                        return true;
		                }
		            });
		        },
		
		        _checkboxClick: function (e, obj) {
		            e.stopPropagation();
		            return true;
		        }
		    });
		})(jQuery);

		
	    	
	        	
	 	 	
		$(document).ready(function () {
		    var source = {
		        children: [{
		            span: "farm1-node",
		            children: [
		                { span: "webapp-1" },
		                { span: "webapp-2" }
		            ]
		        },
		        { span: "farm-node" },
		        {
		            span: "farm-node-11",
		            children: [
		                    {
		                        span: "webapp-6",
		                        children: [
		                            { span: "sitecollection-1" },
		                            { span: "sitecollection-2" }
		                        ]
		                    },
		                    { span: "webapp-9" }
		            ]
		        },
		        { span: "farm-node" }]
		    };
		    var tree = $("#treeview").checkboxTreeView();
		
		
		    $("#Button0").on("click", function () {
		        tree.checkboxTreeView(
		            "appendChildrenTo",
		            { span: "sitecollection-1" },
		            tree.checkboxTreeView("getSelectedItem")
		        );
		
		        tree.checkboxTreeView("render");
		    });
		    $("#Button1").on("click", function () {
		        tree.checkboxTreeView("removeChildren", tree.checkboxTreeView("getSelectedItem"));
		
		        tree.checkboxTreeView("render");
		    });
		    $("#Button2").on("click", function () {
		        tree.checkboxTreeView("expandAll");
		    });
		    $("#Button3").on("click", function () {
		        tree.checkboxTreeView("collapseAll");
		    });
		
		    function addItem(node, oparent) {
		        if (!node.children) {
		            return false;
		        }
		        for (var i = 0; i < node.children.length; i++) {
		            tree.checkboxTreeView("appendChildrenTo", node.children[i], oparent);
		        }
		        for (var i = 0; i < node.children.length; i++) {
		            addItem(node.children[i], $(oparent.children("ul").children("li")[i]));
		        }
		    }
		
		    addItem(source, tree.checkboxTreeView("getRootNode"));
		
		    tree.checkboxTreeView("render");
		});
	                	 	
	 * HTML内容：

		<div id="tree" >
			
		</div>
		

	 * @name tree
	 * @class tree
	 * @author Bing.Han
	 * @desc 创建一个tree控制器。
	 * @constructor
	 * @param {Object} options 控件配置信息。该配置信息中的属性建议都在控件生成之前进行设置，否则可能会发生设置的属性值没有产生效果的问题。
	 */

	(function ($) {
	    "use strict"
	    $.widget("aui.treeView", {
	        options: {
	            pageIndexChanged: $.noop,
	            //左侧箭头点击时触发
	            arrowClick: $.noop,
	            iconTemplate: "",
	        },

	        _create: function () {
	            var self = this, el = self.element.addClass("aui-treeview");
	            this.firstDraw = true;
	            this.selectedItem = null;
	            this.root = self._createRootTree();
	            self._bindHandlers();
	        },

	        _createRootTree: function () {
	            var self = this, el = self.element, e = el.children("ul");
	            if (e.length == 0) {
	                return el.append($("<ul></ul>").attr("role", "tree")
	                    .addClass("aui-treeview-dropdown-root")
	                    .data("depth", -1));
	            } else {
	                return el;
	            }
	        },

	        _destroy: function () {
	            var self = this, el = self.element;
	            el.empty().removeAttr("role").removeAttr("data-role");
	        },

	        _createNode: function (item) {
	            return "<span class='aui-treeview-item-content'>" + this.getNodeTemplate(item) + "</span>";
	        },

	        _createItem: function (oItem, oParent, expand) {

	            var self = this, oParent = oParent || self.root,
	                e = oParent.children("ul"), depth = e.data("depth") || oParent.data("depth"), depth = ++depth,
	                $node = $("<li></li>").append(self._createNode(oItem)).data("datasource", oItem);

	            if (e.length == 0) {
	                var ulelement = $("<ul></ul>").attr("role", "group").addClass("aui-treeview-dropdown").data("depth", depth), e = ulelement;
	                ulelement.append($node).appendTo(oParent);
	            } else {
	                e.append($node);
	            }

	            if (!e.hasClass("aui-treeview-dropdown-root")) {
	                e.css("display", expand ? "block" : "none");
	            }

	            oParent.children(".aui-treeview-item-content").attr("aria-expanded", true);
	            oParent.attr("expanded", expand);
	            oParent.data("hasItems", true);
	            var lis = e.find("li"),
	            labels = lis.find(".aui-treeview-item-content");
	            var pid = oParent.attr("id"),
	                id = /aui-treeview-item-id-/.test(pid) ? pid : "aui-treeview-item-id-" + depth;
	            //var oParentNextItem = oParent.is("li") && oParent.data("nextItem");
	            $.each(lis, function (i, o) {
	                var $o = $(o);
	                if (!$o.find(".aui-treeview-item-li-div").length) {
	                    var arrowobj = self._createArrow(id + i);
	                    $o.attr("id", id + i)
	                        .data("depth", depth)
	                        .data("treeItem", self)
	                        .data("parentItem", oParent.is("li") ? oParent : null)
	                        .data("selfItem", $(o))
	                        .data("hasItems", false)
	                        //.attr("tabindex", 0)
	                        .addClass("aui-treeview-item-li")
	                        .prepend(arrowobj).children(":not(ul)");
	                    $o.children(".aui-treeview-item-content").children().removeAttr("tabindex");

	                    arrowobj.on("click", function () {
	                        var $li = $(this).closest("li"), child = $li.children(".aui-treeview-dropdown");
	                        if (child.is(":visible")) {
	                            self._collapse($li);
	                        } else {
	                            self._expand($li);
	                        }
	                        $$.executeEventHandler(self, "arrowClick", self.options.arrowClick, null, $$.Event({
	                            element: self.element,
	                            newValue: self.getArrowIcon($li)
	                        }));
	                    });
	                }
	            });

	            $.each(labels, function (i, p) {
	                $(p).attr("role", "treeitem")
	                    .attr("id", id + i + "-content")
	                    .off("selectstart")
	                    .on("selectstart", function () { return false; })
	                .off("mouseenter mouseleave")
	                .on("mouseenter", function (e) {
	                    $(e.target)
	                        .closest(".aui-treeview-item-content")
	                        .addClass("aui-treeview-item-hover")
	                        .addClass("aui-treeview-state-hover");
	                })
	                .on("mouseleave", function (e) {
	                    $(e.target)
	                        .closest(".aui-treeview-item-content")
	                        .removeClass("aui-treeview-item-hover")
	                        .removeClass("aui-treeview-state-hover");
	                }).on("focus", function (e) {
	                    $(e.target)
	                        .closest(".aui-treeview-item-content")
	                        .addClass("aui-treeview-item-pressed")
	                        .children().removeAttr("tabindex");
	                });
	            });

	            if (self.selectedItem == null && self.firstDraw) {
	                $(lis[0]).children(".aui-treeview-item-content").attr("tabindex", 0);
	                self.selectedItem = $(lis[0]);
	                self.firstDraw = false;
	            }

	            return $(lis[lis.length - 1]);
	        },
	        /*
	        
	        */
	        _selectItem: function (el, isFocus) {
	            var self = this;
	            if (el && !el.length) {
	                return;
	            }
	            if (self.selectedItem != null) {
	                self.selectedItem
	                    .children(".aui-treeview-item-content")
	                    .removeClass("aui-treeview-item-pressed")
	                    .removeAttr("tabindex").children().removeAttr("tabindex");
	                self.selectedItem = null;
	            }

	            var con = el.closest("li").children(".aui-treeview-item-content");
	            con.attr("tabindex", 0);

	            if (isFocus) {
	                con.focus(1);
	            }

	            self.selectedItem = el.closest("li");
	        },

	        _bindHandlers: function () {
	            var self = this;
	            self.element.on("keydown", function (e) {
	                var l = e.keyCode, $tag = $(e.target), $li = $tag.closest("li");
	                switch (l) {
	                    case 9:
	                        if (self.getSelectedItem() != null) {
	                            self.getSelectedItem().focus(1);
	                        }
	                        return true;
	                    case 13: //enter
	                        if ($(e.target).closest("li").data("hasItems")) {
	                            self._selectItem($tag);

	                            if ($(e.target).closest("li").children("ul").is(":hidden")) {
	                                self._expand($tag.closest("li"));
	                            } else {
	                                self._collapse($tag.closest("li"));
	                            }
	                        } else {
	                            $tag.closest(".aui-treeview-item-content").click();
	                        }
	                        e.stopPropagation();
	                        return true;
	                    case 32: //space
	                        e.stopPropagation();
	                        return true;
	                    case 35:
	                        $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                        self._lastItem();
	                        e.stopPropagation();
	                        return false;
	                    case 36:
	                        $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                        self._firstItem();
	                        e.stopPropagation();
	                        return false;
	                    case 37: //left
	                        var parentItem = $li.data("parentItem"), hasItems = $li.data("hasItems");
	                        if (hasItems && $li.children("ul").is(":visible")) {
	                            self._selectItem($tag);
	                            self._collapse($li);
	                        } else if (!!parentItem) {
	                            $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                            parentItem.children(".aui-treeview-item-content").attr("tabindex", 0).focus(1);
	                            self._selectItem(parentItem);
	                        }
	                        e.stopPropagation();
	                        return false;
	                    case 38: //up
	                        var prevItem = $li.data("prevItem");
	                        if (prevItem != null) {
	                            if (prevItem.is(":visible")) {
	                                if (prevItem.children(".aui-treeview-item-content").length == 0) {
	                                    $tag.removeAttr("tabindex");
	                                    prevItem.attr("tabindex", 0).focus(1);
	                                    self.selectedItem
	                                     .children(".aui-treeview-item-content")
	                                     .removeClass("aui-treeview-item-pressed")
	                                     .removeAttr("tabindex").children().removeAttr("tabindex");
	                                } else {
	                                    $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                                    prevItem.children(".aui-treeview-item-content").attr("tabindex", 0).focus(1)
	                                    self._selectItem(prevItem);
	                                }
	                            } else {
	                                $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                                $li.prev().children(".aui-treeview-item-content").attr("tabindex", 0).focus(1)
	                                self._selectItem($li.prev());
	                            }
	                        }
	                        e.stopPropagation();
	                        return false;
	                    case 39: //right
	                        if ($li.data("hasItems")) {
	                            var oldNextItem = $li.data("nextItem");
	                            if ($li.children(".aui-treeview-dropdown").is(":visible")) {
	                                $li.data("nextItem").children(".aui-treeview-item-content").attr("tabindex", 0).focus(1);
	                                $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                                self._selectItem($li.data("nextItem"));
	                            } else {
	                                self._selectItem($tag);
	                                self._expand($li);
	                            }
	                        }
	                        e.stopPropagation();
	                        return false;
	                    case 40: //down
	                        var nextItem = $li.data("nextItem");
	                        if (nextItem != null) {
	                            if (nextItem.is(":visible")) {
	                                if (nextItem.children(".aui-treeview-item-content").length == 0) {
	                                    $tag.removeAttr("tabindex");
	                                    self.selectedItem
	                                     .children(".aui-treeview-item-content")
	                                     .removeClass("aui-treeview-item-pressed")
	                                     .removeAttr("tabindex").children().removeAttr("tabindex");
	                                    nextItem.attr("tabindex", 0).focus(1);
	                                } else {
	                                    $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                                    nextItem.children(".aui-treeview-item-content").attr("tabindex", 0).focus(1)
	                                    self._selectItem(nextItem);
	                                }
	                            } else {
	                                if (nextItem.parent().closest("li").is(":visible")) {
	                                    $tag.closest(".aui-treeview-item-content").removeAttr("tabindex");
	                                    $li.next().children(".aui-treeview-item-content").attr("tabindex", 0).focus(1)
	                                    self._selectItem($li.next());
	                                }
	                            }
	                        }
	                        e.stopPropagation();
	                        return false;
	                }
	            });
	        },

	        _firstItem: function () {
	            var f = this.element.find("ul:first").find("li:first");
	            f.children(".aui-treeview-item-content").attr("tabindex", 0).focus(1);
	            self._selectItem(f);
	        },

	        _lastItem: function () {
	            var f = this.element.find("ul:first").find("li:last");
	            f.children(".aui-treeview-item-content").attr("tabindex", 0).focus(1);
	            self._selectItem(f);
	        },

	        _createArrow: function (id) {
	            return $("<div></div>").addClass("aui-treeview-item-li-div").append(
	                $("<a></a>").append(
	                    $("<div></div>")
	                        //.attr("src", $$.path + "/image/tree.png")
	                        .addClass("fi-triangle-right-bs")
	                    )

	                .addClass("aui-treeview-item-li-a")
	                .addClass("aui-treeview-item-li-a-collapse")
	                .attr("id", id + "-arrow")
	                .attr("role", "presentation")
	                )
	                .append('<div class="aui-treeview-item-custom-icon">' + this.options.iconTemplate + '</div>');
	        },

	        getNodeTemplate: function (item) {
	            return "<span>" + item.span + "</span>";
	        },

	        hasChildren: function (o) {
	            var ul = $(o).children("ul:not(.aui-treeview-dropdown-root)");
	            return ul.length != 0 && ul.children("li").length != 0;
	        },

	        /**
			 * 添加新节点
			 * @method appendChildrenTo
			 * @param {Object} oItem
			 * @param {Object} oParent
			 * @param {Boolean} newItem  
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("appendChildrenTo", {span:"span-1"}, oNode);
			 */

	        appendChildrenTo: function (oItem, oParent, expand) {
	            //添加children，
	            var self = this, oNode = self._createItem(oItem, oParent, expand);

	            //if (newItem == undefined || newItem) {
	            //    oNode = self._createItem(oItem, oParent);
	            //}

	            //if (newItem) {
	            //    if (oParent.children("ul").is(":visible")) {
	            //        self._collapse(oParent);
	            //    } else {
	            //        self._expand(oParent);
	            //    }
	            //    return false;
	            //}

	            self._updateItemLayout($(oParent));
	            self.updateCustomizedLayout(oNode, oItem);
	            return oNode;
	        },

	        _updateItemLayout: function (o) {
	            if (this.hasChildren(o) && o.children("ul").is(":visible")) {
	                o.find(".aui-treeview-item-li-a:first")
	                    .addClass("aui-treeview-item-li-a-expand")
	                    .removeClass("aui-treeview-item-li-a-collapse");
	                o.find(".fi-triangle-right-bs:first")
	                    .addClass("fi-triangle-right-down-bs")
	                    .removeClass("fi-triangle-right-bs");
	                o.children(".aui-treeview-item-li-div").addClass("aui-treeview-item-li-div-cursorp")
	            } else {
	                if (this.hasChildren(o) && o.children("ul").is(":hidden")) {
	                    o.find(".aui-treeview-item-li-a:first")
	                    .removeClass("aui-treeview-item-li-a-collapse");
	                    o.find(".fi-triangle-right-down-bs:first")
	                        .removeClass("fi-triangle-right-down-bs");
	                    o.children(".aui-treeview-item-li-div").addClass("aui-treeview-item-li-div-cursord");
	                } else {
	                    o.find(".aui-treeview-item-li-a:first")
	                    .addClass("aui-treeview-item-li-a-collapse")
	                    .removeClass("aui-treeview-item-li-a-expand");
	                    o.find(".fi-triangle-right-down-bs:first")
	                        .addClass("fi-triangle-right-bs")
	                        .removeClass("fi-triangle-right-down-bs");
	                    o.children(".aui-treeview-item-li-div").addClass("aui-treeview-item-li-div-cursord")
	                }
	            }
	        },

	        /**
			 * 重写此方法，更新自定义的layout
			 * @method updateCustomizedLayout
			 * @param {Object} oNode
	  		 * @param {Object} oItem
			 * @example 相关Javascript代码：
	         */
	        updateCustomizedLayout: function (oNode, oItem) {

	        },

	        /**
			 * 获取当前选中的节点
			 * @method getSelectedItem
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("getSelectedItem");
			 */
	        getSelectedItem: function () {
	            return this.selectedItem;
	        },

	        /**
			 * 设置当前选中的节点
			 * @method setSelectItem
			 * @param {Object} $e
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("setSelectItem");
			 */
	        setSelectItem: function ($e) {
	            this._selectItem($e);
	        },

	        /**
			 * 获取根节点
			 * @method getRootNode
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("getRootNode");
			 */
	        getRootNode: function () {
	            return this.root;
	        },

	        /**
			 * 获取当前选中的节点span区域
			 * @method getLabel
			 * @param {Object} oNode
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("getLabel");
			 */
	        getLabel: function (oNode) {
	            return oNode.children(".aui-treeview-item-content");
	        },
	        //获取最左边箭头区域对应的jQuery对象
	        getArrowArea: function (oNode) {
	            return oNode.children(".aui-treeview-item-li-div");
	        },
	        //获取自定义图标区域对应的jQuery对象
	        getArrowIcon: function (oNode) {
	            return oNode.children(".aui-treeview-item-li-div").children(".aui-treeview-item-custom-icon");
	        },
	        removeNode: function (node) {
	            if (node) {
	                var p = node.parent().closest("li");
	                node.remove();
	                this._updateNodeInformation(p, this.hasChildren(p));
	                this._updateNodeInformation(p.parent().closest("li"), this.hasChildren(p.parent().closest("li")));
	                if (p.length != 0) {
	                    this.selectedItem = p;
	                    setTimeout(function () {
	                        p.children(".aui-treeview-item-content").attr("tabindex", 0).focus(1);
	                    }, 200);

	                } else {
	                    if (p.parent().closest("li").length != 0) {
	                        this.selectedItem = p.parent().closest("li");
	                        setTimeout(function () {
	                            this.selectedItem.children(".aui-treeview-item-content").attr("tabindex", 0).focus(1);
	                        }, 200);
	                    } else {
	                        this.selectedItem = null;
	                    }
	                }
	            }
	        },

	        /**
			 * 删除选中节点的子节点
			 * @method removeChildren
			 * @param {Object} node
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("removeChildren", oNode);
			 */

	        removeChildren: function (node) {
	            if (node) {
	                node.children("ul.aui-treeview-dropdown").remove();
	                node.find(".fi-triangle-right-down-bs:first")
	                    .addClass("fi-triangle-right-bs")
	                    .removeClass("fi-triangle-right-down-bs")
	                    .parent().addClass("aui-treeview-item-li-a-collapse");

	                node.children(".aui-treeview-item-li-div").addClass("aui-treeview-item-li-div-cursord")
	                node.data("hasItems", false).children(".aui-treeview-item-content").removeAttr("aria-expanded");
	                this._updateNodeInformation(node, false);
	            }
	        },

	        /**
			 * 展开所有节点
			 * @method expandAll
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("expandAll");
			 */

	        expandAll: function () {
	            var self = this, r = self.root;
	            if (r) {
	                var lis = r.find(".aui-treeview-item-li");
	                $.each(lis, function (i, o) {
	                    var obj = $(o);
	                    self.hasChildren(obj) && self._expand(obj);
	                });
	            }
	        },

	        /**
			 * 关闭所有节点
			 * @method collapseAll
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("collapseAll");
			 */

	        collapseAll: function () {
	            var self = this, r = self.root;
	            if (r) {
	                var lis = r.find(".aui-treeview-item-li");
	                $.each(lis, function (i, o) {
	                    var obj = $(o);
	                    self.hasChildren(obj) && self._collapse(obj);
	                });
	            }
	        },
	        /**
			 * 展开选中节点的子节点
			 * @method expand
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("expand");
			 */
	        expand: function (node) {
	            this._expand(node);
	        },

	        /**
			 * 关闭当前选中的节点
			 * @method collapse
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("collapse");
			 */
	        collapse: function (node) {
	            this._collapse(node);
	        },

	        _expand: function (oNode) {
	            var node = oNode.children(".aui-treeview-dropdown");
	            node.show().addClass("aui-treeview-item-li-a-expand")
	                .removeClass("aui-treeview-item-li-a-collapse");
	            oNode.find(".fi-triangle-right-bs:first")
	                .addClass("fi-triangle-right-down-bs")
	                .removeClass("fi-triangle-right-bs");
	            oNode.children(".aui-treeview-item-content").attr("aria-expanded", true);
	            oNode.attr("expanded", true);
	            this._updateNodeInformation(node, true);
	        },

	        _collapse: function (oNode) {
	            var node = oNode.children(".aui-treeview-dropdown");
	            node.hide().addClass("aui-treeview-item-li-a-collapse")
	                .removeClass("aui-treeview-item-li-a-expand");
	            oNode.find(".fi-triangle-right-down-bs:first")
	                .addClass("fi-triangle-right-bs")
	                .removeClass("fi-triangle-right-down-bs");
	            oNode.children("ul").hide();
	            oNode.children(".aui-treeview-item-content").attr("aria-expanded", false);
	            oNode.attr("expanded", false);
	            this._updateNodeInformation(node, false);
	        },

	        _updateNodeInformation: function (node, t) {
	            //展开
	            if (t) {
	                var oldNextItem = node.closest("li").data("nextItem"),
	                    _firstItem = node.closest("li").children("ul").children("li:first"),
	                    _lastItem = node.closest("li").children("li:last");

	                node.closest("li").data("nextItem", _firstItem);
	                _lastItem.data("nextItem", oldNextItem);

	            } else {
	                //关闭
	                var parentItem = node.closest("li").data("parentItem");

	                var nextItem = node.closest("li").data("nextItem");
	                var br = node.closest("li").next("li");
	                while (br.length == 0 && parentItem != null) {
	                    br = parentItem.next("li");
	                    parentItem = parentItem.data("parentItem");
	                }
	                node.closest("li").data("nextItem", br.length != 0 ? br : null);
	            }
	        },

	        /**
			 * 对所有节点进行逻辑调整，样式变更
			 * @method render
			 * @example 相关Javascript代码：
			 * @example
		    $("#tree").tree("render");
			 */
	        render: function () {
	            this._updateItemsNavigation();
	        },

	        _updateItemsNavigation: function () {
	            var el = this.element, lis = el.find("li");
	            $.each(lis, function (i, o) {
	                if (i == 0) {
	                    $(o).data("prevItem", null);
	                    $(o).data("nextItem", $(lis[i + 1]));
	                } else if (i == lis.length - 1) {
	                    $(o).data("prevItem", $(lis[i - 1]));
	                    $(o).data("nextItem", null);
	                } else {
	                    $(o).data("prevItem", $(lis[i - 1]));
	                    $(o).data("nextItem", $(lis[i + 1]));
	                }
	            });
	        }
	    });

	})(jQuery);

/***/ },
/* 51 */
/***/ function(module, exports) {

	(function ($) {
	    

	    window.af.Validations = {
	        CONSTENTS: {
	            VALIDATION_TYPES: {
	                PASS: -1,
	                CUSTOM: 1,
	                REQUIRED: 2,
	                DATE: 3,
	                NUMBER: 4,
	                FINANCIAL: 5,
	                EMAIL: 6
	                //OUT_OF_RANGE: 7
	            },
	            VALIDATION_EMAIL: 'email',
	            VALIDATION_DATE: 'date',
	            VALIDATION_NUMBER: 'number',
	            VALIDATION_FINANCIAL: 'financial',
	            VALIDATION_TEXT: 'text',
	            VALIDATION_CUSTOM: 'custom'
	        },
	        Utils: {
	            checkEmail: function (value) {
	                if (value == '') return true;

	                // 64 characters limited in Local Part
	                // 320 characters limited in Domain Part
	                var index = value.indexOf('@');
	                if (index < 0) return false;
	                if (index > 64) return false;
	                if (value.length - index > 320) return false;

	                //var regExp = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
	                var regExp = /^\w{1,64}((-\w{1,64})|(\.\w{1,64}))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/;
	                if (regExp.test(value)) {
	                    //var parts = value.split('@');
	                    //if (parts[0].length > 66) return false;
	                    //if (parts[1].length > 255) return false;
	                    return true;
	                }
	                else return false;
	            },
	            checkNumber: function (value, min, max) {
	                if (typeof (value) === 'Array') {
	                    for (var i = 0, length = value.length; i < length; i++) {
	                        if (!window.af.Validations.Utils.checkNumber(value[i]))
	                            return false;
	                    }

	                    return true;
	                }

	                if (value == '') return true;

	                var regExp = /^[0-9]*$/;
	                if (regExp.test(value)) {
	                    value = parseInt(value);
	                    min = parseInt(min);
	                    max = parseInt(max);
	                    if (min != undefined && value < min) return false;
	                    else if (max != undefined && value > max) return false;
	                    else return true;
	                }
	                else return false;
	            },
	            checkFinancial: function (value, min, max) {
	                if (typeof (value) === 'Array') {
	                    for (var i = 0, length = value.length; i < length; i++) {
	                        if (!window.af.Validations.Utils.checkFinancial(value[i]), min, max)
	                            return false;
	                    }

	                    return true;
	                }

	                if (value == '') return true;

	                var regExp = /^-?([1-9]\d*|[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$/;
	                if (regExp.test(value)) {
	                    value = parseFloat(value);
	                    min = parseFloat(min);
	                    max = parseFloat(max);
	                    if (min != undefined && value < min) return false;
	                    else if (max != undefined && value > max) return false;
	                    else return true;
	                }
	                else return false;
	            },
	            toFinancial: function (value) {
	                value = parseFloat(value);
	                return (Math.round(value * Math.pow(10, 2)) / Math.pow(10, 2)).toFixed(2);
	            },
	            validateElement: function (element, e, ignoreElement, iconClass) {
	                if (!(element instanceof jQuery)) element = $(element);

	                if (!element.data('aui.validation')) {
	                    var _target = element.attr('data-validation-target');
	                    
	                    element.data("aui.validation", element.validation(element.data('option') ? element.data('option') : {
	                        alert: element.attr('data-validation-alert') ? $(element.attr('data-validation-alert')) : null,
	                        isRequired: element.attr('aria-required') ? true : false,
	                        validationType: element.attr('data-validation') ? element.attr('data-validation') :
	                            (element.attr('data-delayedvalidation') ? element.attr('data-delayedvalidation') : undefined),
	                        target: _target ? $(_target) : null,
	                        customVarification: window[element.attr('data-verification')] ?
	                            window[element.attr('data-verification')] : function () { return true; },
	                        failedAlertText: element.attr('data-valFailedStr'),
	                        requiredAlertText: element.attr('data-valRequiredStr'),
	                        minValue: element.attr('data-min'),
	                        maxValue: element.attr('data-max'),
	                        maxLength: element.attr('maxlength'),
	                        iconClass: iconClass ? iconClass : af.config.validations.iconClass,
	                        alertWidth: element.attr('data-validation-alert-width') ? element.attr('data-validation-alert-width') : 'auto'
	                    }));
	                }

	                return element.validation('validation', e, ignoreElement);
	            },
	            validateGroup: function (groupName, iconClass) {
	                var elements = $('[data-validation-group="' + groupName + '"]').map(function (index, el) {
	                        return $(el);
	                    }),
	                    requiredElements = [],
	                    hasPassed = false,
	                    result = { subValidationTypes: [] };

	                for (var i = 0, length = elements.length; i < length; i++) {
	                    if (!elements[i].data('aui.validation')) {
	                        var _target = elements[i].attr('data-validation-target');
	                        elements[i].data("aui.validation", elements[i].validation({
	                            alert: elements[i].attr('data-validation-alert') ? $(elements[i].attr('data-validation-alert')) : null,
	                            isRequired: elements[i].attr('aria-required') ? true : false,
	                            validationType: elements[i].attr('data-validation') ? elements[i].attr('data-validation') :
	                                (elements[i].attr('data-delayedvalidation') ? elements[i].attr('data-delayedvalidation') : undefined),
	                            target: _target ? $(_target) : null,
	                            customVarification: window[elements[i].attr('data-verification')] ?
	                                window[elements[i].attr('data-verification')] : function () { return true; },
	                            failedAlertText: elements[i].attr('data-valFailedStr'),
	                            requiredAlertText: elements[i].attr('data-valRequiredStr'),
	                            minValue: elements[i].attr('data-min'),
	                            maxValue: elements[i].attr('data-max'),
	                            maxLength: element.attr('maxlength'),
	                            iconClass: iconClass ? iconClass : af.config.validations.iconClass,
	                            alertWidth: element.attr('data-validation-alert-width') ? element.attr('data-validation-alert-width') : 'auto'
	                        }));
	                    }

	                    var validationType = elements[i].validation('validation');
	                    result.subValidationTypes.push(validationType);
	                    if (validationType === window.af.Validations.CONSTENTS.VALIDATION_TYPES.REQUIRED && !hasPassed) {
	                        requiredElements.push(elements[i]);
	                    }
	                    else if (validationType === window.af.Validations.CONSTENTS.VALIDATION_TYPES.REQUIRED && hasPassed) {
	                        elements[i].validation('pass');
	                    }
	                    if (validationType === window.af.Validations.CONSTENTS.VALIDATION_TYPES.PASS) {
	                        hasPassed = true;
	                        for (var j = 0, length1 = requiredElements.length; j < length1; i++) {
	                            requiredElements[i].validation('pass');
	                        }
	                    }
	                }

	                result.hasPassed = hasPassed;
	                return result;
	            }
	        }
	    };

	    $.widget("aui.validation", {
	        options: {
	            validationFailClass: 'afui-validation-fail',
	            validationAlertClass: 'afui-validation-alert',
	            alert: null,            // Element that holds the error message and others, will show when validaiton fails.
	            target: null,           // Element that will be depended by the alert element
	            content: null,          // Element that contains the error message. 

	            alertWidth: 'auto',

	            autoValidate: false,
	            isRequired: false,
	            validationType: window.af.Validations.CONSTENTS.VALIDATION_TEXT,
	            maxValue: null,
	            minValue: null,
	            maxLength: null,

	            alertText: '',

	            iconClass: af.config.validations.iconClass,

	            customVarification: function () { return true; },
	            validated: $.noop,

	            failedAlertText: '',    // No use any more
	            requiredAlertText: ''   // No use any more
	        },
	        validation: function (e, ignoreElement) {
	            var _self = this,
	                _el = _self.element;

	            if (ignoreElement && (ignoreElement[0] === _el[0] || ignoreElement.find(_el[0]).length > 0)) {
	                return -1;
	            }

	            var _vType = window.af.Validations.CONSTENTS.VALIDATION_TYPES,
	                _type = _self._validate(e),
	                _data = { element: _el, validationResult: _type };

	            if (_type < 0)
	                _self.pass();
	            else {
	                _self.fail();
	                _self._getAlertTextFromOldEdition(_type);
	            }

	            _el.trigger('validated', _data);
	            _self.options.validated.apply(_el[0], [e, _data]);

	            return _type;
	        },
	        fail: function (showAlert) {
	            var _self = this,
	                _target = _self.options.target;

	            if (_self.options.alert.parent().length === 0) {
	                _target.after(_self.options.alert);
	            }

	            _target.addClass('afui-validation-fail');

	            if (showAlert === true || showAlert === undefined)
	                _self.options.alert.show().width(_self.options.alertWidth);
	            else
	                _self.options.alert.hide();
	        },
	        pass: function () {
	            var _self = this;

	            _self.options.alert.hide();
	            _self.options.target.removeClass('afui-validation-fail');
	            _self._inputish.removeAttr('title');
	        },
	        hideAlert: function () {
	            var _self = this;

	            _self.options.alert.hide();
	            _self.element.removeAttr('title');
	        },

	        _create: function () {
	            var _self = this;

	            _self._initElement();
	            _self._toggleEvent();
	        },
	        _setOption: function (key, value) {
	            switch (key) {
	                case 'alertText':
	                    $.Widget.prototype._setOption.apply(this, arguments);

	                    this._updateAlertText(value);
	                    break;
	            }
	            
	            $.Widget.prototype._setOption.apply(this, arguments);
	        },
	        _initElement: function () {
	            var _self = this;

	            _self._initAlert();
	            _self._initInputish();

	            _self.options.target = (_self.options.target && _self.options.target.length > 0) ? _self.options.target : _self.element;
	        },
	        _initAlert: function () {
	            var _self = this;

	            _self.options.content = $('<div></div>');

	            _self.options.alert = (_self.options.alert && _self.options.alert.length > 0) ?
	                _self.options.alert : $('<div></div>');
	            _self.options.alert.addClass(_self.options.validationAlertClass).attr('role', 'alert')
	                .html('<div class="arrow-outer"></div><div class="arrow-inner"></div><span class="' +
	                    _self.options.iconClass + '"></span>').append(_self.options.content);

	            if (af.config.validations.alertStyle === 'right')
	                _self.options.alert.addClass('arrow-right');
	        },
	        _initInputish: function () {
	            var _self = this;
	            _self._inputish = (_self.element[0].nodeName.toLowerCase() == 'input' || _self.element[0].nodeName.toLowerCase() == 'textarea') ?
	                _self.element : _self.element.find('input, textarea');
	            _self._inputish = (_self._inputish && _self._inputish.length > 0) ? _self._inputish : _self.element;
	        },
	        _toggleEvent: function () {
	            var _self = this;

	            if (_self.options.autoValidate) {
	                // TODO: Do validation when blur triggered.
	            }

	            // Hide the alert element when the value changed
	            switch (_self._inputish[0].nodeName.toLowerCase()) {
	                case 'input':
	                    if (_self._inputish[0].type === 'radio' || _self._inputish[0].type === 'checkbox') {
	                        _self._inputish.off('propertychange' + _self.eventNamespace + ' change' + _self.eventNamespace)
	                            .on('propertychange' + _self.eventNamespace + ' change' + _self.eventNamespace, _self, function (e) {
	                                if (!e.data.element.hasClass(e.data.options.validationFailClass))
	                                    return;

	                                if (window.event && window.event.propertyName) {
	                                    if (window.event.propertyName === 'value')
	                                        e.data.pass();
	                                }
	                                else
	                                    e.data.pass();
	                            });
	                        break;
	                    }
	                    //else {
	                    //    // Forbid inputing for ie9-
	                    //    if (af.Utils.Browser.msie < 10 && _self.options.maxLength) {
	                    //        _self._inputish.off('keydown' + _self.eventNamespace)
	                    //            .on('keydown' + _self.eventNamespace, _self, function (e) {
	                    //                if (e.target.value.length >= e.data.options.maxLength &&
	                    //                    ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 65 && e.keyCode <= 90) ||
	                    //                    (e.keyCode >= 96 && e.keyCode <= 107) || (e.keyCode >= 109 && e.keyCode <= 111) ||
	                    //                    (e.keyCode >= 186 && e.keyCode <= 192) || (e.keyCode >= 219 && e.keyCode <= 222) ||
	                    //                    e.keyCode === af.Utils.KeyCode.SPACE)) {
	                    //                    e.preventDefault();
	                    //                }
	                    //            })
	                    //            .off('paste' + _self.eventNamespace)
	                    //            .on('paste' + _self.eventNamespace, _self, function (e) {
	                    //                console.log('pasted');
	                    //            });
	                    //    }
	                    //}
	                    if (_self.element.attr('data-toggle') && _self.element.attr('data-toggle').indexOf('aui-select') == 0) {
	                        _self.element.off('change' + _self.eventNamespace)
	                            .on('change' + _self.eventNamespace, _self, function (e) {
	                                if (!e.data.options.target.hasClass(_self.options.validationFailClass))
	                                    return;

	                                if (window.event && window.event.propertyName) {
	                                    if (window.event.propertyName === 'value')
	                                        e.data.pass();
	                                }
	                                else
	                                    e.data.pass();
	                            });
	                    }
	                case 'textarea':
	                    _self._inputish.off('propertychange' + _self.eventNamespace + ' input' + _self.eventNamespace)
	                        .on('propertychange' + _self.eventNamespace + ' input' + _self.eventNamespace, _self, function (e) {
	                            if (!e.data.options.target.hasClass(_self.options.validationFailClass))
	                                return;

	                            if (window.event && window.event.propertyName) {
	                                if (window.event.propertyName === 'value')
	                                    e.data.pass();
	                            }
	                            else
	                                e.data.pass();
	                        })

	                    // Forbid inputing for ie9-
	                    if (af.Utils.Browser.msie < 10 && _self.options.maxLength) {
	                        _self._inputish.off('keydown' + _self.eventNamespace)
	                            .on('keydown' + _self.eventNamespace, _self, function (e) {
	                                if (e.target.value.length >= e.data.options.maxLength && !e.ctrlKey && !e.altKey &&
	                                    ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 65 && e.keyCode <= 90) ||
	                                    (e.keyCode >= 96 && e.keyCode <= 107) || (e.keyCode >= 109 && e.keyCode <= 111) ||
	                                    (e.keyCode >= 186 && e.keyCode <= 192) || (e.keyCode >= 219 && e.keyCode <= 222) ||
	                                    e.keyCode === af.Utils.KeyCode.SPACE)) {
	                                    e.preventDefault();
	                                }
	                            })
	                            .off('beforepaste' + _self.eventNamespace)
	                            .on('beforepaste' + _self.eventNamespace, _self, function (e) {
	                                var pastedText = window.clipboardData.getData('text');
	                                if (e.target.value.length + pastedText.length >= e.data.options.maxLength) {
	                                    window.clipboardData.setData('text', pastedText.substr(0, e.data.options.maxLength - e.target.value.length));
	                                    //window.setTimeout(function () {
	                                    //    e.target.value = e.target.value.substr(0, e.data.options.maxLength);
	                                    //}, 1);
	                                }
	                            });
	                    }
	                    break;
	            }
	        },
	        _validate: function (e) {
	            var _self = this,
	                _options = _self.options,
	                _el = _self.element,
	                _value = [],
	                _constants = window.af.Validations.CONSTENTS,
	                _vType = _constants.VALIDATION_TYPES,
	                _utils = window.af.Validations.Utils;

	            if (_self._inputish.length == 1) {
	                _value = $.trim((_self._inputish[0].nodeName == 'INPUT' || _self._inputish[0].nodeName == 'TEXTAREA') ?
	                    _self._inputish.val() : _self._inputish.text());
	            }
	            else if (_self._inputish.length > 1) {
	                for (var i = 0, length = _self._inputish; i < length; i++) {
	                    _value.push($.trim(_self._inputish[i].value));
	                }
	            }

	            if (_options.validationType === _constants.VALIDATION_CUSTOM) {
	                var _result = _options.customVarification(_value, _self._inputish, _self.element, e);

	                if (!!_result === false)
	                    return _vType.CUSTOM;
	                else if (_result === true)
	                    return _vType.PASS;
	                else
	                    return _result;
	            }
	            else {
	                if ((!e || e.type !== 'blur') && _options.isRequired && _value.length == 0) {
	                    return _vType.REQUIRED;
	                }
	                //if (_value.length > _self.options.maxLength) {
	                //    return _vType.OUT_OF_RANGE;
	                //}
	                switch (_options.validationType) {
	                    case _constants.VALIDATION_DATE:
	                        break;
	                    case _constants.VALIDATION_NUMBER:
	                        if (!_utils.checkNumber(_value, _options.minValue, _options.maxValue)) {
	                            return _vType.NUMBER;
	                        }
	                        break;
	                    case _constants.VALIDATION_FINANCIAL:
	                        if (_utils.checkFinancial(_value, _options.minValue, _options.maxValue)) {
	                            if (_value != '') {
	                                var fValue = _utils.toFinancial(_value);
	                                _el.val(fValue);
	                                // 兼容Knockout，通知Knockout修改对应属性值
	                                _el.trigger('change');
	                            }
	                        }
	                        else {
	                            return _vType.FINANCIAL;
	                        }
	                        break;
	                    case _constants.VALIDATION_EMAIL:
	                        if (!_utils.checkEmail(_value)) {
	                            return _vType.EMAIL;
	                        }
	                        break;
	                }
	            }
	            return _vType.PASS;
	        },
	        _getAlertTextFromOldEdition: function (type) {
	            var _validatedType = window.af.Validations.CONSTENTS.VALIDATION_TYPES,
	                _self = this;

	            if (type == _validatedType.REQUIRED) {
	                _self.option('alertText', _self.options.requiredAlertText);
	            }
	            else
	                _self.option('alertText', _self.options.failedAlertText);
	        },
	        _updateAlertText: function (text) {
	            this.options.content.html(text);
	            this._inputish.attr('title', text);
	        }
	    });
	}(jQuery));

/***/ },
/* 52 */
/***/ function(module, exports) {

	$.widget('aui.tabcontrolwizard', $.aui.tabcontrol, {
	    options: {
	        wizardClass: 'aui-wizard',

	        stepCount: 0,

	        stepCountChanged: $.noop
	    },

	    gotoStep: function (index) {
	        var _self = this;
	        _self.option('selectedIndex', parseInt(index));
	    },
	    gotoNext: function () {
	        this.selectNext();
	    },
	    gotoPrevious: function () {
	        this.selectPrev();
	    },

	    _create: function () {
	        var _self = this;

	        _self._super();

	        _self._changeStepCount(_self.options.stepCount);
	    },
	    _initElement: function () {
	        this.element.addClass(this.options.wizardClass);
	    },
	    _changeStepCount: function (count) {
	        var _self = this;
	        for (var i = 0, length = _self._li.length; i < length; i++) {
	            if (i <= count) {
	                $(_self._li[i]).addClass('stepped')/*.attr('aria-disabled', false).removeAttr('disabled')*/;
	            }
	            else {
	                $(_self._li[i]).removeClass('stepped')/*.attr('aria-disabled', true).attr('disabled', 'disabled')*/;
	            }
	        }
	    },
	    _selectedItemChanging: function (oldItem, newItem) {
	        return newItem.className.indexOf('stepped') >= 0;
	    },
	    _setExtendOption: function (key, value) {
	        var _doIt = this._super(key, value);

	        var _self = this;
	        if (key === 'stepCount') {
	            if (_self.options[key] !== value) {
	                if (!this._li[value].getAttribute('aria-controls')) {
	                    this.option('stepCount', value + 1);
	                    return false;
	                }
	                return _doIt && true;
	            }
	            else return false;
	        }

	        return _doIt;
	    },
	    _optionChanged: function (key, param) {
	        this._super(key, param);

	        if (key === 'stepCount') {
	            this._changeStepCount(param.newValue);
	            this.element.trigger('stepCountChanged', param);
	            this.options.stepCountChanged.apply(this.element, [{}, param]);
	        }
	    }
	});

/***/ },
/* 53 */
/***/ function(module, exports) {

	(function ($) {

	    $(document.documentElement).on('click.aui.dropdown', '[data-target]', function (e) {
	        e.preventDefault();
	        var $el = $(e.target),
	            $dropdown, _my, _at, _within;
	        if (!$el.attr('data-target')) {
	            $el = $(this).closest('[data-target]');
	        }

	        if ($el.hasClass('disable') || $el.attr('disabled')) return;

	        $dropdown = $($el.attr('data-target'));
	        _my = $dropdown.attr('data-my');
	        _at = $dropdown.attr('data-at');
	        _within = $dropdown.closest('.aui-dropdown-container');
	        if ($dropdown.data('aui.dropdown') && $dropdown.attr('data-autoexpand') != 'false' && ($el.attr('disabled') || !$el.hasClass('disabled'))) {
	            $dropdown.dropdown('toggle');
	        }
	        else {
	            $dropdown.data("aui.dropdown", $dropdown.dropdown({
	                of: $el,
	                my: _my ? _my : $dropdown.attr('data-my') ? $dropdown.attr('data-my') : 'left top',
	                at: _at ? _at : $dropdown.attr('data-at') ? $dropdown.attr('data-at') : 'left bottom',
	                within: _within.length ? _within[0] : window,
	                autoOpening: $dropdown.attr('data-autoexpand'),
	                isLazy: true
	            }));
	        }
	    });
	} (jQuery));

/***/ },
/* 54 */
/***/ function(module, exports) {

	(function ($) {
	    

	    $(document).on("scroll.aui.floater", function (e) {
	        var $floater = $('[data-floater=aui-floater]');
	        // 判断该元素当前是否已经进行过初始化，避免重复初始化造成资源浪费
	        if (!$floater.data('aui.floater')) {
	            $floater.data("aui.floater", $floater.floater({
	                type: $floater.attr('data-toggle'),
	                isLazy: true
	            }));
	        }
	    });
	}(jQuery));

/***/ },
/* 55 */
/***/ function(module, exports) {

	(function ($) {
	    

	    $(document).on("scroll.aui.suspender", function (e) {
	        var $suspender = $('[data-suspender=aui-suspender]');
	        // 判断该元素当前是否已经进行过初始化，避免重复初始化造成资源浪费
	        if (!$suspender.data('aui.suspender')) {
	            $suspender.data("aui.suspender", $suspender.suspender({
	                scrollCount: $suspender.attr('data-scrollCount') ? $suspender.attr('data-scrollCount') : 3
	            }));
	        }
	    });
	}(jQuery));

/***/ },
/* 56 */
/***/ function(module, exports) {

	(function ($) {
	    

	    $(document.documentElement).on('focus.aui.textbox', '[data-toggle^=aui-textbox]', function (e) {
	        var $textbox = $(e.target);
	        // 根据class判断，当前的元素是否为控件元素
	        // 如果是，则进行下面的处理；否则，向上寻找最近的元素，如果其data-toggle属性为select，则将其作为控件元素进行处理
	        if (!$textbox.hasClass("aui-textbox")) {
	            $textbox = $(this).closest('[data-toggle^=aui-textbox]');
	        }
	        // 判断该元素当前是否已经进行过初始化，避免重复初始化造成资源浪费
	        if (!$textbox.data('aui.textbox')) {
	            $textbox.data("aui.textbox", $textbox.textboxes({
	                type: $textbox.attr('data-toggle'),
	                isLazy: true
	            }));
	        }
	        e.preventDefault();
	    }).on('click.aui.textbox', '[data-toggle^=aui-textbox]', function (e) {
	        var $textbox = $(e.target);
	        // 根据class判断，当前的元素是否为控件元素
	        // 如果是，则进行下面的处理；否则，向上寻找最近的元素，如果其data-toggle属性为select，则将其作为控件元素进行处理
	        if (!$textbox.hasClass("aui-textbox")) {
	            $textbox = $(this).closest('[data-toggle^=aui-textbox]');
	        }
	        // 判断该元素当前是否已经进行过初始化，避免重复初始化造成资源浪费
	        if (!$textbox.data('aui.textbox')) {
	            $textbox.data("aui.textbox", $textbox.textboxes({
	                type: $textbox.attr('data-toggle'),
	                isLazy: true
	            }));

	            //if ($(e.target).hasClass('afui-icon-search')) {
	                $textbox.textboxes('toggleSearch', e);
	            //}
	        }

	        e.preventDefault();
	    });
	}(jQuery));

/***/ },
/* 57 */
/***/ function(module, exports) {

	(function ($) {
	    

	    $(document.documentElement)
	        .on('focus.aui.timeline', '[data-toggle=aui-timeline]', function (e) {
	            var $timeline = $(e.target);

	            // 根据class判断，当前的元素是否为控件元素
	            // 如果是，则进行下面的处理；否则，向上寻找最近的元素，如果其data-toggle属性为select，则将其作为控件元素进行处理
	            if (!$timeline.hasClass("aui-timeline")) {
	                $timeline = $(this).closest('[data-toggle=aui-timeline]');
	            }
	            // 判断该元素当前是否已经进行过初始化，避免重复初始化造成资源浪费
	            if (!$timeline.data('aui.timeline')) {
	                $timeline.data("aui.timeline", $timeline.timeline({
	                    selectedIndex: $.inArray($('> ul > li.selected', $timeline), $('> ul > li', $timeline)),
	                }));
	            }

	            e.preventDefault();
	        });
	}(jQuery));

/***/ },
/* 58 */
/***/ function(module, exports) {

	(function ($) {
	    

	    var toValidation = function (e, isDelayed) {
	        var $validationElement = $(e.target);
	        // 根据class判断，当前的元素是否为控件元素
	        // 如果是，则进行下面的处理；否则，向上寻找最近的元素，如果其data-toggle属性为select，则将其作为控件元素进行处理
	        if (!$validationElement.attr("data-validation") && !$validationElement.attr("data-delayedvalidation")) {
	            var temp = $(e.target).closest('[data-validation]');
	            $validationElement = temp.length > 0 ? temp : $(e.target).closest('[data-delayedvalidation]');
	        }
	        // 判断该元素当前是否已经进行过初始化，避免重复初始化造成资源浪费
	        if (!$validationElement.data('aui.validation')) {
	            var target = $validationElement.attr('data-validation-target')
	            $validationElement.data("aui.validation", $validationElement.validation($validationElement.data('option') ? $validationElement.data('option') : {
	                isRequired: $validationElement.attr('aria-required') === 'true' ? true : false,
	                validationType: $validationElement.attr('data-validation') ? $validationElement.attr('data-validation') :
	                    ($validationElement.attr('data-delayedvalidation') ? $validationElement.attr('data-delayedvalidation') : undefined),
	                target: target ? $(target) : null,
	                customVarification: window[$validationElement.attr('data-verification')] ?
	                    window[$validationElement.attr('data-verification')] : function () { return true; },
	                failedAlertText: $validationElement.attr('data-valFailedStr'),
	                requiredAlertText: $validationElement.attr('data-valRequiredStr'),
	                minValue: $validationElement.attr('data-min'),
	                maxValue: $validationElement.attr('data-max'),
	                maxLength: $validationElement.attr('maxlength'),
	                isDelayed: isDelayed,
	                iconClass: af.config.validations.iconClass,
	                alertWidth: $validationElement.attr('data-validation-alert-width') ? $validationElement.attr('data-validation-alert-width') : 'auto'
	            }));
	        }
	    };

	    $(document.documentElement)
	        .on('focus.aui.validation', '[data-validation]', function (e) {
	            toValidation(e, false);
	            e.preventDefault();
	        })
	        .on('focus.aui.validation', '[data-delayedvalidation]', function (e) {
	            toValidation(e, true);
	            e.preventDefault();
	        });
	}(jQuery));

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// AngularJS
	// ----------------------------------------
	__webpack_require__(60);
	__webpack_require__(61);

	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(69);
	__webpack_require__(70);
	__webpack_require__(71);
	__webpack_require__(72);
	__webpack_require__(73);
	__webpack_require__(74);
	__webpack_require__(75);
	__webpack_require__(76);
	__webpack_require__(77);
	__webpack_require__(78);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(82);
	__webpack_require__(83);
	__webpack_require__(84);
	__webpack_require__(85);
	__webpack_require__(86);
	__webpack_require__(87);
	__webpack_require__(88);
	__webpack_require__(89);
	__webpack_require__(90);
	__webpack_require__(91);




/***/ },
/* 60 */
/***/ function(module, exports) {

	(function ($) {
	    "use strict";
	    var uuid = -1, body = $('html'), _statics, _directive, _interface, auiEventDirectives = {};

	    if (window.$$directive) {
	        $.error('$$directive is used by other code.Please resolve conflict.');
	    };

	    if (window.angular) {
	        angular.module('aui', []);
	    } else {
	        $.error('angular is undefined.');
	    }

	    /**
	     * @param {string} name 命名空间+实例名称
	     * #param {object} prototype 原型
	     */
	    window.$$directive = function (name, prototype) {
	        init(name, prototype);
	    }

	    _directive = ["_trigger", "_apply", "_setValue", "_geValue", "_destroy"];
	    _interface = ['_initMembers', '_convertAs', '_getTemplate', '_initWidget', '_addWatcher', '_widgetName', '_namespace'];

	    angular.forEach(
	      'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	      function (eventName) {
	          var directiveName = 'aui' + firstUpperCase(eventName);
	          auiEventDirectives[directiveName] = ['$parse', '$rootScope', function ($parse, $rootScope) {
	              return {
	                  restrict: 'A',
	                  compile: function ($element, attr) {
	                      // We expose the powerful $event object on the scope that provides access to the Window,
	                      // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	                      // checks at the cost of speed since event handler expressions are not executed as
	                      // frequently as regular change detection.
	                      var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	                      return function ngEventHandler(scope, element) {
	                          element.on(eventName, function (event) {
	                              var callback = function () {
	                                  fn(scope, { $event: event });
	                              };
	                              callback();
	                          });
	                      };
	                  }
	              };
	          }];
	      }
	    );
	    angular.module('aui').directive(auiEventDirectives);

	    function getParent(linker, name) {
	        var
	            names,
	            i = 0,
	            c,
	            parent = linker._vm;
	        if (name) {
	            names = name.split('.');
	            c = names.length - 1;
	            if (parent === null) {
	                $.error('Can not find property "' + names[0] + '" .Please check your binding syntax.');
	            }
	            for (; i < c; i++) {
	                parent = parent[names[i]];
	            }
	        }
	        if (parent === undefined) {
	            return getParent({
	                _vm: linker._scope.$parent,
	                _scope: linker._scope.$parent
	            }, name);
	        } else {
	            return {
	                parent: parent,
	                name: names && names[c]
	            }
	        }
	    }

	    page.prototype = {
	        //调用数据上下文中绑定到控件事件的回调。
	        _trigger: function (e, args, name, isPropagationStopped) {
	            var
	                self = e.data,
	                temp,
	                callback;
	            if (isPropagationStopped && args.type != self._widgetName) {

	            } else if (typeof name == 'string' && !!name) {
	                temp = getParent(self, name);
	                callback = temp.parent[temp.name];
	                if ($.isFunction(callback)) {
	                    e.data = undefined;
	                    args && (args.element = undefined);
	                    callback.call(self._vm, e, args);
	                } else {
	                    $.error('"' + name + '" is not a function.Please check your binding syntax.');
	                }
	            }
	        },
	        _destroy: function (name) {
	            var temp;
	            if (typeof name == "string" && !!name) {
	                temp = getParent(this, name);
	                delete temp.parent[temp.name];
	            }
	        },
	        _setValue: function (name, value) {
	            var temp;

	            if (name) {
	                temp = getParent(this, name);
	                temp.parent[temp.name] = value;
	            }
	        },
	        _geValue: function (name) {
	            var temp;

	            if (name) {
	                temp = getParent(this, name);
	                return temp.parent[temp.name];
	            }
	        },
	        //为指令添加公共属性
	        _initMembers: $.noop,
	        _getTemplate: $.noop,
	        //支持 controller as语法
	        _convertAs: $.noop,
	        _initWidget: $.noop,
	        _addWatcher: $.noop
	    }

	    //page实例的构造函数
	    function page() {
	        if (!(this instanceof page)) {
	            return new page();
	        }
	    }
	    //link实例的构造函数
	    function linker() {
	        if (!(this instanceof linker)) {
	            return new linker();
	        }
	    }

	    //创建一个方法，用来访问控件实例的公共API
	    function vistor(widget) {
	        var
	            self = this,
	            context = "scope",
	            temp,
	            args = this._args;
	        temp = getParent(this, args.name);
	        if (typeof args.name == "string" && !!args.name) {
	            if (temp.parent.hasOwnProperty(temp.name)) {
	                $.error(args.name + ' is already in exist.');
	            } else {
	                temp.parent[temp.name] = function () {
	                    if (arguments[0] == "option") {
	                        $.error('call method "option" is not allowed.')
	                    }
	                    if (typeof self._widgetName == 'string' && !!self._widgetName) {
	                        widget = self._widgetName;
	                    }
	                    return self._ele[widget].apply(self._ele, arguments);
	                };
	            }
	        }
	    }

	    function transform(as, name) {
	        if (name.indexOf(".") == -1 && name != undefined) {
	            name = as + '.' + name;
	        }

	        return name;
	    }

	    /**
	     * 获取模板
	     * @param {jQuery} ele 承载模板的jQuery对象
	     */
	    function trimTemplate(temp) {
	        return temp && temp.trim();
	    }

	    function filter(keys, obj) {
	        var i = 0, c = keys.length;

	        for (; i < c; i++) {
	            delete obj[keys[i]];
	        }
	    }

	    function firstUpperCase(str) {
	        return str.replace(/(\w)/, function (v) {
	            return v.toUpperCase()
	        });
	    }

	    function setLinkArgs(directive, link, args) {
	        var
	            i = 0,
	            c = args.length - 1,
	            inject = directive[link].$inject,
	            value = {};

	        for (; i < c; i++) {
	            directive['_' + inject[i].replace('$', '')] = args[i];
	        }
	        value.base = directive;

	        return value;
	    }

	    function addLinker(directive, widget, link) {
	        if (!$.isFunction(directive[link])) {
	            directive[link] = function () {
	                var args = setLinkArgs(directive, link, arguments);
	                return {
	                    restrict: 'EA',
	                    template: directive._template,
	                    templateUrl: directive._templateUrl,
	                    replace: true,
	                    transclude: true,
	                    link: function (scope, elem, attrs) {
	                        args._vm = scope;
	                        args._ele = $(elem);
	                        args._scope = scope;
	                        args._attrs = attrs;
	                        bridge(args.base, widget, link);
	                        initLinker.call(linker(), args);
	                    }
	                }

	            };
	        }
	    }

	    function bridge(base, widget, link) {
	        var
	            i = 0,
	            c = _interface.length;
	        linker.prototype = {};
	        $.extend(true, linker.prototype, base);
	        for (; i < c; i++) {
	            delete linker.prototype[_interface[i]];
	        }
	        delete linker.prototype[widget];
	        delete linker.prototype[link];
	    }

	    function addInjecter(directive, widget, link, name) {
	        //需要注入的服务
	        var
	            inject = directive._inject,
	            dName = directive._namespace + firstUpperCase(widget);

	        if (!$.isArray(inject)) {
	            inject = [];
	        }
	        if (!$.isFunction(directive[widget])) {
	            directive[widget] = function (app) {
	                var self = this;
	                self[link].$inject = ['$parse'].concat(inject).concat([widget]);
	                app
	                    .factory(widget, function () { return self })
	                    .directive(dName, self[link]);

	            };
	        }
	    }

	    //创建控件指令的构造方法
	    function initDirective(directive) {
	        var
	            widget = directive._widgetName,
	            //构造link的方法名称
	            _widget = "_" + widget;

	        addLinker(directive, widget, _widget);
	        addInjecter(directive, widget, _widget);

	    }

	    //创建linker实例成员
	    function initMembers(args) {
	        var
	            x,
	            widget = args.base._widgetName;

	        for (x in args) {
	            //隐藏基类
	            if (x != "base") {
	                this[x] = args[x];
	            }
	        }
	        this._args = this._parse(this._attrs[widget])(window);
	        //表示是否在mapping中设置as
	        this._isAs = false;
	        this._widgetName = widget;
	    }

	    //获取绑定上下文_vm
	    function convertAs() {
	        var
	            scope = this._scope,
	            args = this._args;
	        if (args == null) {
	            $.error('Call "_initMembers" method failed.');
	        }
	        if (typeof args.as == "string" && !!args.as) {
	            this._vm = scope[args.as];
	            this._isAs = true;
	        }
	    }

	    //将vm中的方法，属性映射到viewModule(angular to ko)
	    function mappingViewModel() {
	        var args = this._args;
	        for (var j in args.viewModel) {
	            var temp = getParent(this, args.viewModel[j]);
	            args.viewModel[j] = temp.parent[temp.name];
	        }
	    }

	    //调用控件接口
	    function initLinker(args) {
	        //指令基类
	        var base = args.base;

	        initMembers.call(this, args);
	        base._initMembers.call(this);

	        convertAs.call(this);
	        base._convertAs.call(this, transform);

	        base._getTemplate.call(this, trimTemplate);

	        vistor.call(this, base._widgetName);
	        mappingViewModel.call(this);
	        base._initWidget.call(this);
	        base._addWatcher.call(this);
	    }

	    //创建指令模块
	    function initModule() {
	        var module;

	        this._uuid = ++uuid;

	        if (this._namespace == "aui") {
	            //auifw的控件注册到
	            this[this._widgetName](angular.module('aui'));
	        } else {
	            module = this._namespace + '.widgets';
	            try {
	                angular.module(module);
	            } catch (e) {
	                angular.module(module, []);
	            }
	            this[this._widgetName](angular.module(module));
	        }
	    }

	    //创建page类的实例
	    function init(name, prototype) {
	        var
	            createPage,
	            fullName,
	            statics = _statics,
	            _page = page,
	            //命名空间
	            namespace,
	            widget,
	            structure = name.split("."),
	            instance;

	        namespace = structure[0];
	        widget = structure[1];
	        //挂载到$$directive上的属性名称
	        name = (structure + "").replace(/,/g, "_");

	        //挂载到body上的属性名称
	        fullName = "directive_" + name;
	        if ($$directive[name]) {
	            //不允许创建同名指令
	            $.error(name + " directive is exist.");
	        } else {
	            //创建
	            instance = _page();
	            $$directive[name] = function (name) {
	                if (name == "uuid") {
	                    return instance._uuid;
	                } else if (name == "total") {
	                    return uuid + 1;
	                }
	            };
	        }

	        //避免指令接口被覆盖
	        filter(_directive, prototype);

	        $.extend(true, instance, prototype || {});

	        instance._namespace = namespace;
	        instance._widgetName = widget;

	        initDirective(instance);

	        initModule.call(instance);
	    }

	})(jQuery);

/***/ },
/* 61 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');

	    aui.directive('auiRepeatCallback', function ($compile) {
	        return {
	            restrict: 'A',
	            link: function (scope, iElement, iAttrs) {
	                if (scope.$last === true) {
	                    scope.$eval(iAttrs.auiRepeatCallback);
	                }
	            }
	        };
	    });

	    aui.directive('auiDirective', function ($compile) {
	        return {
	            restrict: 'A',
	            link: function (scope, iElement, iAttrs) {
	              console.log("test directive")
	            }
	        };
	    });
	}

/***/ },
/* 62 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');

	    aui.directive('auiBreadCrumb', function () {
	        return {
	            restrict: "E",
	            scope: false,
	            template:  '<nav class="afui-breadcrumb" role="navigation">'+
	                       '<ul role="tablist">' +
	                       '<li  ng-repeat="item in items" ng-if="$index+1!=items.length">' +
	                       '<a ng-href="{{item.href}}">{{item.title}}</a><span class="afui-icon-triangle-right fi-triangle-right-bs"></span>' +
	                       '</li>' +
	                        '<li  ng-repeat="item in items" ng-if="$index+1==items.length">' +
	                       ' <span tabindex="0">{{item.title}}</span>' +
	                       '</li>' +
	                       '</ul>'+
	                       '</nav>',
	                      
	            replace: true,
	            transclude: false,
	            link: function (scope, element, attrs) {
	               
	            }
	        };
	    });
	    

	}

/***/ },
/* 63 */
/***/ function(module, exports) {

	if (window.angular) {
	    var aui = angular.module('aui');
	    aui.directive('auiBtnContainer', function ($timeout) {
	        return {
	            restrict: "EA",
	            scope: { btncontainer: "=" },
	            template: '<div class="aui-btn-container" ng-transclude></div>',
	            replace: true,
	            transclude: true,
	            link: function (scope, element, attrs) {
	                var args = scope.btncontainer;
	                if (args.as) {
	                    scope.$watch(function () {
	                        return args.as[args.items];
	                    }, function () {
	                        _init($(".aui-btn-container.id" + scope.$id));
	                    });
	                }
	                if (!element.hasClass("id" + scope.$id)) element.addClass("id" + scope.$id);
	                function _init(element) {
	                    $timeout(function () {
	                        var _w = 0;
	                        try {
	                            _w = element.parent()[0].clientWidth;
	                        } catch (e) { }
	                        if (element.parent().width() > 0 && _w > 0) {
	                            $(".aui-btn-container.id" + scope.$id).btnContainer(args);
	                        } else {
	                            var t = setInterval(function () {
	                                try {
	                                    if ($(".aui-btn-container.id" + scope.$id).parent()[0].clientWidth > 0) {
	                                        $(".aui-btn-container.id" + scope.$id).btnContainer(args);
	                                        window.clearInterval(t);
	                                    }
	                                } catch (e) { }
	                            }, 100);
	                        }
	                    }, 0)
	                }
	                _init(element);
	            }
	        };
	    });
	}

/***/ },
/* 64 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');
	    
	    aui.directive('auiButton', function () {
	        return {
	            restrict: "E",
	            scope: false,
	            template: '<button type="button" role="button" class="button" aria-disabled="false" ng-transclude></button>',
	            replace: true,
	            transclude: true,
	            link: function (scope, element, attrs) {
	                if ('ascensive' in attrs) element.addClass('button-theme');
	                if ('disabled' in attrs) {
	                    element.attr("aria-disabled", 'true');
	                };
	                if ('icon' in attrs) element.addClass('button-icon');
	                if ('bald' in attrs) element.addClass('button-bald operable');
	                if ('link' in attrs) element.addClass('button-link');
	                if ('block' in attrs) element.addClass('button-block');
	            }
	        };
	    });
	    

	}

/***/ },
/* 65 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.captcha.directive", {
	        _template: '<div></div>',
	        _initMembers: function () {
	            var args = this._args;

	            this._isValidName = args.isValid;

	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;

	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("validChanged", this, this._onValidChanged)
	                .on("destroy", this, this._onDestroy)
	                .removeAttr("data-aui-captcha")
	                .removeAttr("data-captcha")
	                .captcha(this._args);
	        },
	        _addWatcher: function () {
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onValidChanged: function (e, args) {
	            var self = e.data;

	            self._setValue(self._isValidName, args.newValue);
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.combobox("option", "disabled", value);
	            });
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        }
	    });
	})();

/***/ },
/* 66 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.combobox.directive", {
	        _template: '<div>combobox<p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;
	            if (args.selectedItem == undefined) {
	                $.error("Mapping 'selectedItem' is not available！");
	            }

	            //combobox selecteItem的监听名称
	            this._watchSelectedItem = this._selectedItemName = args.selectedItem;

	            this._watchItems = this._itemsName = args.items;

	            this._watchDisabled = this._disabledName = args.disabled;

	            //hidden事件在数据上下文中的名称
	            this._hiddenName = args.hidden;
	            //itemsSourceChange事件在数据上下文中的名称
	            this._itemsSourceChangedName = args.itemsSourceChanged;
	            //selectedChanged事件在数据上下文中的名称
	            this._selectedChangedName = args.selectionChanged;
	            this._selectionChangingName = args.selectionChanging;
	            //shown事件在数据上下文中的名称
	            this._shownName = args.shown;

	            this._isItemsSourceChanging = false;
	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchSelectedItem = transform(args.as, this._selectedItemName);
	                this._watchItems = transform(args.as, this._itemsName);

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }

	            args.selectedItem = this._geValue(this._selectedItemName);
	        },
	        _getTemplate: function (trim) {
	            var
	                ele = this._ele,
	                args = this._args;

	            //获取可选项模板
	            args.itemTemplate = trim(ele.children('p').children('item-template').html());
	            //获取选中项模板
	            args.selectedTemplate = trim(ele.children('p').children('selected-template').html());
	            //create new模板
	            args.createTemplate = trim(ele.children('p').children("create-template").html());
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("hidden", this, this._onHidden)
	                .on("itemsSourceChanged", this, this._onItemsSourceChanged)
	                .on("selectionChanging", this, this._onSelectionChanging)
	                .on("selectionChanged", this, this._onSelectionChanged)
	                .on("shown", this, this._onShown)
	                .removeAttr("data-aui-combobox")
	                .removeAttr("data-combobox")
	                .combobox(this._args);
	        },
	        _addWatcher: function () {
	            //itemsSource需要先与selectedItem监听
	            this._addItemsWatcher();
	            this._addSelectedItemWatcher();
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _onHidden: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._hiddenName);
	        },
	        _onItemsSourceChanged: function (e, args) {
	            var self = e.data;
	            e.stopPropagation();
	            self._isItemsSourceChanging = false;
	            self._setValue(self._itemsName, args.newValue);
	            self._trigger(e, args, self._itemsSourceChangedName);
	        },
	        _onSelectionChanging: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._selectionChangingName);
	        },
	        _onSelectionChanged: function (e, args) {
	            var self = e.data;
	            args.parameters.isItemsSourceChanging = self._isItemsSourceChanging;
	            self._setValue(self._selectedItemName, args.newValue.item);
	            self._trigger(e, args, self._selectedChangedName);
	        },
	        _onShown: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._shownName);
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                self._isItemsSourceChanging = true;
	                self._ele.combobox("itemsSource", value);
	            }, true);
	        },
	        _addSelectedItemWatcher: function () {
	            var
	                self = this,
	                vm = this._vm,
	                name = self._selectedItemName;

	            this._scope.$watch(self._watchSelectedItem, function (value, last) {
	                self._ele.combobox("selectedItem", value);
	            });
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.combobox("option", "disabled", value);
	            });
	        }
	    });
	})();

/***/ },
/* 67 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.datagrid.directive", {
	        _template: '<div>datagrid<p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;

	            if (!args || typeof args.items != "string" || !args.items) {
	                $.error("Mapping 'items' is not available！");
	            }
	            //
	            this._watchItems = this._itemsName = args.items;
	            //
	            this._itemsSourceChangedName = args.itemsSourceChanged;
	            //
	            this._filtered = args.filtered;
	            //
	            this._filtering = args.filtering;
	            //
	            this._loaded = args.loaded;
	            //
	            this._rowClick = args.rowClick;
	            //
	            this._sorted = args.sorted;
	            //
	            this._sorting = args.sorting;
	            //
	            this._columns = this._ele.children('p').children('columns').children();
	            //
	            this._rowStyle = this._ele.children('p').children('row-style');

	            this._isItemsWatched = false;
	            this._itemscount = 0;
	        },
	        _getTemplate: function (trim) {
	            if (this._columns.length == 0) {
	                $.error('Please set "columns" for datagrid.');
	            } else {
	                this._args.columns = this._getColumnsSetting(this, trim);
	            }
	            if (this._rowStyle.length > 0) {
	                this._args.rowStyle = trim(this._rowStyle.attr("data-bind"));
	            }

	        },
	        /**
	         * 获取列设置参数
	         * @param {jQuery} self 构建当前控件的指令。
	         * @param {function} $parse 转换函数
	         */
	        _getColumnsSetting: function (self, trim) {
	            var
	                i,
	                columns = self._columns,
	            c = columns.length,
	            settings = [];

	            for (i = 0; i < c; i++) {
	                var col = $(columns[i]);
	                settings[i] = this._parse(col.data("column"))(window);
	                //mapping assert for sorting
	                if (settings[i].isSortable) {
	                    settings[i].sortASC = self._vm[settings[i].sortASC];
	                }
	                if (settings[i].isSortable) {
	                    settings[i].sortDESC = self._vm[settings[i].sortDESC];
	                }

	                if (settings[i].type == $$.datagrid('columnType').template) {
	                    settings[i].columnTemplate = trim(col.children('column-template').html());
	                }
	                settings[i].headerTemplate = trim(col.children('header-template').html());
	                settings[i].backgroundTemplate = trim(col.children('background-template').html());
	                settings[i].headerBackgroundTemplate = trim(col.children('header-background-template').html());
	            }

	            return settings;
	        },
	        _convertAs: function (transform) {
	            var args = this._args
	            if (typeof args.as == "string" && args.as != "") {
	                this._watchItems = transform(args.as, this._itemsName);
	            }
	        },
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("filtered", this, this._onFiltered)
	                .on("filtering", this, this._onFiltering)
	                .on("itemsSourceChanged", this, this._onItemsSourceChanged)
	                .on("loaded", this, this._onLoaded)
	                .on("sorted", this, this._onSorted)
	                .on("sorting", this, this._onSorting)
	                .on("rowClick", this, this._onRowClick)
	                .removeAttr("data-aui-datagrid")
	                .removeAttr("data-datagrid")
	                .datagrid(this._args);
	        },
	        _addWatcher: function () {
	            this._addItemsWatcher();
	        },
	        _onFiltered: function (e, args) {
	            e.data._trigger(e, args, e.data._filtered);
	        },
	        _onFiltering: function (e, args) {
	            e.data._trigger(e, args, e.data._filtering);
	        },
	        _onItemsSourceChanged: function (e, args) {
	            var self = e.data;
	            if (args.type == "combobox") return;
	            if (!self._isItemsWatched) {
	                self._setValue(self._itemsName, ko.mapping.toJS(args.newValue));
	                self._isItemsWatched = false;
	            } else {
	                self._isItemsWatched = false;
	            }
	            e.data._trigger(e, args, self._itemsSourceChangedName);
	        },
	        _onLoaded: function (e, args) {
	            e.data._trigger(e, args, e.data._loaded);
	        },
	        _onRowClick: function (e, args) {
	            e.data._trigger(e, args, e.data._rowClick);
	        },
	        _onSorted: function (e, args) {
	            e.data._trigger(e, args, e.data._sorted);
	        },
	        _onSorting: function (e, args) {
	            e.data._trigger(e, args, e.data._sorting);
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data,
	                name = self._args.name;

	            if (args.type == "datagrid") {
	                self._destroy(name);
	            };
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                if (value == undefined) {
	                    $.error("Mapping 'items' is not available！");
	                }
	                if (self._itemscount != value.length) {
	                    self._isItemsWatched = true;
	                }
	                self._itemscount = value.length;
	                self._ele.datagrid("itemsSource", value);
	            }, true);
	        }
	    });
	})();

/***/ },
/* 68 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.datepicker.directive", {
	        _template: '<div>datepicker</div>',
	        _initMembers: function () {
	            var args = this._args;

	            //selectedItem在数据源中的属性名称
	            this._watchSelectedDate = this._selectedDateName = args.selectedDate;
	            this._watchSelectedTimeZone = this._selectedTimeZoneName = args.selectedTimeZone;
	            this._watchDisabled = this._disabledName = args.disabled;

	            //selectedChanged在数据源中的名称
	            this._selectionChangedName = args.selectionChanged;
	            this._shownName = args.shown;
	            this._hiddenName = args.hidden;

	            this._isSetSelectedDate = typeof args.selectedDate == "string" && !!args.selectedDate;
	            this._isSetTimeZone = typeof args.selectedTimeZone == "string" && !!args.selectedTimeZone;
	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                if (this._isSetSelectedDate) {
	                    this._watchSelectedDate = transform(args.as, this._selectedDateName);
	                }

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }

	                if (this._isSetTimeZone) {
	                    this._watchSelectedTimeZone = transform(args.as, this._selectedTimeZoneName);
	                }
	            }

	            args.selectedDate = this._geValue(this._selectedDateName);
	            args.selectedTimeZone = this._geValue(this._selectedTimeZoneName);
	        },

	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("hidden", this, this._onHidden)
	                .on("selectionChanged", this, this._onSelectionChanged)
	                .on("shown", this, this._onShow)
	                .removeAttr("data-aui-rangepicker")
	                .removeAttr("data-rangepicker")
	                .datepicker(this._args);
	        },
	        _addWatcher: function () {
	            if (this._isSetSelectedDate) {
	                this._addSelectedDateWatcher();
	            }

	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data,
	                args = self.args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }

	        },
	        _onHidden: function (e, args) {
	            e.data._trigger(e, args, e.data._hiddenName);
	        },
	        _onShow: function (e, args) {
	            e.data._trigger(e, args, e.data._shownName);
	        },
	        _onSelectionChanged: function (e, args) {
	            var self = e.data;
	            e.stopPropagation();
	            self._setValue(self._selectedDateName, args.newValue);
	            e.data._trigger(e, args, self._selectionChangedName);
	        },
	        _addSelectedDateWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchSelectedDate, function (value, last) {
	                self._ele.datepicker("option", "selectedDate", value);
	            });
	        },
	        _addselectedTimeZoneWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchSelectedTimeZone, function (value, last) {
	                self.ele.datepicker("option", "selectedTimeZone", value);
	            });
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.datepicker("option", "disabled", value);
	            });
	        }
	    });
	})();

/***/ },
/* 69 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.dropdown.directive", {
	        //_template: '<div class="popover bottom">'
	        //          + '<div class="arrow"></div>'
	        //          + '<div ng-transclude></div>'
	        //          +'</div>',
	        _template:'<div ng-transclude></div>',
	        _initMembers: function () {
	            var args = this._args;

	            this._of = args.of;
	            this._my = args.my;
	            this._at = args.at;
	            this._within = args.within;

	            this._triggerEvent = args.triggerEvent;
	            this._triggerTogglable = args.triggerTogglable;

	            this._closedName = args.closed;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	        },
	        _initWidget: function () {
	            if (!(this._of instanceof jQuery)) {
	                this._of = this._args.of = $(this._of);
	            }

	            this._of
	                .off(this._triggerEvent + '.dropdown.directive')
	                .on(this._triggerEvent + '.dropdown.directive', this, function (e) {
	                    if (e.data._triggerTogglable && e.data._triggerTogglable !== 'false' && e.data._ele.hasClass('aui-dropdown-visible'))
	                    e.data._ele.dropdown('close');
	                else 
	                    e.data._ele.dropdown('open');
	            });

	            this._ele
	                .addClass('aui-dropdown')
	                .on("closed", this, this._onClosed)
	                .removeAttr("data-aui-dropdown")
	                .removeAttr("data-dropdown")
	                .dropdown(this._args);
	        },
	        _addWatcher: function () {
	            
	        },
	        _onClosed: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._closedName);
	        }
	    });
	})();

/***/ },
/* 70 */
/***/ function(module, exports) {

	(function () {

	})();

/***/ },
/* 71 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.eventcalendar.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;

	            this._watchItems = this._itemsName = args.items;

	            this._watchDisabled = this._disabledName = args.disabled;

	            //itemsSourceChange事件在数据上下文中的名称
	            this._itemsSourceChangedName = args.itemsSourceChanged;

	            this._pagingName = args.paging;
	            this._monthCellClickName = args.monthCellClick;

	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _getTemplate: function (trim) {
	            var
	                ele = this._ele,
	                args = this._args;

	            args.tasksTemplate = trim(ele.children('p').children('tasks-template').html());
	        },
	        _convertAs: function (transform) {
	            var
	                vm,
	                args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchItems = transform(args.as, this._itemsName);

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }

	            if (this._isSetDisabled) {
	                args.disabled = this._vm[this._disabledName];
	            }
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .html('')
	                .on('monthCellClick', this, this._onMonthCellClick)
	                .on('paging', this, this._onPaging)
	                .on("destroy", this, this._onDestroy)
	                .on("itemsSourceChanged", this, this._onItemsSourceChanged)
	                .removeAttr("data-aui-eventcalendar")
	                .removeAttr("data-eventcalendar")
	                .eventcalendar(this._args);
	        },
	        _addWatcher: function () {
	            this._addItemsWatcher();
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onMonthCellClick: function (e, args) {
	            var self = e.data;
	            e.data._trigger(e, args, self._monthCellClickName);
	        },
	        _onPaging: function (e, args) {
	            var self = e.data;
	            e.data._trigger(e, args, self._pagingName);
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _onItemsSourceChanged: function (e, args) {
	            var self = e.data;
	            e.data._trigger(e, args, self._itemsSourceChangedName);
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                self._ele.eventcalendar("itemsSource", value);
	            }, true);
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function () {
	                self._ele.eventcalendar("option", "disabled", self._vm[self._disabledName]);
	            });
	        }
	    });
	})();


/***/ },
/* 72 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');
	    //这个function是为了获取如 scope.vm.obj.liz 中liz 的值
	    //参数 1 string"vm.obj.liz" 参数2 scope
	    function getValue(tragetStr, scope) {
	        var targetStrArr = tragetStr.split(".");

	        var targetValue = scope[targetStrArr[0]];
	        for (var i = 1; i < targetStrArr.length; i++) {
	            targetValue = targetValue[targetStrArr[i]];

	        }
	        return targetValue;
	    }
	    aui.directive('auiExpander', ['$parse', '$compile', function ($parse, $compile) {
	        return {
	            restrict: "AE",
	            scope: true,
	            template: function (tElement, tAttrs) {
	                // var parseFun = $parse(tAttrs.buttons);
	                // var args = parseFun(window);
	                //  var expanderTitleTemplate = tAttrs.titleTemplate;
	                var html = '<div class="aui-expander outline-none"  tabindex="0" data-expander="aui-expander" aria-expanded="{{!$folded}}" aria-span="">' +
	                              '<div ng-click="$folded=!$folded" class="afui-panel-expander">' +
	                              '<div class="float-right small-margin-right" buttons-content>' +
	                               //iconStr +
	                              '</div>' +
	                              '<span class="fi-arrow-right-bs expanded-icon" ng-show="$folded"></span>' +
	                              '<span class="fi-arrow-down-bs unexpanded-icon"ng-hide="$folded"></span>' +
	                              '<div style="display:inline-block"title-content></div>' +
	                              '</div>' +
	                              '<div  ng-transclude ng-hide="$folded"></div>' +
	                              '</div>';
	                return html;
	            },
	            replace: true,
	            transclude: true,
	            link: function (scope, element, attrs) {
	                'expanded' in attrs ? scope.$folded = false :
	                scope.$folded = true;//设置expander 默认折叠

	                //添加callback
	                if (attrs.callBack) {
	                    attrs.callBack = getValue(attrs.callBack, scope);
	                    scope.$watch("$folded", attrs.callBack);
	                }

	                //添加buttons

	                if (attrs.buttons) {
	                    var buttonsContent, btnStr, target, buttons, subScope;
	                    btnStr = attrs.buttons;
	                    btnStrArr = btnStr.split(".");
	                    buttonsContent = $("div[buttons-content]", element);//获得buttonsContent 容器DIV
	                    target = scope[btnStrArr[0]];
	                    buttons = getValue(btnStr, scope);
	                    subScope = scope.$new();
	                    subScope.buttons = buttons;
	                    subScope.target = target;
	                    buttonsContent.append($('<a ng-repeat="button in buttons" ng-click="button.click($event,target)" title="{{button.title}}" class=" {{button.icon}}"></a>'));
	                    var compiled = $compile(buttonsContent)(subScope);//compile buttons 部分
	                }
	                //添加titleTemplate

	                if (attrs.titleTemplate) {
	                    var titleTemplate, titleStr, titleContent;
	                    titleStr = attrs.titleTemplate;
	                    titleTemplate = getValue(titleStr, scope);
	                    titleContent = $("div[title-content]", element);
	                    titleContent.append($(titleTemplate));
	                    $compile(titleContent)(scope);
	                }


	            }


	        };
	    }]);

	}

/***/ },
/* 73 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.gcalendar.directive", {
	        _template: '<div>gcalendar</div>',
	        _initMembers: function () {
	            var args = this._args;

	            if (!args || typeof args.selectedDate != "string" || !args.selectedDate) {
	                $.error("Mapping 'selectedDate' is not available！");
	            }

	            this._watchItems = this._itemsName = args.items;
	            this._watchSelectedDate = this._selectedDateName = args.selectedDate;

	            this._isSelectedWatched = false;

	            //dayClick事件在数据上下文中的名称
	            this._dayClickName = args.dayClick;
	            //monthChanged事件在数据上下文中的名称
	            this._monthChangedName = args.monthChanged;
	            //selectionChanged事件在数据上下文中的名称
	            this._selectionChangedName = args.selectionChanged;

	            this._hasTask = typeof args.hasTaskBind == "string" && !!args.hasTaskBind;

	            args.selectedDate = this._geValue(this._selectedDateName);
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchSelectedDate = transform(args.as, this._selectedDateName);
	                if (this._hasTask) {
	                    this._watchItems = transform(args.as, this._itemsName);
	                }

	            }
	        },
	        _initWidget: function () {

	            this._ele
	                .on("dayClick", this, this._onDayClick)
	                .on("monthChanged", this, this._onMonthChanged)
	                .on("selectionChanged", this, this._onSelectionChanged)
	                .removeAttr("data-aui-gcalendar")
	                .removeAttr("data-gcalendar")
	                .gcalendar(this._args);
	        },
	        _addWatcher: function () {
	            this._addSelectedDateWatcher();

	            if (this._hasTask) {
	                this._addItemsWatcher();
	            }
	        },
	        _onDayClick: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._dayClickName);
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _onMonthChanged: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._monthChangedName);
	        },
	        _onSelectionChanged: function (e, args) {
	            var self = e.data;

	            self._setValue(self._selectedDateName, args.newValue);

	            e.data._trigger(e, args, self._selectionChangedName);
	        },
	        _addSelectedDateWatcher: function () {
	            var
	                self = this,
	                scope = self._scope;

	            this._isSelectedWatched = true;

	            this._scope.$watch(self._watchSelectedDate, function () {
	                self._ele.gcalendar("option", "selectedDate", self._vm[self._selectedDateName]);
	            });
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                self._isItemsSourceChanging = true;
	                self._ele.gcalendar("itemsSource", value);
	            }, true);
	        }
	    });
	})();

/***/ },
/* 74 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.loading.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initWidget: function () {
	            this._ele
	                .removeAttr("data-aui-loading")
	                .removeAttr("data-loading")
	                .loading(this._args);
	        }
	    });
	})();

/***/ },
/* 75 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.messagebox.directive", {
	        _template: '<div ng-transclude></div>',
	        _initMembers: function () {
	            var args = this._args;

	            this._titleName = args.title;
	            //hidden事件在数据上下文中的名称
	            this._hiddenName = args.hidden;
	            //shown事件在数据上下文中的名称
	            this._shownName = args.shown;
	            this._closeName = args.close;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchTitle = transform(args.as, this._titleName);
	            }
	        },
	        _getTemplate: function (trim) {
	            var
	                ele = this._ele,
	                args = this._args;

	            //获取可选项模板
	            args.itemTemplate = trim(ele.children('p').children('item-template').html());
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("hidden", this, this._onHidden)
	                .on("shown", this, this._onShown)
	                .on("closeInTitleBar", this, this._onClose)
	                .removeAttr("data-aui-messagebox")
	                .removeAttr("data-messagebox")
	                .messagebox(this._args);
	        },
	        _addWatcher: function () {
	            this._addTitleWatcher();
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _onShown: function (e, args) {
	            var self = e.data;

	            self._trigger(e, args, self._shownName);
	        },
	        _onClose: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._closeName);
	        },
	        _onHidden: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._hiddenName);
	        },
	        _onItemsSourceChanged: function (e, args) {
	            var self = e.data;
	            e.stopPropagation();
	            self._isItemsSourceChanging = false;
	            self._setValue(self._itemsName, args.newValue);
	            self._trigger(e, args, self._itemsSourceChangedName);
	        },
	        _addTitleWatcher: function () {
	            var
	                self = this,
	                scope = self._scope;

	            this._scope.$watch(self._watchTitle, function () {
	                self._ele.messagebox("option", "title", self._vm[self._titleName]);
	            });
	        },
	    });
	})();

/***/ },
/* 76 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.multicombobox.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;

	            if (args.items == undefined) {
	                $.error("'items' is not available！");
	            }

	            this._watchItems = this._itemsName = args.items;
	            this._watchDisabled = this._disabledName = args.disabled;


	            this._selectionChangedName = args.selectionChanged;


	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchItems = transform(args.as, this._itemsName);

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }
	        },
	        _getTemplate: function (trim) {
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("selectionChanged", this, this._onSelectionChanged)
	                .removeAttr("data-aui-multicombobox")
	                .removeAttr("data-multicombobox")
	                .multicombobox(this._args);
	        },
	        _addWatcher: function () {
	            //itemsSource需要先与selectedItems监听
	            this._addItemsWatcher();
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _onSelectionChanged: function (e, args) {
	            var self = e.data;

	            //self._setValue(self._selectedItemsName, args.newValue);
	            self._trigger(e, args, self._selectionChangedName);
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                self._ele.multicombobox("itemsSource", value);
	            }, true);
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.multicombobox("option", "disabled", value);
	            });
	        }
	    });
	})();


/***/ },
/* 77 */
/***/ function(module, exports) {

	if (window.angular) {
	    var aui = angular.module('aui'),
	        selectedPageChanged = function (selectedPage, total, displayCount, hasTotal) {
	            selectedPage = parseInt(selectedPage);
	            displayCount = parseInt(displayCount);

	            var items = [],
	                halfCount = Math.floor(displayCount / 2),
	                startPage, endPage;

	            if (total < displayCount) {
	                startPage = 1;
	                endPage = total;
	            }
	            else {
	                startPage = selectedPage - halfCount;
	                startPage = startPage > 0 ? startPage : 1;
	                startPage = startPage === 1 ? 1 : startPage + 2;

	                endPage = startPage + (startPage === 1 ? displayCount - 1 : displayCount - 3);
	                if (endPage > total) {
	                    startPage = startPage - (endPage - total);
	                    endPage = total;
	                    startPage = startPage > 0 ? startPage : 1;
	                }
	                endPage = endPage === total ? endPage : endPage - 2;
	            }

	            if (startPage !== 1) {
	                items.push({ displayText: 1 });
	                items.push({ displayText: '...', disabled: true });
	            }

	            for (i = startPage; i <= endPage; i++) {
	                items.push({ displayText: i, selected: i === selectedPage });
	            }

	            if (endPage !== total) {
	                items.push({ displayText: '...', disabled: true });
	                items.push({ displayText: total });
	            }

	            return items;
	        },
	        isSmallMode = function (m) {
	            return 'small'.indexOf(m.toLowerCase()) === 0;
	        };

	    aui.directive('auiPage', function () {
	        return {
	            restrict: "E",
	            scope: {
	                selectedPage: '=',
	                pageCount: '=',
	                displayCount: '@',

	                preText: '@',
	                nextText: '@',

	                hasJumper: '@',
	                jumperText: '@',

	                mode: '@',
	                selectedPageChanged: '@selectedPageChanged'
	            },
	            template: function (el, attr) {
	                var template = '<div class="aui-page">' +
	                    '  <aui-button icon bald class="afui-icon-triangle-left fi-triangle-left-bs image" ng-disabled="selectedPage == 1" ng-click="__prevClick__()"></aui-button>' +
	                    '  <div class="page-content" ng-class="{ hide: \'small\'.indexOf(mode.toLowerCase()) === 0 }">' +
	                    '   <aui-button icon bald ng-repeat="item in items" ng-class="{ selected: item.selected }" ng-disabled="item.disabled" ng-bind="item.displayText"></aui-button>' +
	                    '  </div>' +
	                    '  <div class="page-content-sm" ng-class="{ hide: !(\'small\'.indexOf(mode.toLowerCase()) === 0) }">' +
	                    '    <input type="number" min="1" ng-model="selectedPage" ng-model-options="{ updateOn: \'blur\' }" ng-keydown="__inputKeyDown__($event)" />' +
	                    '    <span>/ {{pageCount}}</span>' +
	                    '  </div>' +
	                    '  <aui-button icon bald class="afui-icon-triangle-right fi-triangle-right-bs image" ng-disabled="selectedPage == pageCount" ng-click="__nextClick__()"></aui-button>' +
	                    //'  <div class="page-total-content"  ng-class="{ hide: \'small\'.indexOf(mode.toLowerCase()) === 0 }">' +
	                    //'    <input type="number" min="1" class="text-sm" ng-model="selectedPage" ng-model-options="{ updateOn: \'blur\' }" ng-keydown="__inputKeyDown__($event)" />' +
	                    //'    <aui-button ng-bind="jumperText" ng-click="__goClick__($event)"></aui-button>' +
	                    //'  </div>' +
	                    '</div>';

	                return template;
	            },
	            replace: true,
	            transclude: true,
	            link: function (scope, el, attrs) {
	                if (!isSmallMode(scope.mode)) {
	                    scope.items = selectedPageChanged(scope.selectedPage, scope.pageCount, scope.displayCount, scope.hasTotal);
	                }

	                scope.$watch('selectedPage', function (newValue, oldValue, scope) {
	                    if (newValue === oldValue) return;
	                    if (newValue > scope.pageCount || newValue < 1 || isNaN(newValue)) {
	                        scope.selectedPage = oldValue;
	                        return;
	                    }

	                    scope.items = selectedPageChanged(scope.selectedPage, scope.pageCount, scope.displayCount, scope.hasTotal);
	                    var eventTag = scope.selectedPageChanged || 'selectedPageChanged';
	                    scope.$emit(eventTag, { newValue: newValue, oldValue: oldValue, scope: scope });
	                });

	                scope.$watch('pageCount', function (newValue, oldValue, scope) {
	                    if (scope.selectedPage > newValue) {
	                        scope.selectedPage = newValue;
	                    }

	                    scope.items = selectedPageChanged(scope.selectedPage, scope.pageCount, scope.displayCount, scope.hasTotal);
	                    scope.$emit('pageCountChanged', { newValue: newValue, oldValue: oldValue, scope: scope });
	                });

	                scope.__prevClick__ = function (e) {
	                    scope.selectedPage--;
	                };

	                scope.__nextClick__ = function (e) {
	                    scope.selectedPage++;
	                };

	                scope.__inputKeyDown__ = function (e) {
	                    switch (e.keyCode) {
	                        case window.af.Utils.KeyCode.ENTER:
	                            this.selectedPage = e.target.value;
	                        case window.af.Utils.KeyCode.ESC:
	                            e.target.value = this.selectedPage;
	                    }
	                };

	                scope.__goClick__ = function (e) {
	                    this.selectedPage =parseInt( $(e.target).prev('input[type="number"]').val());
	                };

	                el.children('.page-content').on('click', 'button', function (e) {
	                    scope.selectedPage = parseInt($(e.target).scope().item.displayText);
	                    scope.$apply();
	                });
	            }
	        };
	    });
	}

/***/ },
/* 78 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');
	    function initPanel(newValue, element) {
	        var panelType = newValue;
	        var icon = element.children('span:first-child');
	        element.attr('class', '');
	        icon.attr('class', '');
	        panelType == 'error' && element.addClass('panel-error') && icon.addClass('afui-icon-error fi-round-error-a') ||
	        panelType == 'success' && element.addClass('panel-success') && icon.addClass('afui-icon-successful fi-round-finish-a') ||
	        panelType == 'info' && element.addClass('panel-info') && icon.addClass('afui-icon-information fi-round-infor-a') ||
	        panelType == 'warn' && element.addClass('panel-warn') && icon.addClass('afui-icon-warning fi-warning-a');
	    };
	    aui.directive('auiPanel', function () {

	        return {
	            restrict: "E",
	            scope: {
	                visible: "=panelVisible"
	            },
	            template: '<div>' +
	                '  <span></span>' +
	                '  <span ng-transclude></span>' +
	                '  <button class="text-black operable afui-icon-close fi-close-bs" aria-disabled="false" role="button" type="button" aria-span="Close" ng-click="closeClick()"></button>' +
	                '</div>',
	            replace: true,
	            transclude: true,
	            link: function ($scope, element, attrs) {
	                var handelVisible = attrs.panelVisible !== undefined;
	                if (handelVisible) {
	                    $scope.$watch('visible', function (newValue, oldValue, scope) {//这个函数第一次执行时并没有发生变化newValue 和 oldValue 都为scope 中的默认值
	                        if (newValue === undefined) {
	                            return;
	                        }

	                        //if (newValue != oldValue) { 注释掉是因为触发根据初始值控制显隐
	                        newValue ? element.show() : element.hide();
	                        //}

	                    })
	                }

	                initPanel(attrs.panelType, element);
	                attrs.$observe('panelType', function () {
	                    initPanel(attrs.panelType, element);
	                });
	                attrs.$observe('panelHide', function (value) {//监控属性panel-hide 的变化但是当点击X 关掉messagebar
	                    value = value.toLowerCase();
	                    if (value == "hide" || value == "true") {
	                        element.hide()
	                    } else if (value == "show" || value == "false") {
	                        element.show();
	                    }
	                })
	                $scope.closeClick = function (a, b) {
	                    if (handelVisible) {
	                        $scope.visible = false;
	                    } else {
	                        element.hide();
	                    }
	                    $scope.$emit("panelClose");
	                };

	            }


	        };
	    });


	}

/***/ },
/* 79 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.radiobutton.directive", {
	        _widgetName: 'radiobutton',
	        _template: '<input type="radio" />',
	        _initMembers: function () {
	            var args = this._args;

	            this._watchChecked = this._checkedName = args.checked;
	            this._watchDisabled = this._disabledName = args.disabled;
	            this._contentName = args.content;

	            //表示是否正在监听
	            this._isCheckedWatched = false;

	            //check事件在数据上下文中的名称
	            this._checkName = args.check;
	            this._unCheckName = args.unCheck;

	            this._isSetChecked = typeof args.checked == "string" && !!args.checked;
	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {

	                if (this._isSetChecked) {
	                    this._watchChecked = transform(args.as, this._checkedName);
	                }

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }

	            if (this._isSetChecked) {
	                args.checked = this._vm[this._checkedName];
	            }
	            args.content = this._vm[this._contentName] || this._contentName;
	            if (this._isSetDisabled) {
	                args.disabled = this._vm[this._disabledName];
	            }
	        },
	        _initWidget: function () {
	            this._ele
	                .on("check", this, this._onCheck)
	                .on("unCheck", this, this._onUnCheck)
	                .removeAttr("data-aui-radiobutton")
	                .removeAttr("data-radiobutton")
	                .radiobutton(this._args);
	        },
	        _addWatcher: function () {
	            if (this._isSetChecked) {
	                this._addCheckedeWatcher();
	            }

	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onCheck: function (e, args) {
	            var self = e.data;

	            if (self._isCheckedWatched) {
	                self._setValue(self._checkedName, true);
	            }

	            self._isCheckedWatched = true;

	            self._trigger(e, args, self._checkName);
	        },
	        _onUnCheck: function (e, args) {
	            var self = e.data;

	            if (self._isCheckedWatched) {
	                self._setValue(self._checkedName, false);
	            }

	            self._isCheckedWatched = true;

	            self._trigger(e, args, self._unCheckName);
	        },
	        _addCheckedeWatcher: function () {
	            var
	                self = this,
	                scope = self._scope;

	            scope.$watch(this._watchChecked, function (value, last) {
	                self._isCheckedWatched = true;
	                self._ele.radiobutton("option", "checked", value);
	            });
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.radiobutton("option", "disabled", value);
	            });
	        }
	    });
	})();

/***/ },
/* 80 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.rangepicker.directive", {
	        _template: '<div ng-transclude></div>',
	        _initMembers: function () {
	            var args = this._args;

	            this._watchSelectedStartDate = this._selectedStartDateName = args.selectedStartDate;
	            this._watchSelectedEndDate = this._selectedEndDateName = args.selectedEndDate;
	            this._watchSelectedTimeZone = this._selectedTimeZoneName = args.selectedTimeZone;
	            this._watchDisabled = this._disabledName = args.disabled;

	            this._isSelectedWatched = false;

	            //selectedChanged在数据源中的名称
	            this._selectionChangedName = args.selectionChanged;           

	            this._isSetSelectedStartDate = typeof args.selectedStartDate == "string" && !!args.selectedStartDate;
	            this._isSetSelectedEndDate = typeof args.selectedEndDate == "string" && !!args.selectedEndDate;
	            this._isSetTimeZone = typeof args.selectedTimeZone == "string" && !!args.selectedTimeZone;
	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                if (this._isSetSelectedStartDate) {
	                    this._watchSelectedStartDate = transform(args.as, this._selectedStartDateName);
	                }

	                if (this._isSetSelectedEndDate) {
	                    this._watchSelectedEndDate = transform(args.as, this._selectedEndDateName);
	                }

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }

	                if (this._isSetTimeZone) {
	                    this._watchSelectedTimeZone = transform(args.as, this._selectedTimeZoneName);
	                }
	            }

	            args.selectedStartDate = this._geValue(this._selectedStartDateName);
	            args.selectedEndDate = this._geValue(this._selectedEndDateName);
	            args.selectedTimeZone = this._geValue(this._selectedTimeZoneName);
	        },

	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)                
	                .on("selectionChanged", this, this._onSelectionChanged)               
	                .removeAttr("data-aui-rangepicker")
	                .removeAttr("data-rangepicker")
	                .rangepicker(this._args);
	        },
	        _addWatcher: function () {
	            if (this._isSetSelectedStartDate) {
	                this._addSelectedStartDateWatcher();
	            }

	            if (this._isSetSelectedEndDate) {
	                this._addSelectedEndDateWatcher();
	            }

	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data,
	                args = self.args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }

	        },       
	        _onSelectionChanged: function (e, args) {
	            var self = e.data;
	            if (args.type == "rangepicker") {
	                self._setValue(self._selectedStartDateName, args.newValue.start);
	                if (!self._isSetSelectedStartDate) {
	                    self._setValue(self._selectedEndDateName, args.newValue.end);
	                }

	                e.data._trigger(e, args, self._selectionChangedName);
	            }
	        },
	        _addSelectedStartDateWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchSelectedStartDate, function (value, last) {
	                self._isSetSelectedStartDate = true;
	                self._ele.rangepicker("option", "selectedStartDate", value);
	            });
	        },
	        _addSelectedEndDateWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchSelectedEndDate, function (value, last) {
	                self._isSetSelectedStartDate = false;
	                self._ele.rangepicker("option", "selectedEndDate", value);
	            });
	        },
	        _addselectedTimeZoneWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchSelectedTimeZone, function (value, last) {
	                self.ele.rangepicker("option", "selectedTimeZone", value);
	            });
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.rangepicker("option", "disabled", value);
	            });
	        }
	    });
	})();

/***/ },
/* 81 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.richcombobox.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;

	            if (args.displayName == undefined) {
	                $.error("'displayName' is not available！");
	            }
	            if (args.items == undefined) {
	                $.error("'items' is not available！");
	            }
	            if (args.selectedItems == undefined) {
	                $.error("'selectedItems' is not available！");
	            }

	            this._watchSelectedItems = this._selectedItemsName = args.selectedItems;

	            this._watchItems = this._itemsName = args.items;

	            this._watchDisabled = this._disabledName = args.disabled;

	            //hidden事件在数据上下文中的名称
	            this._itemClick = args.itemClick;
	            //itemsSourceChange事件在数据上下文中的名称
	            this._itemsSourceChangedName = args.itemsSourceChanged;
	            //selectedChanged事件在数据上下文中的名称
	            this._selectedChangedName = args.selectionChanged;
	            this._smartSearchName = args.smartSearch;
	            this._inputBlurName = args.inputBlur;
	            this._inputKeyupName = args.inputKeyup;

	            this._isSelectionChanging = false;
	            this._isItemsSourceChanging = false;
	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchSelectedItems = transform(args.as, this._selectedItemsName);
	                this._watchItems = transform(args.as, this._itemsName);

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }

	            if (this._isSetDisabled) {
	                args.disabled = this._geValue(this._disabledName);
	            }
	        },
	        _getTemplate: function (trim) {
	            var
	                ele = this._ele,
	                args = this._args;

	            //获取可选项模板
	            args.itemTemplate = trim(ele.children('p').children('item-template').html());
	            //获取选中项模板
	            args.selectedTemplate = trim(ele.children('p').children('selected-template').html());
	            //create new模板
	            args.createTemplate = trim(ele.children('p').children("create-template").html());
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("inputBlur", this, this._onInputBlur)
	                .on("inputKeyup", this, this._onInputKeyup)
	                .on("itemClick", this, this._onItemClick)
	                .on("itemsSourceChanged", this, this._onItemsSourceChanged)
	                .on("selectionChanged", this, this._onSelectionChanged)
					.on("smartSearch", this, this._onSmartSearch)
	                .on("shown", this, this._onShown)
	                .removeAttr("data-aui-richcombobox")
	                .removeAttr("data-richcombobox")
	                .richcombobox(this._args);
	        },
	        _addWatcher: function () {
	            //itemsSource需要先与selectedItems监听
	            this._addItemsWatcher();
	            this._addSelectedItemsWatcher();
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _onInputBlur: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._inputBlurName);
	        },
	        _onInputKeyup: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._inputKeyupName);
	        },
	        _onItemClick: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._itemClick);
	        },
	        _onItemsSourceChanged: function (e, args) {
	            var self = e.data;
	            e.stopPropagation();
	            self._isItemsSourceChanging = false;
	            self._setValue(self._itemsName, args.newValue);
	            self._trigger(e, args, self._itemsSourceChangedName);
	        },
	        _onSelectionChanged: function (e, args) {
	            var self = e.data;

	            self._setValue(self._selectedItemsName, args.newValue);
	            self._trigger(e, args, self._selectedChangedName);

	        },
	        _onSmartSearch: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._smartSearchName);
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                self._isItemsSourceChanging = true;
	                self._ele.richcombobox("itemsSource", value);
	            }, true);
	        },
	        _addSelectedItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchSelectedItems, function (value, last) {
	                self._isSelectionChanging = true;
	                self._ele.richcombobox("selectedItems", value);
	            });
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.richcombobox("option", "disabled", value);
	            });
	        }
	    });
	})();

/***/ },
/* 82 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.slider.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;

	            this._watchSelectedValueName = this._selectedValueName = args.selectedValue;
	            this._watchDisabled = this._disabledName = args.disabled;

	            this._valueChangedName = args.valueChanged;

	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;

	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchSelectedItem = transform(args.as, this._selectedItemName);

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }
	            args.selectedValue = this._geValue(this._selectedValueName);
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("valueChanged", this, this._onValueChanged)
	                .on("destroy", this, this._onDestroy)
	                .removeAttr("data-aui-slider")
	                .removeAttr("data-slider")
	                .slider(this._args);
	        },
	        _addWatcher: function () {
	            this._addSelectedValueWatcher();
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onValueChanged: function (e, args) {
	            var
	                self = e.data,
	                old = self._geValue(self._selectedValueName),
	                value = args.newValue;

	            if (old != value) {
	                self._setValue(self._selectedValueName, args.newValue);
	                self._trigger(e, args, self._valueChangedName);
	            }

	        },
	        _addSelectedValueWatcher: function () {
	            var
	                self = this,
	                vm = this._vm,
	                name = self._selectedValueName;

	            this._scope.$watch(self._selectedValueName, function (value, last) {
	                self._ele.slider("option", "selectedValue", value);
	            });
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.combobox("option", "disabled", value);
	            });
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        }
	    });
	})();

/***/ },
/* 83 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.stackpanel.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;

	            //hidden事件在数据上下文中的名称
	            this._hiddenName = args.hidden;
	            //shown事件在数据上下文中的名称
	            this._shownName = args.shown;
	        },
	        _getTemplate: function () {
	            this._ele
	                .prepend(this._ele.children('p').children())
	                .children('p').remove();
	        },
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("hidden", this, this._onHidden)
	                .on("shown", this, this._onShown)
	                .removeAttr("data-aui-stackpanel")
	                .removeAttr("data-stackpanel")
	                .stackpanel(this._args);
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data,
	                name = self._args.name;

	            if (args.type == "stackpanel") {
	                self._destroy(name);
	            };
	        },
	        _onHidden: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._hiddenName, true);
	        },
	        _onShown: function (e, args) {
	            var self = e.data;
	            self._trigger(e, args, self._shownName, true);
	        }
	    });
	})();

/***/ },
/* 84 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.switchbutton.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initMembers: function ($parse, scope, attrs) {
	            var args = this._args;

	            this._watchIsON = this._isONName = args.isON;

	            this._stateChangedName = args.stateChanged;

	            this._watchDisabled = this._disabledName = args.disabled;

	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;

	            this._isIsONWatched = false;
	        },
	        _getTemplate: function (trim) {
	            var
	                ele = this._ele,
	                args = this._args;

	            args.onTemplate = trim(ele.children('p').children('on-template').html());
	            args.offTemplate = trim(ele.children('p').children('off-template').html());
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && args.as != "") {
	                this._watchIsON = transform(args.as, this._isONName);
	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }
	            args.isONName = this._vm[this._isONName];

	            if (this._isSetDisabled) {
	                args.disabled = this._vm[this._disabledName];
	            }
	        },
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("stateChanged", this, this._onstateChanged)
	                .removeAttr("data-aui-switchbutton")
	                .removeAttr("data-switchbutton")
	                .switchbutton(this._args);
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self.vm[args.name];
	            }
	        },
	        _onstateChanged: function (e, args) {
	            var self = e.data;
	            if (!self._isIsONWatched) {
	                self._setValue(self._isONName, args.newValue);
	            }
	            self._isIsONWatched = false;
	            self._trigger(e, args, self._stateChangedName);
	        },
	        _addWatcher: function () {
	            this._addIsONWatcher.call(this);
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher.call(this);
	            }
	        },
	        _addIsONWatcher: function () {
	            var
	                self = this,
	                vm = self._vm,
	                isON = self._isONName;
	            self._scope.$watch(self._watchIsON, function (value) {
	                self._isIsONWatched = true;
	                self._ele.switchbutton("changeState", value);

	                self._isIsONWatched = false;

	            }, true);
	        },
	        _addDisabledWatcher: function () {
	            var self = this;
	            self._scope.$watch(self._watchDisabled, function () {
	                self._ele.switchbutton("disabled", self._vm[self._disabledName]);
	            });
	        }

	    });
	})();

/***/ },
/* 85 */
/***/ function(module, exports) {

	"use strict";
	if (window.angular) {
	    var aui = angular.module('aui');

	    aui.directive('auiTabControl', function ($compile, $timeout) {
	        return {
	            restrict: "AE",
	            scope: {
	                items: '=itemsField',
	                selectedIndex: '=selectedIndex',

	                contentId: '@contentField',
	                headerContent: '@headerField',
	                widgetName:'@'
	            },
	            template: '<div ng-transclude></div>',
	            replace: true,
	            transclude: true,
	            link: function (scope, iElement, iAttrs) {
	                scope.contentId = scope.contentId || 'contentId';
	                scope.headerContent = scope.headerContent || 'headerContent';
	                scope.widgetName = scope.widgetName || '';

	                // Prepend default template of tab header if there is no custom header template.
	                if (iElement.children('ul').length === 0) {
	                    var _ul = $('<ul role="tablist">' +
	                        '  <li ng-repeat="item in items"  ' +

	                        '    role="tab" tabindex="-1" aria-selected="false" aria-controls="{{item[contentId].indexOf(\'javascript\') === 0 ? \'\' : item[contentId]}}">' +
	                        '    <a tabindex="-1" aui-Repeat-Callback="readyFun()" ng-href="{{(item[contentId].indexOf(\'javascript\') === 0) ? item[contentId] : (\'#\' + item[contentId])}}">{{item[headerContent]}}</a>' +
	                        //'    <span class="arrow"></span>' +
	                        '    <ul role="tablist" ng-if="item.items">' +
	                        '      <li ng-repeat="item in item.items"  ' +
	                        '        role="tab" tabindex="-1" aria-selected="false" aria-controls="{{item[contentId].indexOf(\'javascript\') === 0 ? \'\' : item[contentId]}}">' +
	                        '        <div class="afui-icon-dot fi-dot-bs"></div>' +
	                        '        <a tabindex="-1" ng-href="{{(item[contentId].indexOf(\'javascript\') === 0) ? item[contentId] : (\'#\' + item[contentId])}}">{{item[headerContent]}}</a>' +
	                        '      </li>' +
	                        '    </ul>' +
	                        '  </li>' +
	                        '</ul>');
	                    iElement.prepend(_ul);
	                    var compiled = $compile(_ul.contents())(scope);
	                }

	                iElement.on('selectedIndexChanged', scope, function (e, d) {
	                    if (d.newValue !== e.data.selectedIndex) {
	                        e.data.selectedIndex = d.newValue;
	                        e.data.$apply();
	                        return false;
	                    }
	                });

	                scope.$watch('selectedIndex', function (newValue, oldValue, scope) {
	                    if (newValue !== oldValue && iElement.data('aui.tabcontrol')) {
	                        iElement.tabcontrol('option', 'selectedIndex', scope.selectedIndex);
	                        scope.$emit('selectedIndexChanged', { newValue: newValue, oldValue: oldValue });
	                    }
	                });
	                scope.readyFun = function () {
	                    setTimeout(function () { //当 repeat 结构最后一个生成结束后 初始化或者重置 tabcontrol
	                        if (scope.alreadyInit) {
	                            iElement.tabcontrol("resetElement")
	                        } else {
	                            scope.alreadyInit = true;
	                            iElement.data('aui.tabcontrol', iElement.tabcontrol({
	                                tabcontrolClass: scope.tabcontrolClass,
	                                selectedIndex: scope.selectedIndex
	                            }), 20);
	                        }
	                       
	                    })
	                    var eventName = scope.widgetName + "domComplete";
	                    scope.$emit(eventName);

	                }
	                scope.$on("resetTabcontrol", function () {
	                    if (scope.alreadyInit) {
	                        iElement.tabcontrol("resetElement")
	                    } else {
	                        scope.alreadyInit = true;
	                        iElement.data('aui.tabcontrol', iElement.tabcontrol({
	                            tabcontrolClass: scope.tabcontrolClass,
	                            selectedIndex: scope.selectedIndex
	                        }));
	                    }
	                    
	                }
	                    );
	                $(document).ready(function () {
	                    var li = $('>ul>li', iElement)// 当通过if控制显隐的时候 scope.alreadyInit 会被清空

	                    if (!scope.alreadyInit && li.length) {//如果doucumet ready 事件发生时 DOM 结构已经生成完毕 则直接初始化
	                        scope.alreadyInit = true;
	                        iElement.data('aui.tabcontrol', iElement.tabcontrol({
	                            tabcontrolClass: scope.tabcontrolClass,
	                            selectedIndex: scope.selectedIndex
	                        }));
	                    }

	                   
	                })
	            }
	        };
	    });
	}

/***/ },
/* 86 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');

	    aui.directive('auiTextboxSearch', function () {
	        return {
	            restrict: "E",
	            scope: {
	                onsearch: '&',
	                onstop: '&',
	                placeholder: '=',
	                title: '=',
	                disabled:'='
	            },
	            template:
	                '<div class="textbox textbox-search" data-toggle="aui-textbox-search" ng-class="{disabled:disabled}">' +
	                '  <input type="text" placeholder="{{placeholder}}" title="{{title}}" ng-disabled="disabled" />' +
	                '  <div class="afui-icon-search fi-search-a"></div>' +
	                '</div>',
	            replace: true,
	            transclude: true,
	            link: function (scope, element, attrs) {
	                element.removeAttr("disabled");
	                element.removeAttr("title");
	                element.on('searched', scope.onsearch())
	                    .on('stopped', scope.onstop());
	            }
	        };
	    })
	    .directive('auiTextboxTel', function () {
	        return {
	            restrict: "E",
	            scope: {
	                value: '=',
	                contryValue: '@',
	                contryReadonly: '@',
	                maxlength: '@'
	            },
	            template: function (element, scope) {
	                return '<div class="textbox textbox-tel" data-toggle="aui-textbox-tel">' +
	                    '  <span class="text1">+</span>' +
	                    '  <input class="country" type="tel" maxlength="3"' + (scope.contryValue === undefined ? '' : ' value="' + scope.contryValue + '"') + (scope.contryReadonly ? ' readonly="readonly"' : '') + ' />' +
	                    '  <span class="text2">-</span>' +
	                    '  <input class="tel" type="tel" ng-model="value"' + (scope.maxlength === undefined ? '' : 'maxlength="' + scope.maxlength + '"') + ' />' +
	                    '</div>';
	            },
	            replace: true,
	            transclude: true,
	            link: function (scope, element, attrs) {
	                
	            }
	        };
	    });
	}

/***/ },
/* 87 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("aui.tree.directive", {
	        _template: '<div></div>',
	        _initMembers: function () {
	            this._renderName = this._args.render;
	            this._widgetName = this._args.widget;
	        },
	        _convertAs: function (transform) {
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .removeAttr("data-aui-tree")
	                .removeAttr("data-tree")
	                [this._args.widget](this._args);

	            this._onRender();
	        },
	        _onRender: function () {
	            var e = jQuery.Event();
	            e.data = this;
	            e.type = "render";
	            this._trigger(e, {}, this._renderName);
	        },
	        _addWatcher: function () {

	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                self._isItemsSourceChanging = true;
	                self._ele.tree("itemsSource", value);
	            }, true);
	        }
	    });
	})();

/***/ },
/* 88 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');
	    
	    aui.directive('auiWizard', function ($compile, $timeout) {
	        return {
	            restrict: "AE",
	            scope: {
	                contentId: '@contentField',
	                headerContent: '@headerField',
	                stepText: '@stepField',

	                items: '=itemsField',
	                selectedIndex: '=selectedIndex',
	                stepCount: '=stepCount'
	            },
	            template: '<div ng-transclude></div>',
	            replace: true,
	            transclude: true,
	            link: function (scope, iElement, iAttrs) {
	                scope.contentId = scope.contentId || 'contentId';
	                scope.headerContent = scope.headerContent || 'headerContent';
	                // Prepend default template of tab header if there is no custom header template.
	                if (iElement.children('ul').length === 0) {
	                    var _ul = $(
	                        '<ul role="tablist">' +
	                        '  <li ng-repeat="item in items" ' +
	                        '    role="tab" tabindex="-1" aria-selected="false" ' +
	                        '    aria-controls="{{item[contentId].indexOf(\'javascript\') === 0 ? \'\' : item[contentId]}}" ' +
	                        '    >' +
	                        '    <a tabindex="-1" ' +
	                        '      ng-href="{{item[contentId].indexOf(\'javascript\') === 0 ? item[contentId] : (\'#\' + item[contentId])}}">' +
	                        '      <div class="step" ng-bind="item[stepText]"></div>' +
	                        '      <div class="title" ng-bind="item[headerContent]"></div>' +
	                        '    </a>' +
	                        '    <ul role="tablist" ng-if="item.items">' +
	                        '      <li ng-repeat="item in item.items" ' +
	                        '        role="tab" tabindex="-1" aria-selected="false" ' +
	                        '        aria-controls="{{item[contentId].indexOf(\'javascript\') === 0 ? \'\' : item[contentId]}}"' +
	                        '        >' +
	                        '        <div class="afui-icon-dot fi-dot-bs"></div>' +
	                        '        <a tabindex="-1" ng-href="{{(item[contentId].indexOf(\'javascript\') === 0) ? item[contentId] : (\'#\' + item[contentId])}}">{{item[headerContent]}}</a>' +
	                        '      </li>' +
	                        '    </ul>' +
	                        '  </li>' +
	                        '</ul>');
	                    iElement.prepend(_ul);
	                    var compiled = $compile(_ul.contents())(scope);
	                }

	                iElement.on('selectedIndexChanged', scope, function (e, d) {
	                    if (d.newValue !== e.data.selectedIndex) {
	                        e.data.selectedIndex = d.newValue;
	                        e.data.$apply();
	                    }
	                }).on('stepCountChanged', scope, function (e, d) {
	                    if (d.newValue !== e.data.stepCount) {
	                        e.data.stepCount = d.newValue;
	                        e.data.$apply();
	                    }
	                });

	                scope.$watch('stepCount', function (newValue, oldValue, scope) {
	                    if (newValue !== oldValue && iElement.data('aui.tabcontrolwizard')) {
	                        iElement.tabcontrolwizard('option', 'stepCount', scope.stepCount);
	                        scope.$emit('stepCountChanged', { newValue: newValue, oldValue: oldValue });
	                    }
	                });
	                scope.$watch('selectedIndex', function (newValue, oldValue, scope) {
	                    if (newValue !== oldValue && iElement.data('aui.tabcontrolwizard')) {
	                        iElement.tabcontrolwizard('option', 'selectedIndex', scope.selectedIndex);
	                        scope.$emit('selectedIndexChanged', { newValue: newValue, oldValue: oldValue });
	                    }
	                });

	                $(document).ready(function () {
	                    iElement.data('aui.tabcontrolwizard', iElement.tabcontrolwizard({
	                        tabcontrolClass: scope.tabcontrolClass,
	                        selectedIndex: scope.selectedIndex,
	                        stepCount: scope.stepCount
	                    }));
	                })
	            }
	        };
	    });
	}

/***/ },
/* 89 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');

	    aui.directive('auiScrolling',['$parse', function (parse) {
	        return {
	            restrict: "AE",
	            scope: false,
	            template: function(tElement,tAttrs){
	                        var _html = '';
	                        _html += '<div style="height: 150px; width: 200px; overflow-y: scroll; padding-left:30px;padding-right:30px;border:solid;display:inline-block;"></div>';
	                      return _html;
	                    },
	            replace: true,
	            transclude: true,
	           
	            controller: function ($scope, $element, $attrs, $transclude) {
	                var strArr = [], templateStr, items, timeLabel, titleLabel;
	                var parseFun = parse($attrs.listName);//parse the list
	                items = parseFun($scope);// access list
	                timeLabel = $attrs.timeLabel || "time";
	                titleLabel = $attrs.titleLabel || "title";
	                for (var i in items) {
	                    var item = items[i];
	                  //  item.time = '00-0' + i;
	                    strArr.push('<div id="' + item.id + '"><i>' + item[timeLabel] + '</i>&nbsp &nbsp<a>' + item[titleLabel] + '</a></div>');
	                }
	                templateStr = strArr.join('')
	                $element.append(templateStr);

	                $scope.$on('srcollChange', function (event,selector,video) {
	                    var selectedElement = $(selector).get(0);
	                    selectedElement.scrollIntoView(true);
	                });

	            }

	        };
	    }]);


	}

/***/ },
/* 90 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');
	    
	    aui.directive('auiNav',['$timeout', function ($setTimeout) {
	        return {
	            restrict: "A",
	            scope: false,
	            link: function (scope, element, attrs) {
	                var ul, li, liSelected, selectedIndex;
	              
	                function loop(){
	                    var li = $('li', element);
	                    li.length>0 ? $setTimeout(initEvent, 50)
	                      : $setTimeout(loop,50);

	                }
	                function initDefaultIndex() {
	                    ul = $('ul', element);
	                    li = $('li', element);
	                    li.removeClass('select');
	                    selectedIndex = ~~attrs.auiNav;//~~将字符串转为数字不能等效为数字都转为零
	                    liSelected = li[selectedIndex]
	                    liSelected = $(liSelected);
	                    liSelected.addClass('select');
	                }
	                function initEvent() {
	                    initDefaultIndex();
	                    ul.on("click", 'li:not(".select")', function (event) {//通过事件冒泡在ul上注册事件li可以动态插入
	                        li = $('li', element);
	                        li.removeClass("select");
	                        $(this).addClass("select");
	                    });
	                   


	                    attrs.$observe('auiNav', function (index) {
	                            initDefaultIndex();
	                    });//监控属性变化根据VM中的值动态改变选中NAV
	                   
	                }

	                loop();
	                
	            }
	        };
	    }]);
	    

	}


/***/ },
/* 91 */
/***/ function(module, exports) {

	
	if (window.angular) {
	    var aui = angular.module('aui');
	    aui.directive("auiSelect", function () {
	        return {
	            restrict: 'EA',
	            scope:{
	                obj:'=selectModel'
	            },
	            template: function (tElement, tAttrs) {
	                var _html = '';
	                _html += '<aui-combobox data-combobox="{'+"disabled:'obj.disabled', dataTextField:'{{obj.key}}', dataValueField:'{{obj.value}}', items:'obj.items', selectedItem:'obj.selectedItem'"+'}"></aui-combobox>';
	                return _html;
	            }
	        };
	    })
	}

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(93);
	__webpack_require__(94);

	__webpack_require__(95);


/***/ },
/* 93 */
/***/ function(module, exports) {

	(function ($) {
	    "use strict";
	    var
	        uuid = -1,
	        _constant = {
	            MULTICOMBOBOX_CLASS: 'rp-filter',
	            INPUT_CLASS: 'rp-filter-input',
	            CONTENT_CLASS: 'rp-filter-content',
	            CONTENT_TEXT_CLASS: 'rp-filter-content-text',
	            DROPDOWN_CLASS: 'rp-filter-dropdown',
	            ICON_DROPDOWN: 'fi-triangle-down-bs',
	            POPUP_CLASS: 'rp-filter-popup',
	            LISTBOX_CLASS: 'rp-filter-listbox',
	            SELECTION_ITEM_CLASS: 'rp-filter-selection-item',
	            SELECTION_LABEL_CLASS: 'rp-filter-selection-span',
	            MOUSEENTER_CLASS: 'rp-filter-mouseenter',
	            BUTTON_AREA_CLASS: 'rp-filter-button-area',
	            BUTTON_CLASS: 'rp-filter-popup-button',
	            SELECT_ALL_CLASS: 'rp-filter-select-all',
	            FOCUS_CLASS: 'rp-filter-focus',
	            HIDDEN_CLASS: 'rp-filter-hidden'
	        };

	    $.widget("ex.rpfilter", {
	        inputId: 'rp-filter-input-',
	        contentId: 'rp-filter-content-',
	        dropdownId: 'rp-filter-dropdownId-',
	        popupId: 'rp-filter-popup-',
	        listboxId: 'rp-filter-listbox-',
	        selectAllId: 'rp-filter-selectall-',
	        okId: 'rp-filter-ok-',
	        cancelId: 'rp-filter-cancel-',
	        options: {
	            isMulti: true,
	            //是否与table
	            isTable: false,
	            popupWidth: null,
	            popupHeight: null,
	            dataCheckedField: null,
	            dataTextField: null,
	            dataDynamicField: null,
	            noneTitleText: $$.I18N.multicombobox.noneTitle,
	            allTitleText: $$.I18N.multicombobox.allTitle,
	            selectedItemsTitleText: $$.I18N.multicombobox.selectedXItemsTitle,
	            noneText: $$.I18N.multicombobox.none,
	            allText: $$.I18N.multicombobox.allText,
	            selectAllText: $$.I18N.multicombobox.selectAllCheckbox,
	            selectedItemsTemplate: $$.I18N.multicombobox.selectedXItems,
	            selectedItemTemplate: $$.I18N.multicombobox.selectedXItem,
	            ok: $$.I18N.multicombobox.ok,
	            cancel: $$.I18N.multicombobox.cancel,
	            //获取或设置一个方法，该方法在选中项更改时触发。
	            selectionChanged: $.noop

	        },
	        _create: function () {
	            this._initMember()
	                ._createMulticombobox()
	                ._loaded()
	                ._initEvent()
	        },
	        _setOption: function (key, value) {

	        },
	        _initMember: function () {
	            this._checkRequired();
	            this._initId();

	            this._isMulti = this.options.isMulti;
	            this._items = [];
	            this._textName = this.options.dataTextField;
	            this._checkName = this.options.dataCheckedField;
	            this._dynamicName = this.options.dataDynamicField;

	            this.$body = $("body");
	            this.element.addClass(_constant.MULTICOMBOBOX_CLASS);
	            return this;
	        },
	        _checkRequired: function () {
	            if (typeof this.options.dataCheckedField != "string" || !this.options.dataCheckedField) {
	                $.error('dataCheckedField is undefined');
	            }
	            if (typeof this.options.dataTextField != "string" || !this.options.dataTextField) {
	                $.error('dataTextField is undefined');
	            }
	        },
	        _initId: function () {
	            ++uuid;

	            this.inputId += uuid;
	            this.contentId += uuid;
	            this.dropdownId += uuid;
	            this.popupId += uuid;
	            this.listboxId += uuid;
	            this.selectAllId += uuid;
	            this.okId += uuid;
	            this.cancelId += uuid;
	        },
	        _createMulticombobox: function () {
	            var
	                h = -1,
	                html = [];

	            html[++h] = '<div class="' + _constant.CONTENT_CLASS + '"><div id="' + this.contentId + '" class="' + _constant.CONTENT_TEXT_CLASS + '"> </div></div>';
	            html[++h] = '<div id="' + this.dropdownId + '" unselectable="on" class="' + _constant.DROPDOWN_CLASS + ' ' + _constant.ICON_DROPDOWN + '" ></div>';

	            html[++h] = '<input id="' + this.inputId + '" placeholder="' + this.options.waterMark + '" class="' + _constant.INPUT_CLASS + '" autocomplete="off" role="combobox" aria-haspopup="true" aria-expanded="false" aria-autocomplete="list" wrap="off" readonly unselectable="on"/>';
	            this.element.html(html.join(''));

	            this.$body.append(this._createPopup());

	            return this;
	        },
	        _createPopup: function () {
	            var
	                h = -1,
	                html = [];

	            html[++h] = '<div data-bind="stopBindings:filter">';
	            html[++h] = '<div class="' + _constant.POPUP_CLASS + '" id="' + this.popupId + '">';

	            if (this._isMulti) {
	                html[++h] = '<span class="' + _constant.SELECTION_LABEL_CLASS + ' ' + _constant.SELECT_ALL_CLASS + '">';
	                html[++h] = '<input id="' + this.selectAllId + '" type="checkbox" />';
	                html[++h] = '<span>' + this.options.selectAllText + '</span>';
	                html[++h] = '</span>';
	            }

	            //list
	            html[++h] = '<div class="' + _constant.LISTBOX_CLASS + '" id="' + this.listboxId + '" role="listbox"  >';
	            html[++h] = '</div>';

	            if (this._isMulti) {
	                //button
	                html[++h] = '<div class="' + _constant.BUTTON_AREA_CLASS + '">';
	                html[++h] = '<span id="' + this.okId + '" class="' + _constant.BUTTON_CLASS + '" style="margin-right:30px;">' + this.options.ok + '</span>';
	                html[++h] = '<span id="' + this.cancelId + '" style="margin-right:20px;" class="' + _constant.BUTTON_CLASS + '">' + this.options.cancel + '</span>';
	                html[++h] = '</div>';
	            }


	            html[++h] = '</div>';
	            html[++h] = '</div>';

	            return html.join('');
	        },
	        _loaded: function () {

	            this.$input = this.element.children('#' + this.inputId);
	            this.$content = this.element.find("#" + this.contentId);
	            this.$dropdown = this.element.children('#' + this.dropdownId);

	            this.$popup = this.$body.find('#' + this.popupId);
	            this.$listbox = this.$popup.children('#' + this.listboxId);
	            this.$selectAll = this.$popup.find("#" + this.selectAllId);
	            this.$ok = this.$popup.find("#" + this.okId);
	            this.$cancel = this.$popup.find("#" + this.cancelId);

	            //设置高度
	            if (this.options.height == null) {
	                this.options.height = 38;
	            }
	            this._setWidth()
	                ._setHeight()
	                ._setPopupWidth();

	            this._updatePopupPosition();

	            return this;
	        },
	        _initEvent: function () {
	            $$.close(this.element, "rpfilter", "hide");

	            this._on($(window), {
	                resize: function () {
	                    this._updatePopupPosition();
	                }
	            });

	            this.element
	                .on('mousedown', this, this._onContentMousedown)
	                .on('mouseenter', this, this._onContentMouseEnter)
	                .on('mouseleave', this, this._onContentMouseLeave)
	                .on('click', this, this._onContentClick);

	            this.$input
	                .on('keydown', this, this._onContentKeydown)
	                .on('focus', this, this._onInputFocus)
	                .on('blur', this, this._onInputBlur);

	            this.$popup
	                .on('mousedown', this, this._onselectionMouseDown)
	                .on('mousewheel', this, function (e) {
	                    var e = e || event;
	                    var _this = $(this).children(".rp-filter-listbox")[0],
	                        _hasScroll = _this.scrollHeight > _this.clientHeight || _this.offsetHeight > _this.clientHeight,
	                        _scrollTop = _this.scrollTop <= 0 && e.deltaY > 0,
	                        _scrollBottom = _this.scrollTop >= _this.scrollHeight - _this.offsetHeight && e.deltaY < 0,
	                        _scrollEnd = _hasScroll && (_scrollTop || _scrollBottom),
	                        _inPopup = $(e.target).closest(this).length > 0 && $(e.target).closest(_this).length == 0;
	                    if (!_hasScroll || _scrollEnd || _inPopup) {
	                        e.preventDefault();
	                    }
	                    $$.closeExcept(e.data.element, true);
	                });

	            this.$selectAll.on('click', this, this._onSelectAllClick);
	            this.$ok.on('click', this, this._onOKClick);
	            this.$cancel.on('click', this, this._onCancelClick);

	            return this;
	        },
	        //更新popup部件的位置
	        _updatePopupPosition: function () {
	            var self = this;
	            self.$popup.position({
	                my: "left top",
	                at: "left bottom",
	                of: self.element,
	                collision: "flip",
	                within: self.options.within
	            });

	        },
	        //窗体大小改变时触发
	        _onWindowResize: function (e) {
	            e.data._updatePopupPosition();
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            if (args) {
	                args.type = "multicombobox";
	            }

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        _setWidth: function () {
	            //this.element.width(this.options.width);
	            //this.$input.width(this.element.width() - 22);

	            return this;
	        },
	        _setHeight: function () {
	            var height = this.options.height;
	            this.element[0].style.height = height + "px";
	            //height -= 2;
	            //this.$input.height(height);

	            return this;
	        },
	        _setPopupWidth: function () {
	            if (this.options.popupWidth) {
	                this.$popup.width(this.options.popupWidth)
	            } else {
	                this.$popup.width(this.element.width());
	            }
	            if (this.options.popupHeight) {
	                this.$listbox.height(this.options.popupHeight);
	            }

	            return this;
	        },
	        _hide: function () {
	            this._isOpened = false;
	            $$.closeVisibility(this.element, false);
	            this.$input.attr("aria-expanded", false).focus();
	            this.$popup.hide();
	            if (!this._isCancel) {
	                this._onSelectionChanged();
	            } else {
	                this._cancel();
	            }
	        },
	        _checkedAssert: function (item) {
	            return item[this._checkName] == true;
	        },
	        _onSelectionChanged: function () {
	            var self = this;
	            this._updateContent();

	            function filterValue(items) {
	                return items.filter(function (item) {
	                    return item[self._checkName] == true;
	                });
	            }
	            function getSelectAll(items) {
	                return filterValue(items) ? filterValue(items).length == items.length : false;
	            }
	            this._trigger("selectionChanged", null, $$.Event({
	                element: self.element,
	                newValue: {
	                    isSelectAll: getSelectAll(self._items),
	                    items: filterValue(self._items)
	                },
	                oldValue: {
	                    isSelectAll: getSelectAll(self._old),
	                    items: filterValue(self._old)
	                }
	            }));
	        },
	        _updateContent: function () {
	            var
	                i = 0,
	                items = this._items,
	                count = 0,
	                text,
	                title,
	                checkIndex = 0,
	                c = items.length;

	            for (; i < c; i++) {
	                if (items[i][this._checkName]) {
	                    checkIndex = i;
	                    ++count;
	                }
	            }

	            if (count == 0) {
	                text = this.options.noneText;
	                title = this.options.noneTitleText;
	            } else if (count == c) {
	                text = this.options.allText;
	                title = this.options.allTitleText;
	            } else if (count == 1) {
	                title = items[checkIndex][this._textName];
	                text = this.options.selectedItemTemplate.format(items[checkIndex][this._textName]);
	            } else {
	                title = this.options.selectedItemsTitleText.format(count);
	                text = this.options.selectedItemsTemplate.format(count);

	            }

	            this.$input.val(text);
	            this.$content.text(text);
	            this.element.attr("title", title);
	        },
	        _updateCheckbox: function () {
	            var
	                i = 0,
	                items = this._items,
	                c = items.length;

	            for (; i < c; i++) {
	                this.$checkboxes[i].prop("checked", items[i][this._checkName]);
	            }

	        },
	        _cancel: function () {
	            $.extend(true, this._items, this._old);
	            this._updateCheckbox();
	            this.$selectAll.prop('checked', this._allChecked);
	        },
	        _show: function () {
	            var index = this.options.selectedIndex;

	            this._isCancel = true;
	            this._isOpened = true;
	            this._old = [];
	            this._allChecked = this.$selectAll.prop('checked');

	            $.extend(true, this._old, this._items);
	            $$.closeVisibility(this.element, true);

	            this.$popup.show();
	            this.$listbox.scrollLeft(0);
	            this._updatePopupPosition();
	            this.$input.focus();
	            this.$input.attr("aria-expanded", true);

	            this._checkHasSelect();
	        },
	        _onItemsSourceChanged: function (src) {
	            var
	                i,
	                c = src.length,
	                l = this._items.length;
	            if (this.$checkbox) l = Math.min(l, this.$checkbox.length);

	            this._items = src;
	            if (l < c) {
	                var h = -1, html = [];
	                //添加新项
	                for (; l < c; l++) {
	                    html[++h] = '<span class="' + _constant.SELECTION_ITEM_CLASS + ' ' + _constant.SELECTION_LABEL_CLASS + '">';
	                    if (this._isMulti) {
	                        html[++h] = '<input type="checkbox" />';
	                    } else {
	                        html[++h] = '<input class="' + _constant.HIDDEN_CLASS + '" type="checkbox"  />';
	                    }
	                    html[++h] = '<span></span>';
	                    html[++h] = '</span>';
	                }
	                this.$listbox.append(html.join(''));

	            } else if (l > c) {
	                //删除多余的项
	                for (i = c; i < l; i++) {
	                    $(this.$selection[i]).empty().remove();
	                }
	            }
	            this.$selection = this.$listbox.children('.' + _constant.SELECTION_ITEM_CLASS);

	            this.$checkbox = this.$selection.find('input')
	                .off()
	                .on("click", this, this._onCheckboxClick);
	            this.$checkboxes = [];
	            this.$text = this.$selection.find('span');

	            //更新值
	            for (i = 0; i < c; i++) {
	                this.$checkboxes[i] = $(this.$checkbox[i]);
	                this.$checkboxes[i]
	                    .data("index", i)
	                    .prop("checked", src[i][this._checkName])
	                    .prop("disabled", src[i][this._dynamicName]);
	                this.$text[i].innerText = src[i][this._textName];
	            }
	            this._checkSelectAll();
	            this._updateContent();
	        },
	        _onInputFocus: function (e) {
	            var self = e.data;

	            self.element.addClass(_constant.FOCUS_CLASS);
	        },
	        _onInputBlur: function (e) {
	            var self = e.data;

	            self.element.removeClass(_constant.FOCUS_CLASS);
	        },
	        _onDropdownClick: function (e) {
	            var self = e.data;
	            self.$input.focus();
	            if (self.options.disabled === false) {
	                if (self._isOpened) {
	                    self._hide();
	                } else {
	                    self._show();
	                }
	            }
	            self._isContentMouseDown = false;
	        },
	        _onContentMouseEnter: function (e) {
	            var self = e.data;
	            if (self.options.disabled === false) {
	                self.element.addClass(_constant.MOUSEENTER_CLASS);
	            }
	        },
	        _onContentMouseLeave: function (e) {
	            var self = e.data;
	            self.element.removeClass(_constant.MOUSEENTER_CLASS);
	            //self._isContentMouseDown = false;
	        },
	        _onContentKeydown: function (e) {
	            var self = e.data;
	            if (self.options.disabled === false) {
	                switch (e.which) {
	                    case $.ui.keyCode.ENTER:
	                        self._onElementEnter();
	                        break;
	                    case $.ui.keyCode.LEFT:
	                    case $.ui.keyCode.RIGHT:
	                    case $.ui.keyCode.DOWN:
	                    case $.ui.keyCode.UP:
	                        e.preventDefault();
	                        break;
	                }
	            }
	        },
	        _onElementEnter: function () {
	            if (this._isOpened) {
	                this._hide();
	            } else {
	                this._show();
	            }
	        },
	        _onContentMousedown: function (e) {
	            var self = e.data;

	            $$.closeExcept(self.element, true);
	        },
	        _onContentClick: function (e) {
	            var self = e.data;
	            if (self.options.disabled === false) {
	                if (self._isOpened) {
	                    self._hide();
	                } else {
	                    self._show();
	                }
	            }
	            return self;
	        },
	        _onselectionMouseDown: function (e) {
	            e.stopPropagation();
	            e.preventDefault();
	        },
	        _onSelectAllClick: function (e) {
	            var
	                i = 0,
	                self = e.data,
	                c = self._items.length,
	                checked = self.$selectAll.prop('checked');

	            for (; i < c; i++) {
	                if (!self._items[i][self._dynamicName]) {
	                    self.$checkbox.eq(i).prop('checked', checked);
	                    self._items[i][self._checkName] = checked;
	                }
	            }
	            self._checkHasSelect();
	        },
	        _checkSelectAll: function () {
	            var
	                i = 0,
	                count = 0,
	                items = this._items,
	                c = items.length;

	            for (; i < c; i++) {
	                if (items[i][this._checkName] == true) {
	                    count++;
	                }
	            }

	            if (count == c) {
	                //select All
	                this.$selectAll.prop("checked", true);
	            } else {
	                this.$selectAll.prop("checked", false);
	            }
	        },
	        _onCheckboxClick: function (e) {
	            var
	                self = e.data,
	                current = $(e.target),
	                i = current.data('index');

	            self._items[i][self._checkName] = current.prop("checked");

	            if (current.prop("checked")) {
	                self._checkSelectAll();
	            } else {
	                self.$selectAll.prop("checked", false);
	            }

	            if (!self._isMulti) {
	                self._onSelectionClick(i);
	            }

	            self._checkHasSelect();
	        },
	        _onSelectionClick: function (index) {
	            var
	                i = 0,
	                c = this._items.length;
	            this._isCancel = false;

	            for (; i < c; i++) {
	                this._items[i][this._checkName] = false;
	            }
	            this._items[index][this._checkName] = true;

	            this._hide();
	        },
	        _onOKClick: function (e) {
	            if ($(this).attr("disabled") == "disabled") return false;
	            var self = e.data;
	            self._isCancel = false;
	            self._hide();
	        },
	        _onCancelClick: function (e) {
	            var self = e.data;
	            self._isCancel = true;
	            self._hide();
	        },
	        //检查是否有选中项
	        _checkHasSelect: function () {
	            var self = this,
	                opt_check = self.options.hasSelect,
	                checkName = self._checkName;
	            if (!opt_check) return false;

	            function getSelect(items) {
	                var self = this,
	                    _hasSelect = false;
	                $.each(items, function (index, obj) {
	                    _hasSelect = obj[checkName] || _hasSelect;
	                })
	                return _hasSelect;
	            }

	            if (getSelect(self._items)) {
	                self.$ok.removeAttr("disabled");
	            } else if (!getSelect(self._items)) {
	                self.$ok.attr("disabled", "disabled");
	            }
	        },
	        //关闭可选项区域
	        hide: function (e) {
	            var e = e || window.event,
	                self = this;
	            if (self.element.parents(".aui-messagebox").length == 0) {
	                if (e.type == "mousewheel" || e.clientX > document.documentElement.clientWidth || e.clientY > document.documentElement.clientHeight) return false;
	            }
	            if (self._isOpened) {
	                self._hide();
	            }

	        },
	        selectedItems: function () {
	            var self = this;
	            return this._items.filter(function (item) {
	                return item[self._checkName] == true;
	            });
	        },
	        itemsSource: function (src) {
	            if ($.isArray(src) && src.length >= 0) {
	                this._onItemsSourceChanged(src);
	            } else {
	                return this._items;
	            }
	        }
	    });
	})(jQuery);

/***/ },
/* 94 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$directive("ex.rpfilter.directive", {
	        _template: '<div><p ng-transclude></p></div>',
	        _initMembers: function () {
	            var args = this._args;

	            if (args.items == undefined) {
	                $.error("'items' is not available！");
	            }

	            this._watchItems = this._itemsName = args.items;
	            this._watchDisabled = this._disabledName = args.disabled;


	            this._selectionChangedName = args.selectionChanged;


	            this._isSetDisabled = typeof args.disabled == "string" && !!args.disabled;
	        },
	        _convertAs: function (transform) {
	            var args = this._args;
	            if (typeof args.as == "string" && !!args.as) {
	                this._watchItems = transform(args.as, this._itemsName);

	                if (this._isSetDisabled) {
	                    this._watchDisabled = transform(args.as, this._disabledName);
	                }
	            }
	        },
	        _getTemplate: function (trim) {
	        },
	        //初始化控件
	        _initWidget: function () {
	            this._ele
	                .on("destroy", this, this._onDestroy)
	                .on("selectionChanged", this, this._onSelectionChanged)
	                .removeAttr("data-ex-rpfilter")
	                .removeAttr("data-rpfilter")
	                .rpfilter(this._args);
	        },
	        _addWatcher: function () {
	            //itemsSource需要先与selectedItems监听
	            this._addItemsWatcher();
	            if (this._isSetDisabled) {
	                this._addDisabledWatcher();
	            }
	        },
	        _onDestroy: function (e, args) {
	            var
	                self = e.data.self,
	                args = self._args;
	            if (typeof args.name == "string" && !!args.name) {
	                delete self._vm[args.name];
	            }
	        },
	        _onSelectionChanged: function (e, args) {
	            var self = e.data;

	            //self._setValue(self._selectedItemsName, args.newValue);
	            self._trigger(e, args, self._selectionChangedName);
	        },
	        _addItemsWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchItems, function (value, last) {
	                self._ele.rpfilter("itemsSource", value);
	            }, true);
	        },
	        _addDisabledWatcher: function () {
	            var self = this;

	            this._scope.$watch(self._watchDisabled, function (value, last) {
	                self._ele.rpfilter("option", "disabled", value);
	            });
	        }
	    });
	})();

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * @author fqwu
	 */
	(function ($, $$) {
	    "use strict";
	    if (ko.utils) {
	        ko.unwrap = ko.utils.unwrapObservable;
	        ko.bindingHandlers.switchbutton = {
	            init: function (element, valueAccessor, allBindingsAccessor) {
	                var
	                    element = $(element),
	                    options = valueAccessor(),
	                    value = ko.toJS(ko.unwrap(options)),
	                    isDisabled = options.disabled,
	                    isON = options.isON,
	                    isDisabledObservable = ko.isObservable(isDisabled),
	                    isONObservable = ko.isObservable(isON),
	                    value = ko.toJS(ko.unwrap(options)),
	                    executeEventHandler = $$.executeEventHandler,
	                    stateChanged = value.stateChanged,
	                    isEnabledChanged = value.isEnabledChanged;

	                if (isDisabledObservable) {
	                    isDisabled.subscribe(function () {
	                        element.switchbutton("option", "disabled", isDisabled());
	                    });
	                }
	                if (isONObservable) {
	                    isON.subscribe(function (newVlaue) {
	                        element.switchbutton("option", "isON", isON());
	                    });
	                }
	                $(element).switchbutton(value);

	                if (isONObservable) {
	                    element.switchbutton("option", "stateChanged", function (e, args) {
	                        isON(args.newValue);
	                        executeEventHandler(null, "stateChanged", stateChanged, e, args);
	                    });
	                }
	                if (isDisabledObservable) {
	                    element.switchbutton("option", "isEnabledChanged", function (e, args) {
	                        isDisabled(args.newValue);
	                        executeEventHandler(null, "isEnabledChanged", isEnabledChanged, e, args);
	                    });
	                }

	                return { 'controlsDescendantBindings': true };
	            }
	        };
	    }

	    var _constant = {
	        SWITCH_BUTTON_CLASS: "aui-switchbutton",
	        SWITCH_BUTTON_DISABLED_CLASS: "aui-switchbutton-disabled",
	        RULER_CLASS: "aui-switchbutton-ruler",
	        RULER_ON_CONTAINER_CLASS: "aui-switchbutton-ruler-on-container",
	        RULER_OFF_CONTAINER_CLASS: "aui-switchbutton-ruler-off-container",
	        ICON_ON_TEMPLATE: "aui-switchbutton-icon-on",
	        ICON_OFF_TEMPLATE: "aui-switchbutton-icon-off",
	        ICON_ON: "fi-circle-b",
	        ICON_OFF: "fi-close-bs",
	        RULER_OFF_CLASS: "aui-switchbutton-ruler-off",
	        SWITCH_CLASS: "aui-switchbutton-switch",
	        OFF_HOVER: "aui-off-hover"
	    },
	    uuid = -1;

	    $.widget("aui.switchbutton", {
	        options: {
	            isON: true,
	            width: null,
	            height: null,
	            switchWidth: null,
	            disabled: false,
	            onTemplate: null,
	            offTemplate: null,
	            isEnabledChanged: $.noop,
	            stateChanged: $.noop,
	            parameters: {},
	        },
	        id: "aui-switchbutton-",
	        //标尺部件对应的jQuery对象
	        $ruler: null,
	        //ruler在打开状态下显示的容器对应的jQuery对象
	        $onContainer: null,
	        //ruler在关闭状态下显示的容器对应的jQuery对象
	        $offContainer: null,
	        //开关部件对应的jQuery对象
	        $switch: null,
	        //开关部件拖拽时的横向位置
	        _start: 0,
	        //左移中间点
	        _leftMiddle: 0,
	        //右移中间点
	        _rightMiddle: 0,
	        //更改前的disabled属性的值
	        _oldDisabled: false,
	        //更改前的IsOn属性的值
	        _oldIsOn: true,
	        _create: function () {
	            this._initMembers()
	                ._createSwitchButton()
	                ._loaded()
	                ._initEvent();
	        },
	        _setOption: function (key, value) {
	            var
	                self = this,
	                oldValue = self.options[key];
	            self.options[key] = value;

	            switch (key) {
	                case "disabled":
	                    self._setDisabled(value);
	                    break;
	                case "isON":
	                    self._setIsOn(value);
	                    break;
	                case "width":
	                    self._setWidth(value);
	                    self._setMiddle();
	                    break;
	                case "height":
	                    self._setHeight(value);
	                    self._setRulerHeight();
	                    break
	                case "switchWidth":
	                    self._setSwitchWidth(value);
	                    self._setMiddle();
	                    self._setTemplateMargin();
	                    break;

	            }
	        },
	        //设置控件的宽度
	        _setWidth: function (value) {
	            this.element.width(value);
	        },
	        //设置控件的高度
	        _setHeight: function (value) {
	            var self = this;
	            this.element.height(value);
	            self.$switch.height(value - 2);
	        },
	        //设置switch部件的宽度
	        _setSwitchWidth: function (value) {
	            this.$switch.width(value);
	        },
	        //设置左右中心。控件宽度和switch部件宽度变化时调用
	        _setMiddle: function () {
	            var
	                self = this,
	                width = self.options.width,
	                switchWidth = self.options.switchWidth;

	            self._leftMiddle = (width + switchWidth) / 2;
	            self._rightMiddle = (width - switchWidth) / 2;
	        },
	        //更新ruler区域的高度。控件高度变化时需要调用
	        _setRulerHeight: function () {
	            var
	                self = this,
	                height = self.options.height;

	            self.$ruler.css({
	                height: height,
	                "line-height": height + 'px'
	            });
	            if (self.$onContainer) {
	                self.$onContainer.height(height);
	            }
	            if (self.$offContainer) {
	                self.$offContainer.height(height);
	            }

	        },
	        //switch部件宽度变化时需要更新。（居中模板内容）
	        _setTemplateMargin: function () {
	            var
	                self = this,
	                switchWidth = self.options.switchWidth;
	            if (self.$onContainer) {
	                self.$onContainer.css("margin-right", switchWidth - 2);
	            }

	            if (self.$offContainer) {
	                self.$offContainer.css("margin-left", switchWidth);
	            }
	        },
	        /**
	         * 设置控件的打开状态
	         * @param {boolean} value 待设置的状态
	         */
	        _setIsOn: function (value) {
	            var self = this;
	            if (value) {
	                self._toOpenState();
	                self.element.attr("aria-checked", true);
	            } else {
	                self._toCloseState();
	                self.element.attr("aria-checked", false);
	            }

	            if (self._oldIsOn != value) {
	                //$$.executeEventHandler(self, "stateChanged", self.options.stateChanged, null, $$.Event({
	                //    element: self.element,
	                //    oldValue: self._oldIsOn,
	                //    newValue: value
	                //}));
	                self._trigger("stateChanged", null, $$.Event({
	                    element: self.element,
	                    oldValue: self._oldIsOn,
	                    newValue: value
	                }));
	                self._oldIsOn = value;
	                return self;
	            }
	        },
	        _trigger: function (type, event, args) {
	            var self = this;

	            //调用使用on注册的事件
	            self.element.trigger(type, args);
	            if (args) {
	                args.parameters = self.options.parameters[type];
	            }
	            //调用使用控件注册的事件
	            return $.Widget.prototype._trigger.call(self, type, event, args);
	        },
	        /**
	         * 设置控件的可用性
	         * @param {boolean} disabled 可用性，true表示控件禁用
	         */
	        _setDisabled: function (disabled) {
	            var self = this;
	            if (disabled) {
	                self._toDisabledState();
	            } else {
	                self._toEnableState();
	            }
	            if (self._oldDisabled != disabled) {
	                $$.executeEventHandler(self, "isEnabledChanged", self.options.isEnabledChanged, null, $$.Event({
	                    element: self.element,
	                    oldValue: self._oldDisabled,
	                    newValue: disabled
	                }));
	                self._oldDisabled = disabled;
	            }

	        },
	        //转换到不可用状态
	        _toDisabledState: function () {
	            var self = this;

	            self.element.addClass(_constant.SWITCH_BUTTON_DISABLED_CLASS);
	            self.$switch
	                .attr("tabindex", -1)
	                .draggable("disable");
	        },
	        //转换到可用状态
	        _toEnableState: function () {
	            var self = this;

	            self.element.removeClass(_constant.SWITCH_BUTTON_DISABLED_CLASS);
	            self.$switch
	                .attr("tabindex", 0)
	                .draggable("enable");
	        },
	        //初始化成员
	        _initMembers: function () {
	            var
	                self = this,
	                options = self.options;
	            ++uuid;
	            self.id += uuid;
	            self.element
	                .attr("id", self.id)
	                .attr("tabindex", "0")
	                .attr("role", "checkbox")
	                .attr("aria-checked", true)
	                .addClass(_constant.SWITCH_BUTTON_CLASS);
	            options.onTemplate = options.onTemplate || self._getOnTemplate();
	            options.offTemplate = options.offTemplate || self._getOffTemplate();

	            return self;
	        },
	        //获取打开状态的模板
	        _getOnTemplate: function () {
	            var
	                h = -1,
	                html = [];
	            html[++h] = '<div class=" ' + _constant.ICON_ON_TEMPLATE + '">ON</div>';
	            return html.join("");
	        },
	        //获取关闭状态的模板
	        _getOffTemplate: function () {
	            var
	                h = -1,
	                html = [];
	            html[++h] = '<div class=" ' + _constant.ICON_OFF_TEMPLATE + '">OFF</div>';

	            return html.join("");
	        },
	        //创建switchbutton
	        _createSwitchButton: function () {
	            var
	                self = this,
	                h = -1,
	                html = [];

	            //ruler
	            html[++h] = '<div class="' + _constant.RULER_CLASS + '">';
	            html[++h] = '<div class="' + _constant.RULER_ON_CONTAINER_CLASS + '">' + self.options.onTemplate + '</div>';
	            html[++h] = '<div class="' + _constant.RULER_OFF_CONTAINER_CLASS + '">' + self.options.offTemplate + '</div>';
	            html[++h] = '</div>';

	            //switch
	            html[++h] = '<div tabindex="0" class="' + _constant.SWITCH_CLASS + '"></div>';

	            this.element.html(html.join(''));

	            return this;
	        },
	        //部件创建成功后触发
	        _loaded: function () {
	            var
	                self = this,
	                options = self.options;

	            self.$switch = self.element.children('div[class~="' + _constant.SWITCH_CLASS + '"]');
	            self.$ruler = self.element.children('div[class~="' + _constant.RULER_CLASS + '"]');
	            self.$onContainer = self.$ruler.children('div[class~="' + _constant.RULER_ON_CONTAINER_CLASS + '"]');
	            self.$offContainer = self.$ruler.children('div[class~="' + _constant.RULER_OFF_CONTAINER_CLASS + '"]')

	            if (options.width == null) {
	                options.width = 60;
	                self._setWidth(options.width);
	            }
	            //else {
	            //    self._setWidth(options.width);
	            //}

	            if (options.height == null) {
	                options.height = 30;
	                self._setHeight(options.height);
	            }
	            //else {
	            //    self._setHeight(options.height);
	            //}

	            //更新switch的布局
	            if (options.switchWidth == null) {
	                options.switchWidth = 30;
	                self._setSwitchWidth(options.switchWidth);
	            }
	            //else {
	            //    self._setSwitchWidth(options.switchWidth);
	            //}
	            self._setMiddle();

	            self._setRulerHeight();
	            self._setTemplateMargin();

	            self.$switch
	                .draggable({
	                    switchbutton: self,
	                    disabled: options.disabled,
	                    containment: self.element,
	                    start: self._onSwitchDragOn,
	                    stop: self._onSwitchDragStop,
	                    zIndex: 2
	                });

	            if (options.disabled == true) {
	                self._setDisabled(true);
	            }

	            if (options.isON == false) {
	                self._setIsOn(false);
	            }

	            return self;
	        },
	        //开关部件在键盘按下时触发
	        _onSwitchKeydown: function (e) {
	            var self = e.data;
	            if (!self.options.disabled) {
	                if (e.which == $.ui.keyCode.LEFT) {
	                    self._setOption("isON", false);

	                } else if (e.which == $.ui.keyCode.RIGHT) {
	                    self._setOption("isON", true);
	                } else if (e.which == $.ui.keyCode.SPACE || e.which == $.ui.keyCode.ENTER || e.which == $.ui.keyCode.NUMPAD_ENTER) {

	                    if (e.which == $.ui.keyCode.SPACE) {
	                        e.preventDefault();
	                    }
	                    if (self.options.isON) {
	                        self._setOption("isON", false);
	                    } else {
	                        self._setOption("isON", true);
	                    }
	                }
	            }
	        },
	        _onSwitchDragOn: function (e, ui) {
	            ui.helper.draggable("option", "switchbutton").element.focus();
	        },
	        //开关部件停止拖拽时触发
	        _onSwitchDragStop: function (e, ui) {
	            var
	                self = ui.helper.draggable("option", "switchbutton"),
	                isOpen;

	            if (self.options.isON) {
	                isOpen = ui.position.left >= self._rightMiddle;
	            } else {
	                isOpen = (self.element.width() - ui.position.left) <= self._leftMiddle
	            }
	            if (isOpen) {
	                self._setOption("isON", true);
	            } else {
	                self._setOption("isON", false);
	            }
	            self.element.focus();
	        },
	        //注册事件
	        _initEvent: function () {
	            var self = this;
	            self.element
	                .on("keydown", self, self._onSwitchKeydown)
	                .on("click", self, self._onElementClick);
	            return this;
	        },
	        //element点击时触发
	        _onElementClick: function (e) {
	            var
	                self = e.data,
	                options = self.options;
	            if (!options.disabled) {
	                if (self.options.isON) {
	                    self._setOption("isON", false);
	                } else {
	                    self._setOption("isON", true);
	                }
	                self.element.focus();
	            }

	        },
	        //跳转到打开状态
	        _toOpenState: function () {
	            var self = this;
	            self.options.isON = true;
	            self.$ruler.removeClass(_constant.RULER_OFF_CLASS).removeClass(_constant.OFF_HOVER);
	            self.$onContainer.show();
	            self.$offContainer.hide();
	            self.$switch.css({
	                left: "auto",
	                right: 0
	            }).removeClass(_constant.RULER_OFF_CLASS);
	        },
	        //跳转到关闭状态
	        _toCloseState: function () {
	            var self = this;
	            self.options.isON = false;
	            self.$ruler.addClass(_constant.RULER_OFF_CLASS).addClass(_constant.OFF_HOVER);
	            self.$onContainer.hide();
	            self.$offContainer.show();
	            self.$switch.css("left", 0).addClass(_constant.RULER_OFF_CLASS);


	        },
	        changeState: function (value) {
	            this._setOption("isON", value);
	        },
	        disabled: function (value) {
	            this._setOption("disabled", value);
	        }
	    });
	}(jQuery, AUI));


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// AngularJS
	// ----------------------------------------
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);

/***/ },
/* 97 */
/***/ function(module, exports) {

	(function ($) {
	    var
	        uuid = -1,
	        body = $('html'),
	         _reserve,
	        DEFAULT_SERVICES = ['$element', '$scope'],
	        CONTROLLER_NAME = '$$controller';

	    if (window.$$controller) {
	        $.error('$$controller is used by other code.Please resolve conflict.');
	    };
	    /**
	     * @param {string} name �����ռ�+ʵ������
	     * #param {object} prototype ԭ��
	     */
	    window.$$controller = function (name, prototype) {
	        init(name, prototype);
	    }

	    _reserve = ['_apply', '_controller', '_initCallback', '_loaded', ];

	    controller.prototype = {
	        _apply: function (update) {
	            if (!this._scope.$$phase) {
	                this._scope.$apply();
	            }
	        },
	        //������������
	        _controller: null,
	        //�����󶨷���
	        _initCallback: $.noop,
	        //�ĵ��������ɺ󴥷�
	        _loaded: $.noop,
	    }

	    //page���Ĺ��캯��
	    function controller() {
	        if (!(this instanceof controller)) {
	            return new controller();
	        }
	    }

	    function filter(keys, obj) {
	        var i = 0, c = keys.length;

	        for (; i < c; i++) {
	            delete obj[keys[i]];
	        }
	    }

	    function destroy() {
	        instance._element.off(ns);
	    }

	    //����page����ʵ��
	    function init(name, prototype) {
	        var
	            fullName,
	            className,
	            _controller = controller,
	            instance;
	        name = (name.split(".") + "").replace(/,/g, "_");
	        //���ص�body�ϵ���������
	        fullName = "controller_" + name;

	        className = (fullName.split("_") + "").replace(/,/g, "-");

	        if ($$controller[name]) {
	            //�ϲ�
	            filter(_reserve, prototype);
	            $.extend(true, body.data(fullName), prototype);
	        } else {
	            //����
	            body.data(fullName, _controller());
	            $$controller[name] = function () {
	                var
	                    method = arguments[0],
	                    index = 0,
	                    isMethod,
	                    args = Array.prototype.slice.call(arguments, 1),
	                    instance = body.data(fullName),
	                    controller,
	                    methodValue;

	                if (typeof method == "number") {
	                    index = method < 0 ? 0 : method;
	                    method = arguments[1];
	                }

	                isMethod = typeof method === "string";

	                if (!instance) {
	                    $.error('Can not call methods on page "' + name + '" prior to initialization; ' +
	                        'attempted to call method "' + method + ' "');
	                }

	                if (isMethod) {
	                    if (!$.isFunction(instance[method]) || method.charAt(0) === "_") {
	                        $.error('No such method "' + method + '" for "' + name + '" controller instance.');
	                    }
	                    controller = $('.' + className + ':eq(' + index + ')');
	                    if (controller.length > 0) {
	                        controller = controller.data(CONTROLLER_NAME);
	                    } else {
	                        $.error('Can not found controller.');
	                    }
	                    methodValue = instance[method].apply(controller, args);

	                    //������ʽ����
	                    if (methodValue === undefined || methodValue === instance) {
	                        methodValue = $$controller;
	                    }

	                    return methodValue;
	                } else {
	                    bridge(this, $$controller[name].$inject, arguments, fullName);
	                }
	            };
	            $$controller[name].inject = inject;
	            $$controller[name].$inject = DEFAULT_SERVICES;
	        }

	        instance = body.data(fullName);
	        instance._className = className;
	        $.extend(true, instance, prototype || {});
	    }

	    function bridge(vm, inject, args, fullName) {
	        var
	            controller = $.extend({}, body.data(fullName)),
	            ns;

	        resetMembers(vm, controller, inject, args);
	        ns = '.controller' + controller._uuid;

	        controller._element = $(controller._element);
	        controller._element
	            .addClass(controller._className)
	            .on('remove' + ns, controller, destroy)
	            .data(CONTROLLER_NAME, controller);

	        if ($.isFunction(controller._controller)) {
	            controller._controller.apply(controller, arguments);
	        } else {
	            $.error('"_controller" is not implemented.');
	        }
	        controller._element
	        controller._initCallback();
	        controller._loaded();


	    }

	    function inject() {
	        if ($.isArray(this.$inject)) {
	            this.$inject = this.$inject.concat(DEFAULT_SERVICES);
	        } else {
	            this.$inject = DEFAULT_SERVICES;
	        }
	    }

	    //����controllerʵ����Ĭ�ϳ�Ա
	    function resetMembers(vm, self, names, args) {
	        var
	            i = 0,
	            c = args.length;

	        self._vm = vm;

	        for (; i < c; i++) {
	            self['_' + names[i].replace('$', '')] = args[i];
	        }
	    }

	})(jQuery)

/***/ },
/* 98 */
/***/ function(module, exports) {

	(function ($) {
	    var uuid = -1, body = $('html'), _statics, _reserve, _directive;

	    if (window.$$page) {
	        $.error('$$page is used by other code.Please resolve conflict.');
	    };
	    /**
	     * @param {string} name �����ռ�+ʵ������
	     * #param {object} prototype ԭ��
	     */
	    window.$$page = function (name, prototype) {
	        init(name, prototype);
	    }

	    _reserve = ["_controller", "_enum", "_initCallback", "_loaded"];
	    _statics = ["$uuid", "$totalPage", "$enum"];
	    _directive = ["_link", "_trigger", "_apply"];

	    page.prototype = {
	        //��ready�����е���,��_prepare֮������
	        _create: function () {

	        },
	        _createPage: function () {
	            var self = this;
	            self._uuid = ++uuid;
	            self._prepare();
	            $(function () {
	                self._create();
	            });

	        },
	        //������������
	        _controller: null,
	        //�����󶨷���
	        _initCallback: $.noop,
	        //�ĵ��������ɺ󴥷�
	        _loaded: $.noop,
	        //ö�ټ���
	        _enum: {

	        },
	        //����ʵ��ʱֱ�ӵ���
	        _prepare: function () {

	        },
	        _link: function (args) {
	            //ָ������
	            var base = args.base;

	            page.prototype._initMembers.call(this, args.scope, args.elem);
	            base._initMembers.call(this, args.$parse, args.scope, args.attrs);

	            page.prototype._convertAs.call(this, args.scope);
	            base._convertAs.call(this, args.scope, transform);

	            base._getTemplate.call(this, base, trimTemplate, args.$parse);

	            page.prototype._bridge.call(this, args.widget);
	            page.prototype._mappingViewModel.call(this);
	            base._initWidget.call(this, base);
	            base._addWatcher.call(this, base);
	        },
	        _trigger: function (e, args, name) {
	            var self = e.data.self;

	            if ($.isFunction(self._vm[name])) {
	                e.data = undefined;
	                args.element = undefined;
	                self._vm[name].call(self._vm, e, args);
	            }
	        },
	        _apply: function (update) {
	            if (!this._scope.$$phase) {
	                this._scope.$apply();
	            }
	        },
	        _bridge: function (widget) {
	            var
	                self = this,
	                context = "scope",
	                args = this._args;
	            if (typeof args.name == "string" && !!args.name) {
	                if (this._vm.hasOwnProperty(args.name)) {
	                    context = "scope";
	                    if (this._isAs) {
	                        context += '.' + args.as;
	                    }
	                    $.error(args.name + ' is already in ' + context);
	                } else {
	                    this._vm[args.name] = function () {
	                        if (arguments[0] == "option") {
	                            $.error('call method "option" is not allowed.')
	                        }
	                        return self._ele[widget].apply(self._ele, arguments);
	                    };
	                }
	            }
	        },
	        //Ϊָ�����ӹ�������
	        _initMembers: function (scope, elem) {
	            this._ele = $(elem);
	            this._vm = scope;
	            //scope����
	            this._scope = scope;
	            //��ʾ�Ƿ���mapping������as
	            this._isAs = false;
	        },
	        _getTemplate: $.noop,
	        //֧�� controller as�﷨
	        _convertAs: function (scope) {
	            var args = this._args;
	            if (args == null) {
	                $.error('Call "_initMembers" method failed.')
	            }
	            if (typeof args.as == "string" && !!args.as) {
	                this._vm = scope[args.as];
	                this._isAs = true;
	            }
	        },
	        //��vm�еķ���������ӳ�䵽viewModule(angular to ko)
	        _mappingViewModel: function () {
	            var args = this._args;
	            for (var j in args.viewModel) {
	                args.viewModel[j] = this._vm[j];
	            }
	        },
	        _initWidget: $.noop,
	        _addWatcher: $.noop,
	        $uuid: function () {
	            if (console && console.log) {
	                console.log(this._uuid);
	            };
	        },
	        $totalPage: function () {
	            if (console && console.log) {
	                console.log(uuid + 1);
	            };
	        },
	        /**
	         * ��ȡö��
	         * param {string} type ö������
	         */
	        $enum: function (type) {
	            var value = {};
	            if (typeof type == "string") {
	                $.extend(true, value, this._enum[type]);
	            }
	            return value;
	        }
	    }

	    //page���Ĺ��캯��
	    function page() {
	        if (!(this instanceof page)) {
	            return new page();
	        }
	    }

	    function transform(as, name) {
	        if (name.indexOf(".") == -1 && name != undefined) {
	            name = as + '.' + name;
	        }

	        return name;
	    }

	    /**
	     * ��ȡģ��
	     * @param {jQuery} ele ����ģ����jQuery����
	     */
	    function trimTemplate(temp) {
	        return temp && temp.trim();
	    }

	    function isDirective(name) {
	        var name = name.split("_");

	        return name[0] == "aui" && name[name.length - 1] == "directive";
	    }

	    function filter(keys, obj) {
	        var i = 0, c = keys.length;

	        for (; i < c; i++) {
	            delete obj[keys[i]];
	        }
	    }

	    //����controllerʵ����Ĭ�ϳ�Ա
	    function setControllerMember(vm, self, names, args) {
	        var i = 0, c = args.length;
	        self._vm = vm;

	        for (; i < c; i++) {
	            self['_' + names[i].replace('$', '')] = args[i];
	        }
	    }

	    function initController(vm, inject, args, fullName) {
	        var
	            instance = body.data(fullName);

	        setControllerMember(vm, instance, inject, args);
	        if ($.isFunction(instance._controller)) {
	            instance._controller.apply(instance, arguments);
	        } else {
	            $.error('"_controller" is not implemented.');
	        }

	        instance._initCallback();
	        instance._loaded();

	    }

	    //����page����ʵ��
	    function init(name, prototype) {
	        var
	            createPage,
	            fullName,
	            statics = _statics,
	            _page = page,
	            instance;
	        //���ص�$$page�ϵ���������
	        name = (name.split(".") + "").replace(/,/g, "_");
	        //���ص�body�ϵ���������
	        fullName = "page_" + name;
	        if ($$page[name]) {
	            //�ϲ�
	            filter(_reserve, prototype);
	            if (isDirective(name)) {
	                filter(_directive, prototype);
	            }
	            $.extend(true, body.data(fullName), prototype);
	        } else {
	            //����
	            body.data(fullName, _page());
	            $$page[name] = function () {
	                var
	                    options = arguments[0],
	                    isMethod = typeof options === "string",
	                    args = Array.prototype.slice.call(arguments, 1),
	                    instance = body.data(fullName),
	                    methodValue;
	                if (!instance) {
	                    $.error('Cannot call methods on page "' + name + '" prior to initialization; ' +
	                        'attempted to call method "' + options + ' "');
	                }

	                if (isMethod) {
	                    if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
	                        $.error('No such method "' + options + '" for "' + name + '" page instance.');
	                    }
	                    if ($.inArray(options, statics) > -1) {
	                        //���þ�̬����
	                        methodValue = _page.prototype[options].apply(instance, args);
	                    } else {
	                        methodValue = instance[options].apply(instance, args);
	                    }

	                    //������ʽ����
	                    if (methodValue === undefined || methodValue === instance) {
	                        methodValue = $$page;
	                    }

	                    return methodValue;
	                } else {
	                    initController(this, $$page[name].$inject, arguments, fullName);
	                }
	            }
	        }

	        instance = body.data(fullName);

	        if (isDirective(name)) {
	            //����ָ���ӿڱ�����
	            filter(_directive, prototype);
	        }

	        $.extend(true, instance, prototype || {});

	        page.prototype._createPage.call(instance);
	    }
	})(jQuery)

/***/ },
/* 99 */
/***/ function(module, exports) {

	$$page("toolkit.alert", {
	    //body��Ӧ��jQuery����
	    $body: null,
	    //alert��Ӧ��jQuery����
	    $alert: null,
	    _prepare: function () {
	        this._initMembers()
	            ._createAlert();
	    },
	    //��ʼ����Ա
	    _initMembers: function () {
	        var self = this;
	        self.$body = $('body');
	        self.$alert = $('<div></div>');
	        self.$body.append(self.$alert);
	        return self;
	    },
	    //����Alert
	    _createAlert: function () {
	        var self = this;
	        self.$alert.messagebox({
	            title: "",
	            buttons: {
	                OK: function (e, args) {
	                    self.hide();
	                    if ($.isFunction(self._clickOK)) {
	                        self._clickOK();
	                    }
	                }
	            },
	            closeInTitleBar: function (e, args) {
	                if ($.isFunction(self._closeInTitleBar)) {
	                    self._closeInTitleBar();
	                }
	            },
	            theme: {
	                OK: "red"
	            }
	        });
	        return self;
	    },
	    //��ȡ������һ����ֵ����ֵ����OK����ʱ�ĵ��õĻص���
	    _clickOK: $.noop,
	    _closeInTitleBar: $.noop,
	    //��ʾalert
	    show: function (args) {
	        var
	            self = this,
	            args = args || {},
	            x;

	        //delete args.closeInTitleBar;
	        self._clear();

	        for (x in args) {
	            self.$alert.messagebox("option", x, args[x]);
	        }

	        if (!$.isFunction(args.clickOK)) {
	            args.clickOK = $.noop;
	        }
	        if (!$.isFunction(args.closeInTitleBar)) {
	            args.closeInTitleBar = $.noop;
	        }

	        self._clickOK = args.clickOK;
	        self._closeInTitleBar = args.closeInTitleBar;
	        self.$alert.messagebox("show");
	    },
	    _clear: function () {
	        var
	            args,
	            x;
	        args = {
	            title: '',
	            type: 'i',
	            content: '',
	            buttons: {}
	        };
	        for (x in args) {
	            this.$alert.messagebox("option", x, args[x]);
	        }
	        this._clickOK = $.noop;
	        this._closeInTitleBar = $.noop;
	    },
	    //�ر�alert
	    hide: function () {
	        this.$alert.messagebox("hide");
	    }
	});

/***/ },
/* 100 */
/***/ function(module, exports) {

	$$page("toolkit.confirm", {
	    //body��Ӧ��jQuery����
	    $body: null,
	    //confirm��Ӧ��jQuery����
	    $confirm: null,
	    _prepare: function () {
	        this._initMembers()
	            ._createconfirm();
	    },
	    //��ʼ����Ա
	    _initMembers: function () {
	        var self = this;
	        self.$body = $('body');
	        self.$confirm = $('<div></div>');
	        self.$body.append(self.$confirm);
	        return self;
	    },
	    //����confirm
	    _createconfirm: function () {
	        var self = this;
	        self.$confirm.messagebox({
	            title: "",
	            buttons: {
	                OK: function (e, args) {
	                    self.hide();
	                    if ($.isFunction(self._clickOK)) {
	                        self._clickOK();
	                    }
	                },
	                Cancel: function (e, args) {
	                    self.hide();
	                    if ($.isFunction(self._clickCancel)) {
	                        self._clickCancel();
	                    }
	                }
	            },
	            closeInTitleBar: function (e, args) {
	                if ($.isFunction(self._closeInTitleBar)) {
	                    self._closeInTitleBar();
	                }
	            },
	            theme: {
	                OK: "red",
	                Cancel: "white"
	            }
	        });
	        return self;
	    },
	    //��ȡ������һ����ֵ����ֵ��ʾOK����ʱ�ĵ��õĻص���
	    _clickOK: $.noop,
	    _clickCancel: $.noop,
	    _closeInTitleBar: $.noop,
	    //��ʾconfirm
	    show: function (args) {
	        var
	            self = this,
	            args = args || {},
	            x;

	        self._clear();
	        for (x in args) {
	            self.$confirm.messagebox("option", x, args[x]);
	        }
	        if ($.isFunction(args.clickOK)) {
	            self._clickOK = args.clickOK;
	        }
	        if ($.isFunction(args.clickCancel)) {
	            self._clickCancel = args.clickCancel;
	        }
	        if ($.isFunction(args.closeInTitleBar)) {
	            self._clickCancel = args.closeInTitleBar;
	        }
	        self.$confirm.messagebox("show");
	    },
	    _clear: function () {
	        var
	            args,
	            x;
	        args = {
	            title: '',
	            type: 'i',
	            content: '',
	            buttons: {}
	        };
	        for (x in args) {
	            this.$confirm.messagebox("option", x, args[x]);
	        }
	        this._clickOK = $.noop;
	        this._clickCancel = $.noop;
	        this._closeInTitleBar = $.noop;
	    },
	    //�ر�confirm
	    hide: function () {
	        this.$confirm.messagebox("hide");
	    }
	});

/***/ },
/* 101 */
/***/ function(module, exports) {

	$$page("toolkit.gloading", {
	    _prepare: function () {
	        this._initMembers()
	            ._createAlert();
	    },
	    //初始化成员
	    _initMembers: function () {
	        this.$body = $('body');
	        return this;
	    },
	    //创建Alert
	    _createAlert: function () {
	        this.$body.loading();
	    },
	    //显示alert
	    show: function (args) {
	        this.$body.loading('show');
	    },
	    //关闭alert
	    hide: function () {
	        this.$body.loading('hide');
	    }
	});

/***/ },
/* 102 */
/***/ function(module, exports) {

	(function ($) {
	    var uuid = -1, body = $('html');

	    if (window.$$service) {
	        $.error('$$service is used by other code.Please resolve conflict.');
	    };

	    window.$$service = function (name, prototype) {
	        init(name, prototype);
	    }

	    page.prototype = {

	    };

	    function firstUpperCase(str) {
	        return str.replace(/(\w)/, function (v) {
	            return v.toUpperCase()
	        });
	    }

	    //����ָ��ģ��
	    function initModule() {
	        var
	            module,
	            service = this;

	        this._uuid = ++uuid;

	        module = this._namespace + '.services';
	        try {
	            angular.module(module);
	        } catch (e) {
	            angular.module(module, []);
	        }
	        angular
	            .module(module)
	            .factory(this._namespace + firstUpperCase(this._serviceName), function () {
	                delete service._namespace;
	                delete service._serviceName;
	                return service;
	            });
	    }

	    //page���Ĺ��캯��
	    function page() {
	        if (!(this instanceof page)) {
	            return new page();
	        }
	    }

	    //����page����ʵ��
	    function init(name, prototype) {
	        var
	            fullName,
	            _page = page,
	            serviceName,
	            //�����ռ�
	            namespace,
	            structure = name.split("."),
	            instance;

	        namespace = structure[0];
	        serviceName = structure[1];
	        //���ص�$$service�ϵ���������
	        name = (structure + "").replace(/,/g, "_");

	        //���ص�body�ϵ���������
	        fullName = "service_" + name;

	        if ($$service[name]) {
	            //����������ͬ��ָ��
	            $.error(name + " service is exist.");
	        } else {
	            //����
	            instance = _page();
	            $$service[name] = function (name) {
	                if (name == "uuid") {
	                    return instance._uuid;
	                } else if (name == "total") {
	                    return uuid + 1;
	                } else {
	                    return instance;
	                }
	            };
	        }

	        $.extend(true, instance, prototype || {});

	        instance._namespace = namespace;
	        instance._serviceName = serviceName;

	        initModule.call(instance);
	    }
	})(jQuery)

/***/ },
/* 103 */
/***/ function(module, exports) {

	(function () {
	    "use strict";
	    $$service('ex.birthday.service', {
	        hide: function (id) {
	            var data = $('#' + id).data(id);

	            data.messagebox.messagebox('hide');
	        },
	        show: function (id, e) {
	            var
	                $birthday = $('#' + id),
	                data,
	                current = $(e.currentTarget),
	                instance;

	            if (!$$.isObject($birthday.data(id))) {
	                this._regist(id);
	            }
	            data = $birthday.data(id);

	            if (data.uuid != this._uuid) {
	                $.error('Another object on this page already uses ID "' + id + '".');
	            }
	            data.messagebox.messagebox('option', 'overlayOpacity', 0);
	            data.messagebox.messagebox('show');

	            $(window)
	                .on('resize' + '.birthday', { mx: data.messagebox, dp: data.datepicker }, this._onWindowResize)
	                .on('scroll' + '.birthday', { mx: data.messagebox, dp: data.datepicker }, this._onWindowResize)
	            this._updatePosition(data.dialog, current);

	            return this;
	        },
	        //更新datepicker控件的选中日期
	        updateDate: function (id, value, pro) {
	            var
	                data = $('#' + id).data(id),
	                date;

	            data.value = value[pro];
	            date = value[pro]();
	            if (!$$.isDate(date)) {
	                date = null;
	            }
	            data.datepicker.datepicker("option", "selectedDate", date);
	            return this;
	        },
	        //将datepicker选中的日期设置到单元格的数据源
	        setDate: function (id) {
	            var
	                date,
	                data = $('#' + id).data(id);

	            date = data.datepicker.datepicker("option", "selectedDate");
	            data.value(date);
	            delete data.value;
	            data.messagebox.messagebox('hide');

	            return date;
	        },
	        _regist: function (id) {
	            var
	                $birthday = $('#' + id),
	                data;

	            $birthday.data(id, {
	                uuid: this._uuid,
	                datepicker: $birthday.find('.aui-datepicker'),
	                dialog: $birthday.find('.aui-messagebox'),
	                messagebox: $birthday.find('.date-dialog-content')
	            });
	            data = $birthday.data(id);
	            data.messagebox.on('shown' + '.birthday', { self: this, data: data }, this._onFirstShow);

	        },
	        _onFirstShow: function (e) {
	            var
	                self = e.data.self,
	                data = e.data.data;

	            data.messagebox.off('.birthday');

	            data.messagebox
	                .messagebox('getOverlay')
	                .on('click' + '.birthday', data.messagebox, self._onOverlayClick)
	        },
	        _onOverlayClick: function (e) {
	            var mx = e.data;

	            if ($(e.target).hasClass('aui-overlay') && mx.is(':visible')) {
	                mx.messagebox('hide');
	            }
	        },
	        _onWindowResize: function (e) {
	            e.data.mx.messagebox('hide');
	            e.data.dp.datepicker('close');
	            $(window).off('.birthday');
	        },
	        _updatePosition: function (dialog, current) {
	            dialog.position({
	                my: "left top+" + current.height(),
	                at: "left top+2",
	                of: current,
	                collision: "flipfit flipfit"
	            });
	        }
	    });
	})();

/***/ }
/******/ ]);